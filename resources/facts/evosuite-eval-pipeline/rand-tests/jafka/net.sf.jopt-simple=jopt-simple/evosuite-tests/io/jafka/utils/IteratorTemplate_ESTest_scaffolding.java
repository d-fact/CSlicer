/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Nov 12 14:29:21 GMT 2019
 */

package io.jafka.utils;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class IteratorTemplate_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.jafka.utils.IteratorTemplate"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/rand-tests/jafka/net.sf.jopt-simple=jopt-simple"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(IteratorTemplate_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.zookeeper.CreateMode",
      "org.apache.zookeeper.client.HostProvider",
      "org.apache.zookeeper.ZooKeeper$States",
      "org.apache.jute.InputArchive",
      "org.apache.zookeeper.KeeperException$DataInconsistencyException",
      "org.apache.zookeeper.KeeperException$NoAuthException",
      "com.github.zkclient.ZkClient$4",
      "io.jafka.utils.IteratorTemplate$State",
      "com.github.zkclient.ZkClient$5",
      "io.jafka.api.ICalculable",
      "com.github.zkclient.ZkClient$6",
      "com.github.zkclient.ZkClient$7",
      "io.jafka.producer.serializer.MessageEncoders",
      "com.github.zkclient.IZkStateListener",
      "io.jafka.consumer.ConsumerConnector",
      "org.apache.zookeeper.ZooKeeper",
      "org.apache.zookeeper.ClientCnxnSocket",
      "io.jafka.producer.serializer.ByteArrayEncoders",
      "org.apache.zookeeper.ZooKeeper$ChildWatchRegistration",
      "org.apache.zookeeper.ClientCnxn$SessionTimeoutException",
      "org.apache.zookeeper.server.ByteBufferInputStream",
      "org.apache.zookeeper.Op$Create",
      "org.apache.jute.Record",
      "io.jafka.common.ConsumerTimeoutException",
      "org.apache.zookeeper.KeeperException$SessionMovedException",
      "org.apache.zookeeper.ZooKeeper$ZKWatchManager",
      "com.github.zkclient.exception.ZkNodeExistsException",
      "org.apache.zookeeper.KeeperException$NotReadOnlyException",
      "org.apache.zookeeper.ClientWatchManager",
      "com.github.zkclient.exception.ZkInterruptedException",
      "org.apache.zookeeper.KeeperException$InvalidACLException",
      "org.apache.zookeeper.client.ZooKeeperSaslClient",
      "org.apache.zookeeper.KeeperException$RuntimeInconsistencyException",
      "org.apache.zookeeper.AsyncCallback$ACLCallback",
      "io.jafka.message.Message",
      "org.apache.zookeeper.Op$SetData",
      "org.apache.zookeeper.client.ZooKeeperSaslClient$SaslState",
      "io.jafka.producer.serializer.DefaultEncoders",
      "io.jafka.utils.KV",
      "org.apache.jute.OutputArchive",
      "org.apache.zookeeper.Version",
      "com.github.zkclient.ZkClient",
      "org.apache.zookeeper.KeeperException$UnimplementedException",
      "org.apache.zookeeper.MultiTransactionRecord",
      "com.github.zkclient.exception.ZkException",
      "io.jafka.consumer.FetchedDataChunk",
      "org.apache.zookeeper.Watcher",
      "org.apache.zookeeper.KeeperException$CodeDeprecated",
      "org.apache.zookeeper.ZooKeeper$WatchRegistration",
      "com.github.zkclient.ZkEventThread$ZkEvent",
      "org.apache.zookeeper.Environment$Entry",
      "io.jafka.mx.IMBeanName",
      "io.jafka.utils.ZKConfig",
      "com.github.zkclient.IZkClient",
      "io.jafka.producer.serializer.StringDecoder",
      "org.apache.zookeeper.Watcher$Event$EventType",
      "org.apache.zookeeper.ClientCnxn$RWServerFoundException",
      "org.apache.zookeeper.KeeperException$NoChildrenForEphemeralsException",
      "org.apache.zookeeper.AsyncCallback",
      "org.apache.zookeeper.AsyncCallback$DataCallback",
      "io.jafka.message.CompressionCodec",
      "io.jafka.consumer.ZookeeperConsumerConnector",
      "org.apache.zookeeper.KeeperException$BadVersionException",
      "org.apache.zookeeper.KeeperException$OperationTimeoutException",
      "org.apache.zookeeper.AsyncCallback$StatCallback",
      "io.jafka.consumer.ConsumerConfig",
      "io.jafka.consumer.Fetcher",
      "org.apache.zookeeper.AsyncCallback$Children2Callback",
      "org.apache.zookeeper.data.Stat",
      "org.apache.zookeeper.KeeperException$NoNodeException",
      "org.apache.zookeeper.ClientCnxn$SessionExpiredException",
      "org.apache.zookeeper.KeeperException$BadArgumentsException",
      "org.apache.zookeeper.ClientCnxn$SendThread",
      "org.apache.zookeeper.ZooKeeper$DataWatchRegistration",
      "org.apache.zookeeper.KeeperException$ConnectionLossException",
      "org.apache.zookeeper.Watcher$Event$KeeperState",
      "org.apache.zookeeper.Op",
      "org.apache.zookeeper.KeeperException$MarshallingErrorException",
      "org.apache.zookeeper.Environment",
      "io.jafka.common.UnknownMagicByteException",
      "org.apache.zookeeper.server.ZooKeeperThread",
      "org.ietf.jgss.GSSException",
      "io.jafka.cluster.Broker",
      "com.github.zkclient.exception.ZkBadVersionException",
      "com.github.zkclient.exception.ZkNoNodeException",
      "org.apache.zookeeper.proto.RequestHeader",
      "com.github.zkclient.ZkLock",
      "com.github.zkclient.IZkClient$DataUpdater",
      "org.apache.zookeeper.KeeperException$AuthFailedException",
      "org.apache.zookeeper.Op$Check",
      "org.apache.zookeeper.version.Info",
      "com.github.zkclient.IZkChildListener",
      "io.jafka.utils.IteratorTemplate$1",
      "org.apache.zookeeper.proto.ReplyHeader",
      "io.jafka.utils.Pool",
      "org.apache.jute.Index",
      "com.github.zkclient.IZkDataListener",
      "com.github.zkclient.exception.ZkTimeoutException",
      "io.jafka.utils.IteratorTemplate",
      "io.jafka.producer.serializer.Encoder",
      "org.apache.zookeeper.ClientCnxn",
      "io.jafka.cluster.Cluster",
      "org.apache.zookeeper.ZooKeeper$ExistsWatchRegistration",
      "org.apache.zookeeper.KeeperException$Code",
      "io.jafka.consumer.ConsumerIterator",
      "org.apache.zookeeper.ClientCnxn$Packet",
      "org.apache.zookeeper.Op$Delete",
      "org.apache.zookeeper.AsyncCallback$ChildrenCallback",
      "org.apache.zookeeper.KeeperException$APIErrorException",
      "org.apache.zookeeper.KeeperException$NotEmptyException",
      "org.apache.zookeeper.Transaction",
      "org.apache.zookeeper.AsyncCallback$VoidCallback",
      "org.apache.zookeeper.KeeperException",
      "org.apache.zookeeper.KeeperException$SystemErrorException",
      "org.apache.zookeeper.WatchedEvent",
      "org.apache.zookeeper.AsyncCallback$MultiCallback",
      "org.apache.zookeeper.KeeperException$SessionExpiredException",
      "org.apache.zookeeper.proto.WatcherEvent",
      "org.apache.zookeeper.AsyncCallback$StringCallback",
      "org.apache.zookeeper.KeeperException$NodeExistsException",
      "io.jafka.utils.Utils",
      "org.apache.zookeeper.KeeperException$InvalidCallbackException",
      "io.jafka.common.UnKnownCodecException",
      "io.jafka.producer.serializer.Decoder"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("io.jafka.producer.serializer.Decoder", false, IteratorTemplate_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(IteratorTemplate_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.jafka.utils.IteratorTemplate",
      "io.jafka.utils.IteratorTemplate$State",
      "io.jafka.utils.IteratorTemplate$1",
      "io.jafka.producer.serializer.StringDecoder",
      "io.jafka.consumer.ConsumerIterator",
      "io.jafka.consumer.FetchedDataChunk",
      "io.jafka.message.Message",
      "io.jafka.utils.Utils",
      "io.jafka.common.ConsumerTimeoutException",
      "io.jafka.consumer.ZookeeperConsumerConnector",
      "io.jafka.producer.serializer.ByteArrayEncoders",
      "io.jafka.producer.serializer.DefaultEncoders",
      "io.jafka.producer.serializer.MessageEncoders",
      "io.jafka.common.UnknownMagicByteException"
    );
  }
}
