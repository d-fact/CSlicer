/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Nov 12 14:28:09 GMT 2019
 */

package io.jafka.admin;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class AdminOperation_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "io.jafka.admin.AdminOperation"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/rand-tests/jafka/net.sf.jopt-simple=jopt-simple"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AdminOperation_ESTest_scaffolding.class.getClassLoader() ,
      "io.jafka.message.MessageSet",
      "io.jafka.log.ILog",
      "io.jafka.common.MessageSizeTooLargeException",
      "io.jafka.message.MessageAndOffset",
      "io.jafka.log.LogSegmentFilter",
      "io.jafka.common.ErrorMappingException",
      "io.jafka.log.Log",
      "io.jafka.message.InvalidMessageException",
      "io.jafka.utils.Scheduler",
      "io.jafka.utils.IteratorTemplate$State",
      "io.jafka.message.compress.GZIPCompression",
      "io.jafka.api.ICalculable",
      "io.jafka.network.BoundedByteBufferReceive",
      "io.jafka.api.CreaterRequest",
      "io.jafka.common.ErrorMapping",
      "io.jafka.network.BlockingChannel",
      "io.jafka.api.RequestKeys",
      "io.jafka.message.CompressionUtils",
      "io.jafka.server.ServerConfig",
      "io.jafka.log.RollingStrategy",
      "io.jafka.log.LogSegment",
      "io.jafka.message.ByteBufferBackedInputStream",
      "io.jafka.common.InvalidMessageSizeException",
      "io.jafka.common.UnknownMagicByteException",
      "io.jafka.api.ProducerRequest",
      "io.jafka.api.MultiFetchRequest",
      "io.jafka.consumer.SimpleOperation",
      "io.jafka.log.SegmentList",
      "io.jafka.utils.Range",
      "io.jafka.message.ByteBufferMessageSet",
      "io.jafka.network.Transmission",
      "io.jafka.common.InvalidPartitionException",
      "io.jafka.utils.IteratorTemplate$1",
      "io.jafka.message.compress.CompressionFacade",
      "io.jafka.utils.Pool",
      "io.jafka.api.PartitionChooser",
      "io.jafka.utils.Scheduler$1",
      "io.jafka.server.Authentication$PlainAuth",
      "io.jafka.log.LogManager",
      "io.jafka.utils.IteratorTemplate",
      "io.jafka.network.InvalidRequestException",
      "io.jafka.message.Message",
      "io.jafka.server.Authentication$Crc32Auth",
      "io.jafka.api.FetchRequest",
      "io.jafka.utils.KV",
      "io.jafka.server.Authentication$Md5Auth",
      "io.jafka.network.Receive",
      "io.jafka.network.AbstractTransmission",
      "io.jafka.network.Request",
      "io.jafka.common.OffsetOutOfRangeException",
      "io.jafka.utils.Closer",
      "io.jafka.message.ByteBufferMessageSet$Iter",
      "io.jafka.api.OffsetRequest",
      "io.jafka.mx.IMBeanName",
      "io.jafka.api.MultiProducerRequest",
      "io.jafka.message.compress.CompressionFactory",
      "io.jafka.utils.ZKConfig",
      "io.jafka.utils.Utils",
      "io.jafka.message.compress.CompressionFactory$1",
      "io.jafka.message.FileMessageSet",
      "io.jafka.server.Authentication",
      "io.jafka.api.DeleterRequest",
      "io.jafka.admin.AdminOperation",
      "io.jafka.common.UnKnownCodecException",
      "io.jafka.message.CompressionCodec"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AdminOperation_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.jafka.consumer.SimpleOperation",
      "io.jafka.admin.AdminOperation",
      "io.jafka.network.BlockingChannel",
      "io.jafka.api.FetchRequest",
      "io.jafka.api.DeleterRequest",
      "io.jafka.api.CreaterRequest",
      "io.jafka.network.AbstractTransmission",
      "io.jafka.network.BoundedByteBufferReceive",
      "io.jafka.utils.Utils",
      "io.jafka.api.OffsetRequest",
      "io.jafka.api.MultiFetchRequest",
      "io.jafka.message.Message",
      "io.jafka.api.MultiProducerRequest",
      "io.jafka.utils.IteratorTemplate",
      "io.jafka.message.ByteBufferMessageSet$Iter",
      "io.jafka.utils.IteratorTemplate$State",
      "io.jafka.utils.IteratorTemplate$1",
      "io.jafka.message.MessageSet",
      "io.jafka.message.ByteBufferMessageSet",
      "io.jafka.api.ProducerRequest",
      "io.jafka.message.CompressionUtils",
      "io.jafka.message.compress.CompressionFactory",
      "io.jafka.message.compress.CompressionFactory$1",
      "io.jafka.message.compress.CompressionFacade",
      "io.jafka.message.compress.GZIPCompression",
      "io.jafka.utils.Closer",
      "io.jafka.utils.ZKConfig",
      "io.jafka.server.ServerConfig",
      "io.jafka.message.MessageAndOffset",
      "io.jafka.common.UnKnownCodecException",
      "io.jafka.common.InvalidMessageSizeException",
      "io.jafka.utils.Scheduler",
      "io.jafka.utils.Scheduler$1",
      "io.jafka.log.LogManager",
      "io.jafka.utils.Pool",
      "io.jafka.server.Authentication",
      "io.jafka.server.Authentication$PlainAuth"
    );
  }
}
