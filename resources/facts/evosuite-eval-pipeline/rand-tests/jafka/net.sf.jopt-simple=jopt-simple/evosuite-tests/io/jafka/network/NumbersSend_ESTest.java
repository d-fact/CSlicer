/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:33:57 GMT 2019
 */

package io.jafka.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.jafka.network.NumbersSend;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumbersSend_ESTest extends NumbersSend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[4];
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      numbersSend_LongsSend0.header = byteBuffer0;
      numbersSend_LongsSend0.contentBuffer = byteBuffer0;
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      int int0 = numbersSend_LongsSend0.writeTo(datagramChannel0);
      assertTrue(numbersSend_LongsSend0.complete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[6];
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        numbersSend_LongsSend0.writeTo(socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[6];
      NumbersSend.IntegersSend numbersSend_IntegersSend0 = new NumbersSend.IntegersSend(intArray0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[3];
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      openOptionArray0[2] = (OpenOption) standardOpenOption1;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      // Undeclared exception!
      try { 
        numbersSend_IntegersSend0.writeTo(fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9-'=k");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      long[] longArray0 = new long[9];
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      try { 
        numbersSend_LongsSend0.writeTo(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[4];
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">[!", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      numbersSend_LongsSend0.writeTo(fileChannel0);
      // Undeclared exception!
      try { 
        numbersSend_LongsSend0.writeTo(fileChannel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This operation cannot be completed on a complete request.
         //
         verifyException("io.jafka.network.AbstractTransmission", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[21];
      FileSystemHandling.shouldAllThrowIOExceptions();
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9-'=k");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      try { 
        numbersSend_LongsSend0.writeTo(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[6];
      NumbersSend.LongsSend numbersSend_LongsSend0 = new NumbersSend.LongsSend(longArray0);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      numbersSend_LongsSend0.header = byteBuffer0;
      // Undeclared exception!
      try { 
        numbersSend_LongsSend0.writeTo((GatheringByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.jafka.network.NumbersSend", e);
      }
  }
}
