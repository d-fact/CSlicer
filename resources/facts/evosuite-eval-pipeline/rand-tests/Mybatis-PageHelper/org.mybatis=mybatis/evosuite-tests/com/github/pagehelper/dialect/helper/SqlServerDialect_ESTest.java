/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 15:00:59 GMT 2019
 */

package com.github.pagehelper.dialect.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.SqlServerDialect;
import com.github.pagehelper.dialect.replace.RegexWithNolockReplaceSql;
import com.github.pagehelper.dialect.replace.SimpleWithNolockReplaceSql;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlServerDialect_ESTest extends SqlServerDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCDataSource jDBCDataSource0 = new JDBCDataSource();
      Environment environment0 = new Environment("(r7<{n*<ob", transactionFactory0, jDBCDataSource0);
      Configuration configuration0 = new Configuration(environment0);
      int[] intArray0 = new int[19];
      Page<ParameterMapping> page0 = new Page<ParameterMapping>(intArray0, true);
      BoundSql boundSql0 = new BoundSql(configuration0, "(r7<{n*<ob", page0, "(r7<{n*<ob");
      Object object0 = new Object();
      RowBounds rowBounds0 = new RowBounds(0, 2314);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, object0, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Page<SimpleWithNolockReplaceSql> page0 = new Page<SimpleWithNolockReplaceSql>();
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql("JDK_LOGGING", (Page) page0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Page<RegexWithNolockReplaceSql> page0 = new Page<RegexWithNolockReplaceSql>(1143, 1143);
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql((String) null, page0, (CacheKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Properties properties0 = new Properties();
      sqlServerDialect0.setProperties(properties0);
      Page<SimpleWithNolockReplaceSql> page0 = new Page<SimpleWithNolockReplaceSql>();
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql((String) null, page0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Properties properties0 = new Properties();
      sqlServerDialect0.setProperties(properties0);
      Page<Object> page0 = new Page<Object>(121, 121, true);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql("m", page0, cacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u652F\u6301\u8BE5SQL\u8F6C\u6362\u4E3A\u5206\u9875\u67E5\u8BE2!
         //
         verifyException("com.github.pagehelper.parser.SqlServerParser", e);
      }
  }
}
