/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:53:12 GMT 2019
 */

package com.github.pagehelper.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.cache.SimpleCache;
import java.util.Properties;
import org.apache.ibatis.cache.decorators.FifoCache;
import org.apache.ibatis.cache.impl.PerpetualCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCache_ESTest extends SimpleCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      SimpleCache<Object, FifoCache> simpleCache0 = new SimpleCache<Object, FifoCache>(properties0, (String) null);
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      FifoCache fifoCache0 = new FifoCache(perpetualCache0);
      // Undeclared exception!
      try { 
        simpleCache0.put(perpetualCache0, fifoCache0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.apache.ibatis.cache.impl.PerpetualCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      SimpleCache<Object, FifoCache> simpleCache0 = new SimpleCache<Object, FifoCache>(properties0, (String) null);
      // Undeclared exception!
      try { 
        simpleCache0.get(perpetualCache0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.apache.ibatis.cache.impl.PerpetualCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleCache<Integer, Integer> simpleCache0 = null;
      try {
        simpleCache0 = new SimpleCache<Integer, Integer>((Properties) null, "7d;X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.cache.SimpleCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      PerpetualCache perpetualCache0 = new PerpetualCache(":m");
      properties0.put(object0, perpetualCache0);
      SimpleCache<PerpetualCache, FifoCache> simpleCache0 = null;
      try {
        simpleCache0 = new SimpleCache<PerpetualCache, FifoCache>(properties0, "G6");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.ibatis.mapping.CacheBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Properties properties0 = new Properties();
      PerpetualCache perpetualCache0 = new PerpetualCache("h_g%D");
      FifoCache fifoCache0 = new FifoCache(perpetualCache0);
      SimpleCache<FifoCache, Object> simpleCache0 = new SimpleCache<FifoCache, Object>(properties0, "2sf-i?FI7zJ,fi){U");
      Object object0 = simpleCache0.get(fifoCache0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Properties properties0 = new Properties();
      SimpleCache<FifoCache, PerpetualCache> simpleCache0 = new SimpleCache<FifoCache, PerpetualCache>(properties0, "");
      PerpetualCache perpetualCache0 = new PerpetualCache("h_g%D");
      FifoCache fifoCache0 = new FifoCache(perpetualCache0);
      simpleCache0.put(fifoCache0, perpetualCache0);
      PerpetualCache perpetualCache1 = simpleCache0.get(fifoCache0);
      assertEquals(0, perpetualCache1.getSize());
  }
}
