/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:59:04 GMT 2019
 */

package com.github.pagehelper.dialect.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.OracleDialect;
import java.sql.JDBCType;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Delayed;
import org.apache.ibatis.builder.MapperBuilderAssistant;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.executor.keygen.KeyGenerator;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.ResultSetType;
import org.apache.ibatis.mapping.SqlCommandType;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.mapping.StatementType;
import org.apache.ibatis.scripting.LanguageDriver;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OracleDialect_ESTest extends OracleDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Delayed> page0 = new Page<Delayed>((-2750), (-2750));
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCDataSource jDBCDataSource0 = new JDBCDataSource();
      Environment environment0 = new Environment("TRIGGER_COLUMN_USAGE", transactionFactory0, jDBCDataSource0);
      Configuration configuration0 = new Configuration(environment0);
      Page<ParameterMapping> page1 = new Page<ParameterMapping>();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      Object object0 = oracleDialect0.afterPage(page0, hashMap0, rowBounds0);
      BoundSql boundSql0 = new BoundSql(configuration0, "TRIGGER_COLUMN_USAGE", page1, object0);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        oracleDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      Object[] objectArray0 = new Object[0];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      String string0 = oracleDialect0.getPageSql("#kRKx]\"4k1", (Page) null, cacheKey0);
      assertEquals("SELECT * FROM (  SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( #kRKx]\"4k1 ) TMP_PAGE) WHERE ROW_ID <= ? AND ROW_ID > ?", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      Configuration configuration0 = new Configuration((Environment) null);
      MapperBuilderAssistant mapperBuilderAssistant0 = new MapperBuilderAssistant(configuration0, "");
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      StatementType statementType0 = StatementType.PREPARED;
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      JDBCType jDBCType0 = JDBCType.DECIMAL;
      Integer integer0 = jDBCType0.getVendorTypeNumber();
      Class<String> class0 = String.class;
      ResultSetType resultSetType0 = ResultSetType.SCROLL_INSENSITIVE;
      MappedStatement mappedStatement0 = mapperBuilderAssistant0.addMappedStatement("Ct", sqlSource0, statementType0, sqlCommandType0, integer0, (Integer) null, (String) null, class0, (String) null, class0, resultSetType0, false, false, true, (KeyGenerator) null, "-help", (String) null, "tnz", (LanguageDriver) null, (String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Object> page0 = new Page<Object>(0, 0, true);
      BoundSql boundSql0 = new BoundSql(configuration0, "tnz", (List<ParameterMapping>) null, hashMap0);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        oracleDialect0.processPageParameter(mappedStatement0, hashMap0, page0, boundSql0, nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OracleDialect oracleDialect0 = new OracleDialect();
      Page<String> page0 = new Page<String>();
      // Undeclared exception!
      try { 
        oracleDialect0.getPageSql((String) null, page0, (CacheKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.OracleDialect", e);
      }
  }
}
