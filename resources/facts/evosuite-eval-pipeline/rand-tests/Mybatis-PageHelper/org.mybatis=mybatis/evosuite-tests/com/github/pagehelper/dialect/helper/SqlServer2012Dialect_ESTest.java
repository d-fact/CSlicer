/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 15:02:12 GMT 2019
 */

package com.github.pagehelper.dialect.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.SqlServer2012Dialect;
import java.util.HashMap;
import java.util.LinkedList;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlServer2012Dialect_ESTest extends SqlServer2012Dialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Page<String> page0 = new Page<String>();
      Object[] objectArray0 = new Object[6];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      String string0 = sqlServer2012Dialect0.getPageSql("", page0, cacheKey0);
      assertEquals(" OFFSET ? ROWS FETCH NEXT ? ROWS ONLY ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<String> page0 = new Page<String>(2798, 2798);
      Configuration configuration0 = new Configuration();
      LinkedList<ParameterMapping> linkedList0 = new LinkedList<ParameterMapping>();
      BoundSql boundSql0 = new BoundSql(configuration0, "", linkedList0, (Object) null);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Page<String> page0 = new Page<String>((-2755), (-563));
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.getPageSql((String) null, (Page) page0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServer2012Dialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Object> page0 = new Page<Object>();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page1 = new Page<ParameterMapping>(5548, 5548, false);
      BoundSql boundSql0 = new BoundSql(configuration0, "Second_PageHelper", page1, configuration0);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Page<String> page0 = new Page<String>();
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.getPageSql("*|b-.Eg\"1GB.ol", (Page) page0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }
}
