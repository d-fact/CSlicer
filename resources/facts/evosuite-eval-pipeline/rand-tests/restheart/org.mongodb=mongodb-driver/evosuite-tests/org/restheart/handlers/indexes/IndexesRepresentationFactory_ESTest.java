/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 15:11:40 GMT 2019
 */

package org.restheart.handlers.indexes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.protocols.http2.Http2Channel;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import io.undertow.util.HttpString;
import java.util.List;
import java.util.Stack;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.codecs.Codec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.hal.Representation;
import org.restheart.handlers.RequestContext;
import org.restheart.handlers.indexes.IndexesRepresentationFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexesRepresentationFactory_ESTest extends IndexesRepresentationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, 1L);
      HttpString httpString0 = Http2Channel.METHOD;
      httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      Stack<BsonDocument> stack0 = new Stack<BsonDocument>();
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NULL;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(requestContext_DOC_ID_TYPE0, codecRegistry0);
      stack0.add(bsonDocument0);
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange0, requestContext0, stack0, 1933L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, 1L);
      HttpString httpString0 = Http2Channel.METHOD;
      httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      Stack<BsonDocument> stack0 = new Stack<BsonDocument>();
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NULL;
      StringCodec stringCodec0 = new StringCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(requestContext_DOC_ID_TYPE0, codecRegistry0);
      stack0.add(bsonDocument0);
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange0, requestContext0, stack0, 1933L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.restheart.handlers.RequestContext$DOC_ID_TYPE cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, 1L);
      HttpString httpString0 = HttpString.tryFromString("org.bson.AbstractBsonReader$Mark");
      HttpServerExchange httpServerExchange1 = httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      Stack<BsonDocument> stack0 = new Stack<BsonDocument>();
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange1, requestContext0, stack0, 3162277660168379331L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, (-17L));
      httpServerExchange0.setRequestPath("org.bson.AbstractBsonReader$Mark");
      HttpString httpString0 = HttpString.tryFromString("org.bson.AbstractBsonReader$Mark");
      HttpServerExchange httpServerExchange1 = httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      Representation representation0 = IndexesRepresentationFactory.getRepresentation(httpServerExchange1, requestContext0, (List<BsonDocument>) null, 953);
      assertNotNull(representation0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, (-17L));
      HttpString httpString0 = HttpString.tryFromString("org.bson.AbstractBsonReader$Mark");
      HttpServerExchange httpServerExchange1 = httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      Stack<BsonDocument> stack0 = new Stack<BsonDocument>();
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange1, requestContext0, stack0, (-17L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.RequestContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, (-17L));
      HttpString httpString0 = HttpString.tryFromString("org.bson.AbstractBsonReader$Mark");
      HttpServerExchange httpServerExchange1 = httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "org.bson.AbstractBsonReader$Mark");
      httpServerExchange0.setQueryString("np");
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange1, requestContext0, (List<BsonDocument>) null, 953);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.RequestContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, 1L);
      HttpString httpString0 = Http2Channel.METHOD;
      httpServerExchange0.setRequestMethod(httpString0);
      RequestContext requestContext0 = new RequestContext(httpServerExchange0, "", "");
      Stack<BsonDocument> stack0 = new Stack<BsonDocument>();
      BsonDocument bsonDocument0 = new BsonDocument();
      stack0.add(bsonDocument0);
      // Undeclared exception!
      try { 
        IndexesRepresentationFactory.getRepresentation(httpServerExchange0, requestContext0, stack0, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.RequestContext", e);
      }
  }
}
