/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 15:09:16 GMT 2019
 */

package org.restheart.metadata.hooks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.bson.BsonBinary;
import org.bson.BsonBoolean;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonBooleanCodec;
import org.bson.codecs.BsonInt64Codec;
import org.bson.codecs.BsonMaxKeyCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.metadata.hooks.HookMetadata;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HookMetadata_ESTest extends HookMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document();
      Class<String> class0 = String.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BsonBoolean bsonBoolean0 = BsonBoolean.TRUE;
      BsonBooleanCodec bsonBooleanCodec0 = new BsonBooleanCodec();
      BsonDocumentWrapper<BsonBoolean> bsonDocumentWrapper0 = new BsonDocumentWrapper<BsonBoolean>(bsonBoolean0, bsonBooleanCodec0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(bsonDocumentWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocumentWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte)8;
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(rawBsonDocument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document();
      Class<String> class0 = String.class;
      BsonMaxKeyCodec bsonMaxKeyCodec0 = new BsonMaxKeyCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonMaxKeyCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to org.bson.BsonMaxKey
         //
         verifyException("org.bson.codecs.BsonMaxKeyCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document();
      Class<BsonBinary> class0 = BsonBinary.class;
      BsonInt64Codec bsonInt64Codec0 = new BsonInt64Codec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonInt64Codec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to org.bson.BsonInt64
         //
         verifyException("org.bson.codecs.BsonInt64Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BsonValue bsonValue0 = HookMetadata.getProps((BsonDocument) null);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      BsonValue bsonValue0 = HookMetadata.getProps(bsonDocument0);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        HookMetadata.getFromJson((BsonDocument) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing 'hooks' element. it must be a json array
         //
         verifyException("org.restheart.metadata.hooks.HookMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BsonBoolean bsonBoolean0 = BsonBoolean.FALSE;
      BsonBooleanCodec bsonBooleanCodec0 = new BsonBooleanCodec();
      BsonDocumentWrapper<BsonBoolean> bsonDocumentWrapper0 = new BsonDocumentWrapper<BsonBoolean>(bsonBoolean0, bsonBooleanCodec0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(bsonDocumentWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocumentWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HookMetadata hookMetadata0 = null;
      try {
        hookMetadata0 = new HookMetadata("|C", (BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.hooks.HookMetadata", e);
      }
  }
}
