/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Nov 12 14:47:57 GMT 2019
 */

package org.vafer.jdeb.producers;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class AbstractDataProducer_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.vafer.jdeb.producers.AbstractDataProducer"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/rand-tests/jdeb/org.bouncycastle=bcpg-jdk15on"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractDataProducer_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.commons.io.LineIterator",
      "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature",
      "org.vafer.jdeb.utils.Utils",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.vafer.jdeb.producers.DataProducerLink",
      "org.vafer.jdeb.mapping.LsMapper",
      "org.apache.commons.compress.archivers.sevenz.Folder",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream",
      "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField",
      "org.vafer.jdeb.producers.Producers",
      "org.tukaani.xz.MemoryLimitException",
      "org.tukaani.xz.LZMA2Options",
      "org.vafer.jdeb.producers.DataProducerArchive$EntryConverter",
      "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream",
      "org.apache.commons.compress.utils.ByteUtils$ByteConsumer",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.utils.ByteUtils$ByteSupplier",
      "org.apache.commons.compress.archivers.sevenz.Archive",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException",
      "org.tukaani.xz.SingleXZInputStream",
      "org.apache.commons.compress.utils.BitInputStream",
      "org.tukaani.xz.XZInputStream",
      "org.apache.commons.compress.archivers.arj.ArjArchiveEntry",
      "org.apache.commons.compress.archivers.StreamingNotSupportedException",
      "org.apache.commons.compress.archivers.cpio.CpioConstants",
      "org.apache.commons.compress.archivers.zip.CharsetAccessor",
      "org.apache.commons.io.output.ByteArrayOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.compressors.lz77support.Parameters",
      "org.apache.commons.compress.archivers.zip.ZipExtraField",
      "org.apache.commons.compress.archivers.zip.Zip64Mode",
      "org.apache.commons.io.IOUtils",
      "org.vafer.jdeb.utils.VariableResolver",
      "org.apache.commons.compress.archivers.zip.ZipShort",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock",
      "org.apache.commons.compress.archivers.dump.DumpArchiveSummary",
      "org.tukaani.xz.rangecoder.RangeDecoderFromStream",
      "org.apache.commons.compress.archivers.tar.TarUtils",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream",
      "org.vafer.jdeb.DataProducer",
      "org.tukaani.xz.LZMAInputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry",
      "org.apache.commons.compress.archivers.dump.UnrecognizedFormatException",
      "org.apache.commons.compress.archivers.zip.GeneralPurposeBit",
      "org.apache.commons.compress.compressors.FileNameUtil",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.tukaani.xz.rangecoder.RangeEncoder",
      "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream",
      "org.apache.commons.compress.archivers.tar.TarConstants",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream",
      "org.tukaani.xz.rangecoder.RangeEncoderToBuffer",
      "org.tukaani.xz.FilterCoder",
      "org.apache.commons.compress.archivers.dump.InvalidFormatException",
      "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "org.apache.commons.compress.utils.CRC32VerifyingInputStream",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream",
      "org.apache.commons.io.output.StringBuilderWriter",
      "org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream",
      "org.apache.commons.compress.archivers.arj.LocalFileHeader",
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream",
      "org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream",
      "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData",
      "org.apache.commons.compress.archivers.tar.TarUtils$1",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference",
      "org.apache.commons.compress.compressors.xz.XZCompressorOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.vafer.jdeb.producers.AbstractDataProducer",
      "org.tukaani.xz.LZMA2OutputStream",
      "org.apache.commons.compress.compressors.CompressorOutputStream",
      "org.tukaani.xz.rangecoder.RangeDecoderFromBuffer",
      "org.tukaani.xz.LZMA2InputStream",
      "org.tukaani.xz.CorruptedInputException",
      "org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream",
      "org.vafer.jdeb.mapping.NullMapper",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data",
      "org.tukaani.xz.rangecoder.RangeDecoder",
      "org.apache.commons.compress.archivers.zip.ZipArchiveEntry",
      "org.vafer.jdeb.producers.DataProducerArchive",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.tukaani.xz.rangecoder.RangeCoder",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback",
      "org.vafer.jdeb.mapping.PermMapper",
      "org.vafer.jdeb.producers.DataProducerFile",
      "org.apache.commons.compress.archivers.zip.UnshrinkingInputStream",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream",
      "org.vafer.jdeb.producers.DataProducerDirectory",
      "org.tukaani.xz.FilterOptions",
      "org.vafer.jdeb.mapping.Mapper",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipEightByteInteger",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream$1",
      "org.apache.commons.compress.MemoryLimitException",
      "org.apache.commons.compress.archivers.arj.MainHeader",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveException",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream",
      "org.apache.commons.compress.utils.ChecksumVerifyingInputStream",
      "org.apache.commons.compress.archivers.sevenz.StartHeader",
      "org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.tukaani.xz.XZFormatException",
      "org.apache.commons.compress.compressors.z.ZCompressorInputStream",
      "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipEncoding",
      "org.tukaani.xz.XZIOException",
      "org.apache.commons.compress.archivers.dump.DumpArchiveEntry",
      "org.apache.commons.compress.archivers.sevenz.Coder",
      "org.vafer.jdeb.mapping.LsMapper$ParseError",
      "org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream",
      "org.tukaani.xz.UnsupportedOptionsException",
      "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveException",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2Constants",
      "org.apache.commons.compress.utils.Charsets",
      "org.tukaani.xz.XZ",
      "org.apache.commons.compress.utils.CloseShieldFilterInputStream",
      "org.apache.commons.compress.compressors.lz77support.Parameters$Builder",
      "org.apache.commons.compress.archivers.zip.Zip64RequiredException",
      "org.apache.commons.compress.archivers.zip.ExplodingInputStream",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveEntry",
      "org.apache.commons.compress.compressors.pack200.StreamBridge",
      "org.apache.commons.compress.compressors.gzip.GzipParameters",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream",
      "org.tukaani.xz.FilterEncoder",
      "org.apache.commons.compress.compressors.lz4.XXHash32",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream",
      "org.apache.commons.compress.compressors.xz.XZUtils",
      "org.vafer.jdeb.DataConsumer",
      "org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block",
      "org.apache.commons.compress.utils.ByteUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.compressors.CompressorStreamProvider",
      "org.tukaani.xz.UncompressedLZMA2OutputStream",
      "org.apache.commons.compress.compressors.CompressorException",
      "org.apache.commons.io.input.ClosedInputStream",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy",
      "org.vafer.jdeb.producers.DataProducerFiles",
      "org.apache.commons.compress.utils.BoundedInputStream",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream",
      "org.apache.commons.compress.utils.ChecksumCalculatingInputStream",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream",
      "org.tukaani.xz.IndexIndicatorException",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.utils.CountingOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.archivers.ArchiveStreamProvider",
      "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE",
      "org.apache.commons.compress.archivers.jar.JarArchiveEntry",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData",
      "org.apache.commons.compress.archivers.ar.ArArchiveEntry",
      "org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE",
      "org.vafer.jdeb.producers.DataProducerPathTemplate",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.tukaani.xz.FinishableOutputStream",
      "org.apache.commons.compress.archivers.EntryStreamOffsets"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.vafer.jdeb.DataConsumer", false, AbstractDataProducer_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractDataProducer_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.vafer.jdeb.producers.AbstractDataProducer",
      "org.vafer.jdeb.mapping.NullMapper",
      "org.vafer.jdeb.mapping.LsMapper",
      "org.vafer.jdeb.mapping.LsMapper$ParseError",
      "org.vafer.jdeb.mapping.PermMapper",
      "org.vafer.jdeb.producers.DataProducerFile",
      "org.vafer.jdeb.producers.DataProducerDirectory",
      "org.vafer.jdeb.producers.DataProducerFiles",
      "org.vafer.jdeb.producers.Producers",
      "org.apache.commons.compress.archivers.tar.TarArchiveEntry",
      "org.vafer.jdeb.producers.DataProducerPathTemplate",
      "org.vafer.jdeb.producers.DataProducerArchive",
      "org.vafer.jdeb.utils.Utils",
      "org.apache.commons.compress.utils.Charsets",
      "org.apache.commons.compress.archivers.zip.NioZipEncoding",
      "org.apache.commons.compress.archivers.zip.ZipEncodingHelper",
      "org.apache.commons.compress.archivers.tar.TarUtils$1",
      "org.apache.commons.compress.archivers.tar.TarUtils",
      "org.apache.commons.io.output.StringBuilderWriter",
      "org.apache.commons.io.IOUtils",
      "org.vafer.jdeb.producers.DataProducerLink",
      "org.apache.commons.compress.compressors.CompressorStreamFactory",
      "org.apache.commons.compress.utils.IOUtils",
      "org.apache.commons.compress.compressors.CompressorInputStream",
      "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream",
      "org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream",
      "org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream",
      "org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream",
      "org.apache.commons.compress.compressors.lzw.LZWInputStream",
      "org.apache.commons.compress.compressors.z.ZCompressorInputStream",
      "org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream",
      "org.apache.commons.compress.compressors.FileNameUtil",
      "org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.xz.XZCompressorInputStream",
      "org.tukaani.xz.XZ",
      "org.apache.commons.compress.compressors.xz.XZUtils",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability",
      "org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream",
      "org.apache.commons.compress.compressors.lzma.LZMAUtils",
      "org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream",
      "org.apache.commons.compress.compressors.CompressorException",
      "org.apache.commons.compress.archivers.ArchiveStreamFactory",
      "org.apache.commons.compress.archivers.ArchiveInputStream",
      "org.apache.commons.compress.archivers.zip.ZipLong",
      "org.apache.commons.compress.utils.ByteUtils",
      "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveOutputStream",
      "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream",
      "org.apache.commons.compress.archivers.jar.JarArchiveInputStream",
      "org.apache.commons.compress.archivers.ar.ArArchiveInputStream",
      "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream",
      "org.apache.commons.compress.archivers.arj.ArjArchiveInputStream",
      "org.apache.commons.compress.archivers.sevenz.SevenZFile",
      "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
      "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
      "org.apache.commons.compress.archivers.ArchiveException"
    );
  }
}
