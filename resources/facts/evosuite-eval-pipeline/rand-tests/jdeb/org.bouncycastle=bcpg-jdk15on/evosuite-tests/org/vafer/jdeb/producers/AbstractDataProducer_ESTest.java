/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:47:57 GMT 2019
 */

package org.vafer.jdeb.producers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.vafer.jdeb.DataConsumer;
import org.vafer.jdeb.mapping.Mapper;
import org.vafer.jdeb.mapping.NullMapper;
import org.vafer.jdeb.mapping.PermMapper;
import org.vafer.jdeb.producers.DataProducerArchive;
import org.vafer.jdeb.producers.DataProducerFile;
import org.vafer.jdeb.producers.DataProducerFiles;
import org.vafer.jdeb.producers.DataProducerLink;
import org.vafer.jdeb.producers.DataProducerPathTemplate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDataProducer_ESTest extends AbstractDataProducer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("|YH}d5`e$7xeW%8x;C", "|YH}d5`e$7xeW%8x;C");
      String[] stringArray0 = new String[0];
      Mapper[] mapperArray0 = new Mapper[0];
      DataProducerFile dataProducerFile0 = new DataProducerFile(file0, "INSENSITIVE", stringArray0, stringArray0, mapperArray0);
      DataConsumer dataConsumer0 = mock(DataConsumer.class, new ViolatedAssumptionAnswer());
      dataProducerFile0.produceFile(dataConsumer0, file0, "SYSTEM");
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("|YH}d5`e$7xeW%8x;C", "|YH}d5`e$7xeW%8x;C");
      String[] stringArray0 = new String[0];
      Mapper[] mapperArray0 = new Mapper[0];
      DataProducerFile dataProducerFile0 = new DataProducerFile(file0, "INSENSITIVE", stringArray0, stringArray0, mapperArray0);
      DataConsumer dataConsumer0 = mock(DataConsumer.class, new ViolatedAssumptionAnswer());
      dataProducerFile0.produceDir(dataConsumer0, "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DataProducerLink dataProducerLink0 = new DataProducerLink(".hKs]Q* v6", ".hKs]Q* v6", false, stringArray0, stringArray0, (Mapper[]) null);
      TarArchiveEntry tarArchiveEntry0 = dataProducerLink0.map((TarArchiveEntry) null);
      assertNull(tarArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Mapper[] mapperArray0 = new Mapper[0];
      DataProducerLink dataProducerLink0 = new DataProducerLink("**", "+z,|>N+!VB,n~", false, stringArray0, stringArray0, mapperArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("+z,|>N+!VB,n~", (byte)48, false);
      tarArchiveEntry0.setSize(75L);
      TarArchiveEntry tarArchiveEntry1 = dataProducerLink0.map(tarArchiveEntry0);
      assertFalse(tarArchiveEntry1.isOldGNUSparse());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Mapper[] mapperArray0 = new Mapper[5];
      NullMapper nullMapper0 = (NullMapper)NullMapper.INSTANCE;
      mapperArray0[0] = (Mapper) nullMapper0;
      mapperArray0[1] = (Mapper) nullMapper0;
      PermMapper permMapper0 = new PermMapper(1989, 1649, "", "", 2142, 1989, 1649, "");
      mapperArray0[2] = (Mapper) permMapper0;
      PermMapper permMapper1 = new PermMapper(1778, 1989, "NC6-i>)", "{oV<]vT$CpP]IwRjZS", 0, 0, 0, "");
      mapperArray0[3] = (Mapper) permMapper1;
      mapperArray0[4] = (Mapper) nullMapper0;
      DataProducerFiles dataProducerFiles0 = new DataProducerFiles(stringArray0, "expected file line but got \"", mapperArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)5, true);
      dataProducerFiles0.map(tarArchiveEntry0);
      assertEquals(1989L, tarArchiveEntry0.getLongGroupId());
      assertEquals(1778L, tarArchiveEntry0.getLongUserId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D!I(nr.W-i;d");
      String[] stringArray0 = new String[3];
      Mapper[] mapperArray0 = new Mapper[0];
      DataProducerFile dataProducerFile0 = new DataProducerFile(mockFile0, "D!I(nr.W-i;d", stringArray0, stringArray0, mapperArray0);
      // Undeclared exception!
      try { 
        dataProducerFile0.isIncluded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Mapper[] mapperArray0 = new Mapper[2];
      DataProducerFiles dataProducerFiles0 = new DataProducerFiles(stringArray0, "uname", mapperArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("H.+^2)^KAgi>c", (byte) (-125));
      // Undeclared exception!
      try { 
        dataProducerFiles0.map(tarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.producers.AbstractDataProducer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DataProducerPathTemplate dataProducerPathTemplate0 = new DataProducerPathTemplate(stringArray0, stringArray0, stringArray0, (Mapper[]) null);
      DataConsumer dataConsumer0 = mock(DataConsumer.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("linkpath");
      try { 
        dataProducerPathTemplate0.produceFile(dataConsumer0, mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "linkpath";
      stringArray0[1] = "<=";
      DataProducerPathTemplate dataProducerPathTemplate0 = new DataProducerPathTemplate(stringArray0, stringArray0, stringArray0, (Mapper[]) null);
      boolean boolean0 = dataProducerPathTemplate0.isIncluded("<=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Mapper[] mapperArray0 = new Mapper[2];
      DataProducerFiles dataProducerFiles0 = new DataProducerFiles(stringArray0, "uname", mapperArray0);
      boolean boolean0 = dataProducerFiles0.isIncluded("auL2XfF6g#]k@h-<M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "linkpath";
      stringArray0[1] = "<=";
      stringArray0[2] = "nz)RP~kKEhR";
      stringArray0[3] = "Qv7X";
      stringArray0[4] = "The size must be non-negative";
      stringArray0[5] = "";
      DataProducerPathTemplate dataProducerPathTemplate0 = new DataProducerPathTemplate(stringArray0, stringArray0, stringArray0, (Mapper[]) null);
      boolean boolean0 = dataProducerPathTemplate0.isIncluded("w Q_Hh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Mapper[] mapperArray0 = new Mapper[1];
      DataProducerLink dataProducerLink0 = new DataProducerLink("1![;}w:", "a[", false, stringArray0, stringArray0, mapperArray0);
      DataConsumer dataConsumer0 = mock(DataConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dataProducerLink0.produceDir(dataConsumer0, "J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.producers.AbstractDataProducer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("w)zh", "aAM!WJy;REm2");
      String[] stringArray0 = new String[6];
      Mapper[] mapperArray0 = new Mapper[1];
      DataProducerArchive dataProducerArchive0 = new DataProducerArchive(mockFile0, stringArray0, stringArray0, mapperArray0);
      DataConsumer dataConsumer0 = mock(DataConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dataProducerArchive0.produceFile(dataConsumer0, mockFile0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.producers.AbstractDataProducer", e);
      }
  }
}
