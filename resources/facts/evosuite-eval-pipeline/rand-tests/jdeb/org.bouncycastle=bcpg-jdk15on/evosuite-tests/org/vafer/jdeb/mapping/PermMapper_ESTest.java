/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:44:17 GMT 2019
 */

package org.vafer.jdeb.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.vafer.jdeb.mapping.PermMapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PermMapper_ESTest extends PermMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = PermMapper.toMode("00");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = PermMapper.toMode("3");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-20), (-20), "", (String) null, "", (String) null, (-20), (String) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)50);
      TarArchiveEntry tarArchiveEntry1 = permMapper0.map(tarArchiveEntry0);
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertEquals("", tarArchiveEntry1.getName());
      assertEquals(0, tarArchiveEntry1.getUserId());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(428, 428, "ustar ", "ustar ", 428, 428, 428, "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte)120);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("ustar ", tarArchiveEntry0.getGroupName());
      assertEquals("ustar ", tarArchiveEntry0.getUserName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-1836), (-1836), "org.vafer.jdeb.mapping.PermMapper", "org.vafer.jdeb.mapping.PermMapper", (-1836), (-1836), (-1836), "org.vafer.jdeb.mapping.PermMapper");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)49, false);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("org.vafer.jdeb.mapping.PermMapper", tarArchiveEntry0.getUserName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-2497), (-2497), (String) null, (String) null, 2391, 2391, (-2497), "VPl0dqjdk{~.bu,,Av");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("VPl0dqjdk{~.bu,,Av", (byte)103);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("VPl0dqjdk{~.bu,,Av/VPl0dqjdk{~.bu,,Av", tarArchiveEntry0.getName());
      assertEquals(2391, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(609, 1631, "", "", "", "", 609, "org.vafer.jdeb.mapping.PermMapper");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)83);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("org.vafer.jdeb.mapping.PermMapper/", tarArchiveEntry0.getName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(428, 428, "ustar ", "ustar ", 428, 428, 428, "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)76);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("ustar ", tarArchiveEntry0.getUserName());
      assertEquals(428, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(0, 0, "", (String) null, "", (String) null, 0, (String) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)75, false);
      TarArchiveEntry tarArchiveEntry1 = permMapper0.map(tarArchiveEntry0);
      assertEquals(33188, tarArchiveEntry1.getMode());
      assertEquals("", tarArchiveEntry1.getName());
      assertEquals(0L, tarArchiveEntry1.getLongUserId());
      assertEquals(0L, tarArchiveEntry1.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(1377, 131, "", "", 8, (-1), (-1302), "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("W;.+KM\"}lS&'", (byte)54);
      permMapper0.map(tarArchiveEntry0);
      assertEquals(8, tarArchiveEntry0.getMode());
      assertEquals(131, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-1191), (-1191), "SCHILY.filetype", "SCHILY.filetype", (String) null, "", 5, "Local");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Local", (byte)51, false);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("SCHILY.filetype", tarArchiveEntry0.getGroupName());
      assertEquals(0L, tarArchiveEntry0.getLongGroupId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-2497), (-2497), (String) null, (String) null, 2391, 2391, (-2497), "VPl0dqdk{~.bu,,Ae");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)52);
      permMapper0.map(tarArchiveEntry0);
      assertEquals(2391, tarArchiveEntry0.getMode());
      assertEquals("VPl0dqdk{~.bu,,Ae/", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(8, 8, "z|Fz", "", (-1), 8, (-1), "");
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.NotFileFilter");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveEntry0.setSize(8);
      permMapper0.map(tarArchiveEntry0);
      assertEquals(8, tarArchiveEntry0.getUserId());
      assertEquals("org.apache.commons.io.filefilter.NotFileFilter", tarArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-1), (-1), "y]|:0x`jj", "y]|:0x`jj", 0, 0, (-1), "y]|:0x`jj");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("y]|:0x`jj", (byte)0, true);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("y]|:0x`jj", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-711), (-711), "s]cxG", "s]cxG", "", "", 19, "s]cxG");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-44));
      tarArchiveEntry0.setMode((-1237));
      permMapper0.map(tarArchiveEntry0);
      assertEquals("s]cxG", tarArchiveEntry0.getUserName());
      assertEquals("s]cxG", tarArchiveEntry0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-3290), (-3290), "GNU.sparse.name", "GNU.sparse.name", (-3290), (-4032), (-3290), "GNU.sparse.name");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)5, false);
      tarArchiveEntry0.setIds((-1624), (byte)5);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("GNU.sparse.name", tarArchiveEntry0.getUserName());
      assertEquals(5, tarArchiveEntry0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-1), (-1), "~NzLO", "", "", "", (-1), "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setGroupId((long) (-1));
      permMapper0.map(tarArchiveEntry0);
      assertTrue(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(67, 67, "N?KY", (String) null, (String) null, "", 67, "N?KY");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)0, true);
      tarArchiveEntry0.setDevMinor(31);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("N?KY", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(8, 8, "iDVY&*[", "iDVY&*[", (-902), 47, 1897, "iDVY&*[");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("iDVY&*[", (byte) (-24));
      tarArchiveEntry0.setDevMajor(228);
      permMapper0.map(tarArchiveEntry0);
      assertEquals("iDVY&*[", tarArchiveEntry0.getGroupName());
      assertEquals(8, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper(3530753, 3530753, "Y", "Y", 3530753, 3530753, 0, "J~Lko<S'");
      // Undeclared exception!
      try { 
        permMapper0.map((TarArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.mapping.PermMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PermMapper permMapper0 = new PermMapper((-915), (-915), (String) null, (String) null, (-915), (-915), (-5264), (String) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        PermMapper.toMode("prK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"prK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = PermMapper.toMode("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = PermMapper.toMode((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PermMapper permMapper0 = null;
      try {
        permMapper0 = new PermMapper(0, 0, "V/m>,4S6J4>|u--lW", "[u3&", "V/m>,4S6J4>|u--lW", "Q>YUd[)bwV4pf/fn(", 0, "Q>YUd[)bwV4pf/fn(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"V/m>,4S6J4>|u--lW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
