/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:43:06 GMT 2019
 */

package org.vafer.jdeb.changes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.vafer.jdeb.changes.ChangeSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChangeSet_ESTest extends ChangeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      String[] stringArray0 = new String[1];
      ChangeSet changeSet0 = new ChangeSet("%`-CF!-JqhzU7Y':Ba9", (String) null, mockDate0, "\n", (String) null, "\n", stringArray0);
      String string0 = changeSet0.getVersion();
      assertEquals("%`-CF!-JqhzU7Y':Ba9", changeSet0.getPackage());
      assertNull(string0);
      assertEquals("\n", changeSet0.getChangedBy());
      assertEquals("\n", changeSet0.getDistribution());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4741L);
      String[] stringArray0 = new String[2];
      ChangeSet changeSet0 = new ChangeSet("", "", mockDate0, "ewce^/asf9c4BF2wr", "", "", stringArray0);
      String string0 = changeSet0.getVersion();
      assertEquals("", string0);
      assertEquals("ewce^/asf9c4BF2wr", changeSet0.getDistribution());
      assertEquals("", changeSet0.getPackage());
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("", changeSet0.getUrgency());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3771L);
      String[] stringArray0 = new String[0];
      ChangeSet changeSet0 = new ChangeSet("  * ", "  * ", mockDate0, "  * ", (String) null, "", stringArray0);
      String string0 = changeSet0.getUrgency();
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("  * ", changeSet0.getPackage());
      assertNull(string0);
      assertEquals("  * ", changeSet0.getVersion());
      assertEquals("  * ", changeSet0.getDistribution());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4741L);
      String[] stringArray0 = new String[2];
      ChangeSet changeSet0 = new ChangeSet("", "", mockDate0, "ewce^/asf9c4BF2wr", "", "", stringArray0);
      String string0 = changeSet0.getUrgency();
      assertEquals("", changeSet0.getVersion());
      assertEquals("ewce^/asf9c4BF2wr", changeSet0.getDistribution());
      assertEquals("", changeSet0.getPackage());
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      String[] stringArray0 = new String[3];
      ChangeSet changeSet0 = new ChangeSet((String) null, "5@6H", mockDate0, "+KX&7,", "WzrHyu]DX2h5,", "", stringArray0);
      String string0 = changeSet0.getPackage();
      assertEquals("+KX&7,", changeSet0.getDistribution());
      assertEquals("", changeSet0.getChangedBy());
      assertNull(string0);
      assertEquals("WzrHyu]DX2h5,", changeSet0.getUrgency());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ChangeSet changeSet0 = new ChangeSet("", "\n", (Date) null, "\n", "\n", "`:9ip ,yz'|JOt", stringArray0);
      String string0 = changeSet0.getPackage();
      assertEquals("`:9ip ,yz'|JOt", changeSet0.getChangedBy());
      assertEquals("\n", changeSet0.getUrgency());
      assertEquals("\n", changeSet0.getDistribution());
      assertEquals("\n", changeSet0.getVersion());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[4];
      ChangeSet changeSet0 = new ChangeSet((String) null, (String) null, mockDate0, (String) null, "\"B`/;kP3&_", (String) null, stringArray0);
      String string0 = changeSet0.getDistribution();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[6];
      ChangeSet changeSet0 = new ChangeSet(")N87Q~HedP8)LOQ*", "", mockDate0, "", ")N87Q~HedP8)LOQ*", "@wj4uC906x'c'", stringArray0);
      String string0 = changeSet0.getDistribution();
      assertEquals(")N87Q~HedP8)LOQ*", changeSet0.getUrgency());
      assertEquals("", string0);
      assertEquals("", changeSet0.getVersion());
      assertEquals(")N87Q~HedP8)LOQ*", changeSet0.getPackage());
      assertEquals("@wj4uC906x'c'", changeSet0.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ChangeSet changeSet0 = new ChangeSet("The offset cannot be negative", "The offset cannot be negative", (Date) null, "The offset cannot be negative", "c*N3;B8}b7jO9", "FE=u", stringArray0);
      changeSet0.getDate();
      assertEquals("c*N3;B8}b7jO9", changeSet0.getUrgency());
      assertEquals("FE=u", changeSet0.getChangedBy());
      assertEquals("The offset cannot be negative", changeSet0.getPackage());
      assertEquals("The offset cannot be negative", changeSet0.getVersion());
      assertEquals("The offset cannot be negative", changeSet0.getDistribution());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1286L);
      ChangeSet changeSet0 = new ChangeSet(".`NK0gll`|iCn2VG2$", ".`NK0gll`|iCn2VG2$", mockDate0, ".`NK0gll`|iCn2VG2$", "", "SYSTEM", (String[]) null);
      changeSet0.getChanges();
      assertEquals("", changeSet0.getUrgency());
      assertEquals("SYSTEM", changeSet0.getChangedBy());
      assertEquals(".`NK0gll`|iCn2VG2$", changeSet0.getDistribution());
      assertEquals(".`NK0gll`|iCn2VG2$", changeSet0.getVersion());
      assertEquals(".`NK0gll`|iCn2VG2$", changeSet0.getPackage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ChangeSet changeSet0 = new ChangeSet("", "\n", (Date) null, "\n", "\n", "`:9ip ,yz'|JOt", stringArray0);
      changeSet0.getChanges();
      assertEquals("\n", changeSet0.getVersion());
      assertEquals("`:9ip ,yz'|JOt", changeSet0.getChangedBy());
      assertEquals("\n", changeSet0.getDistribution());
      assertEquals("", changeSet0.getPackage());
      assertEquals("\n", changeSet0.getUrgency());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1879), (-1879), (-1879), (-1879), (-1879), (-1879));
      ChangeSet changeSet0 = new ChangeSet("", "org.apache.commons.io.filefilter.NotFileFilter", mockDate0, "org.apache.commons.io.filefilter.NotFileFilter", "l@}X~", (String) null, (String[]) null);
      String string0 = changeSet0.getChangedBy();
      assertEquals("l@}X~", changeSet0.getUrgency());
      assertEquals("org.apache.commons.io.filefilter.NotFileFilter", changeSet0.getDistribution());
      assertEquals("org.apache.commons.io.filefilter.NotFileFilter", changeSet0.getVersion());
      assertEquals("", changeSet0.getPackage());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1));
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", mockDate0, "\n", "org.apache.commons.io.filefilter.FalseFileFilter", "", stringArray0);
      String string0 = changeSet0.getChangedBy();
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getUrgency());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getPackage());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getVersion());
      assertEquals("", string0);
      assertEquals("\n", changeSet0.getDistribution());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      ChangeSet changeSet0 = new ChangeSet("]%f-", "]%f-", mockDate0, "I~=D-P%njl", "~2*DrI+5_c-g1<2;I", "]%f-", (String[]) null);
      // Undeclared exception!
      try { 
        changeSet0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.changes.ChangeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1));
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", mockDate0, "\n", "org.apache.commons.io.filefilter.FalseFileFilter", "", stringArray0);
      String string0 = changeSet0.getPackage();
      assertEquals("\n", changeSet0.getDistribution());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getVersion());
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", string0);
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getUrgency());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1));
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", mockDate0, "\n", "org.apache.commons.io.filefilter.FalseFileFilter", "", stringArray0);
      String string0 = changeSet0.getVersion();
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", string0);
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("\n", changeSet0.getDistribution());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getUrgency());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getPackage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      String[] stringArray0 = new String[3];
      ChangeSet changeSet0 = new ChangeSet((String) null, "5@6H", mockDate0, "+KX&7,", "WzrHyu]DX2h5,", "", stringArray0);
      String string0 = changeSet0.getUrgency();
      assertEquals("+KX&7,", changeSet0.getDistribution());
      assertEquals("WzrHyu]DX2h5,", string0);
      assertNotNull(string0);
      assertEquals("", changeSet0.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1));
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter", mockDate0, "\n", "org.apache.commons.io.filefilter.FalseFileFilter", "", stringArray0);
      String string0 = changeSet0.getDistribution();
      assertEquals("\n", string0);
      assertEquals("", changeSet0.getChangedBy());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getVersion());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getUrgency());
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", changeSet0.getPackage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("v]D2pf%c<", "v]D2pf%c<", mockDate0, "v]D2pf%c<", "v]D2pf%c<", "v]D2pf%c<", stringArray0);
      String string0 = changeSet0.toString();
      assertEquals("v]D2pf%c< (v]D2pf%c<) v]D2pf%c<; urgency=v]D2pf%c<\n\n  * null\n  * null\n  * null\n  * null\n  * null\n  * null\n  * null\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[7];
      ChangeSet changeSet0 = new ChangeSet("v]D2pf%c<", "v]D2pf%c<", mockDate0, "v]D2pf%c<", "v]D2pf%c<", "v]D2pf%c<", stringArray0);
      String string0 = changeSet0.getChangedBy();
      assertEquals("v]D2pf%c<", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[0];
      ChangeSet changeSet0 = new ChangeSet("r$$vjJU8^$", "r$$vjJU8^$", mockDate0, "r$$vjJU8^$", "r$$vjJU8^$", "r$$vjJU8^$", stringArray0);
      String[] stringArray1 = changeSet0.getChanges();
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[0];
      ChangeSet changeSet0 = new ChangeSet("r$$vjJU8^$", "r$$vjJU8^$", mockDate0, "r$$vjJU8^$", "r$$vjJU8^$", "r$$vjJU8^$", stringArray0);
      Date date0 = changeSet0.getDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[0];
      ChangeSet changeSet0 = new ChangeSet("r$$vjJU8^$", "r$$vjJU8^$", mockDate0, "r$$vjJU8^$", "r$$vjJU8^$", "r$$vjJU8^$", stringArray0);
      String string0 = changeSet0.toString();
      assertEquals("r$$vjJU8^$ (r$$vjJU8^$) r$$vjJU8^$; urgency=r$$vjJU8^$\n", string0);
  }
}
