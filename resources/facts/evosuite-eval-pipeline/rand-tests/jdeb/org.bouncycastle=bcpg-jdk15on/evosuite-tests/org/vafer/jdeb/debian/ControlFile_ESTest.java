/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:45:33 GMT 2019
 */

package org.vafer.jdeb.debian;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.text.ParseException;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.vafer.jdeb.debian.BinaryPackageControlFile;
import org.vafer.jdeb.debian.ChangesFile;
import org.vafer.jdeb.debian.ControlField;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControlFile_ESTest extends ControlFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      String string0 = binaryPackageControlFile0.getUserDefinedFieldName("_7-r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      ControlField[] controlFieldArray0 = new ControlField[5];
      ControlField.Type controlField_Type0 = ControlField.Type.MULTILINE;
      ControlField controlField0 = new ControlField("Format", false, controlField_Type0, true);
      controlFieldArray0[0] = controlField0;
      controlFieldArray0[1] = controlFieldArray0[0];
      controlFieldArray0[2] = controlField0;
      controlFieldArray0[3] = controlFieldArray0[1];
      controlFieldArray0[4] = controlFieldArray0[0];
      String string0 = changesFile0.toString(controlFieldArray0);
      assertEquals("Format:\n 1.8\nFormat:\n 1.8\nFormat:\n 1.8\nFormat:\n 1.8\nFormat:\n 1.8\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      String string0 = binaryPackageControlFile0.toString();
      assertEquals("Priority: optional\nArchitecture: all\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("SH:!+^OD");
      boolean boolean0 = binaryPackageControlFile0.isUserDefinedField("SH:!+^OD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("{X%");
      Map<String, String> map0 = binaryPackageControlFile0.getUserDefinedFields();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      Set<ControlField> set0 = binaryPackageControlFile0.getUserDefinedFieldNames();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("Line misses ':' delimiter");
      String string0 = binaryPackageControlFile0.getUserDefinedFieldName("Line misses ':' delimiter");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      try { 
        changesFile0.parse("qM1W2ks!i");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Line misses ':' delimiter
         //
         verifyException("org.vafer.jdeb.debian.ControlFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("");
      // Undeclared exception!
      try { 
        binaryPackageControlFile0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.debian.ControlFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("hK98m7E:|h b");
      // Undeclared exception!
      try { 
        binaryPackageControlFile0.parse((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1713), 10);
      // Undeclared exception!
      try { 
        binaryPackageControlFile0.parse((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile(bufferedInputStream0);
      try { 
        binaryPackageControlFile0.parse((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      // Undeclared exception!
      try { 
        changesFile0.isUserDefinedField((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      // Undeclared exception!
      try { 
        binaryPackageControlFile0.getUserDefinedFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.debian.ControlFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      ControlField[] controlFieldArray0 = new ControlField[3];
      ControlField controlField0 = new ControlField("EEE, d MMM yyyy HH:mm:ss Z");
      controlFieldArray0[0] = controlField0;
      controlFieldArray0[1] = controlFieldArray0[0];
      controlFieldArray0[2] = controlField0;
      String string0 = binaryPackageControlFile0.toString(controlFieldArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      ControlField[] controlFieldArray0 = new ControlField[3];
      // Undeclared exception!
      try { 
        binaryPackageControlFile0.toString(controlFieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.vafer.jdeb.debian.ControlFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      Set<String> set0 = binaryPackageControlFile0.invalidFields();
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      changesFile0.set("", "");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      changesFile0.set(",]we+Fh/", ",]we+Fh/");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChangesFile changesFile0 = new ChangesFile();
      changesFile0.set((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-17), (-3295));
      binaryPackageControlFile0.parse((InputStream) byteArrayInputStream0);
      assertEquals((-3295), byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      boolean boolean0 = binaryPackageControlFile0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      List<String> list0 = binaryPackageControlFile0.getMandatoryFields();
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        binaryPackageControlFile0.parse((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Line misses ':' delimiter
         //
         verifyException("org.vafer.jdeb.debian.ControlFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("SH:!+^OD");
      binaryPackageControlFile0.set("XChanged-By", "X");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("8l,9HOr!>A#P[ToVfxN");
      binaryPackageControlFile0.parse("#.UqmAabpuITp");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("9;zUj*d^so]N9");
      String string0 = binaryPackageControlFile0.get("9;zUj*d^so]N9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryPackageControlFile binaryPackageControlFile0 = new BinaryPackageControlFile("9;zUj*d^so]N9");
      String string0 = binaryPackageControlFile0.toString();
      assertEquals("", string0);
  }
}
