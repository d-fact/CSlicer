/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:03:45 GMT 2019
 */

package io.ebeaninternal.server.el;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.ServerConfig;
import io.ebeaninternal.server.deploy.BeanDescriptor;
import io.ebeaninternal.server.deploy.BeanDescriptorManager;
import io.ebeaninternal.server.deploy.BeanDescriptorMap;
import io.ebeaninternal.server.deploy.BeanFkeyProperty;
import io.ebeaninternal.server.deploy.BeanPropertyAssocOne;
import io.ebeaninternal.server.deploy.meta.DeployBeanDescriptor;
import io.ebeaninternal.server.deploy.meta.DeployBeanPropertyAssocOne;
import io.ebeaninternal.server.el.ElPropertyChain;
import io.ebeaninternal.server.el.ElPropertyChainBuilder;
import io.ebeaninternal.server.el.ElPropertyValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElPropertyChainBuilder_ESTest extends ElPropertyChainBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(true, "{LR[ZfR\"&T;");
      elPropertyChainBuilder0.setContainsMany();
      boolean boolean0 = elPropertyChainBuilder0.isContainsMany();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(true, (String) null);
      String string0 = elPropertyChainBuilder0.getExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "");
      String string0 = elPropertyChainBuilder0.getExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(true, "{LR[ZfR\"&T;");
      Class<String> class0 = String.class;
      ServerConfig serverConfig0 = new ServerConfig();
      DeployBeanDescriptor<String> deployBeanDescriptor0 = new DeployBeanDescriptor<String>((BeanDescriptorManager) null, class0, serverConfig0);
      Class<Object> class1 = Object.class;
      DeployBeanPropertyAssocOne<Object> deployBeanPropertyAssocOne0 = new DeployBeanPropertyAssocOne<Object>(deployBeanDescriptor0, class1);
      BeanPropertyAssocOne<Object> beanPropertyAssocOne0 = new BeanPropertyAssocOne<Object>((BeanDescriptorMap) null, (BeanDescriptor<?>) null, deployBeanPropertyAssocOne0);
      elPropertyChainBuilder0.add(beanPropertyAssocOne0);
      ElPropertyChain elPropertyChain0 = elPropertyChainBuilder0.build();
      assertEquals("{LR[ZfR\"&T;", elPropertyChain0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "C/Qda$~");
      BeanFkeyProperty beanFkeyProperty0 = new BeanFkeyProperty("C/Qda$~", "C/Qda$~", 90097);
      ElPropertyChainBuilder elPropertyChainBuilder1 = elPropertyChainBuilder0.add(beanFkeyProperty0);
      elPropertyChainBuilder1.setContainsMany();
      elPropertyChainBuilder0.build();
      assertTrue(elPropertyChainBuilder0.isContainsMany());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(true, "n61KjU;");
      BeanFkeyProperty beanFkeyProperty0 = new BeanFkeyProperty("element null in expression ", "n61KjU;", 20);
      elPropertyChainBuilder0.setContainsMany();
      elPropertyChainBuilder0.add(beanFkeyProperty0);
      assertTrue(elPropertyChainBuilder0.isContainsMany());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, (String) null);
      // Undeclared exception!
      try { 
        elPropertyChainBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.el.ElPropertyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "");
      // Undeclared exception!
      try { 
        elPropertyChainBuilder0.add((ElPropertyValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element null in expression 
         //
         verifyException("io.ebeaninternal.server.el.ElPropertyChainBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "C/Qda$~");
      // Undeclared exception!
      try { 
        elPropertyChainBuilder0.build();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("io.ebeaninternal.server.el.ElPropertyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "C/Qda$~");
      String string0 = elPropertyChainBuilder0.getExpression();
      assertEquals("C/Qda$~", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "");
      elPropertyChainBuilder0.setEmbedded(true);
      assertFalse(elPropertyChainBuilder0.isContainsMany());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElPropertyChainBuilder elPropertyChainBuilder0 = new ElPropertyChainBuilder(false, "wis42_>s");
      boolean boolean0 = elPropertyChainBuilder0.isContainsMany();
      assertFalse(boolean0);
  }
}
