/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:08:59 GMT 2019
 */

package io.ebeaninternal.server.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import io.ebeaninternal.server.cluster.BinaryMessage;
import io.ebeaninternal.server.core.timezone.CloneDataTimeZone;
import io.ebeaninternal.server.core.timezone.NoDataTimeZone;
import io.ebeaninternal.server.type.DataBind;
import io.ebeaninternal.server.type.RsetDataReader;
import io.ebeaninternal.server.type.RsetDataReaderIndexed;
import io.ebeaninternal.server.type.ScalarTypeYear;
import io.ebeanservice.docstore.api.mapping.DocPropertyType;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Year;
import java.time.format.DateTimeParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockYear;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.JDBCArrayBasic;
import org.hsqldb.jdbc.JDBCClobFile;
import org.hsqldb.rowio.RowInputBinary;
import org.hsqldb.rowio.RowInputBinary180;
import org.hsqldb.rowio.RowInputTextLog;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputBinary180;
import org.hsqldb.types.Type;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScalarTypeYear_ESTest extends ScalarTypeYear_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, scalarTypeYear0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StringReader stringReader0 = new StringReader("r)0+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0);
      Year year0 = MockYear.now();
      scalarTypeYear0.jsonWrite((JsonGenerator) uTF8JsonGenerator0, year0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Object object0 = scalarTypeYear0.toJdbcType((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      Year year0 = scalarTypeYear0.readData(rowInputBinary0);
      assertNotNull(year0);
      assertEquals(4, rowInputBinary0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = scalarTypeYear0.parse("2014");
      assertNotNull(year0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 5913);
      NumericNode numericNode0 = arrayNode0.numberNode(5913);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      Year year0 = scalarTypeYear0.jsonRead(jsonParser0);
      assertNotNull(year0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Clock clock0 = MockClock.systemDefaultZone();
      Year year0 = MockYear.now(clock0);
      String string0 = scalarTypeYear0.formatValue(year0);
      assertEquals("2014", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.now();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      // Undeclared exception!
      try { 
        scalarTypeYear0.writeData((DataOutput) rowOutputBinary0, year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.toBeanType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)115;
      RowInputBinary180 rowInputBinary180_0 = new RowInputBinary180(byteArray0);
      // Undeclared exception!
      try { 
        scalarTypeYear0.readData(rowInputBinary180_0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): 1929379840
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.readData((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      RowInputTextLog rowInputTextLog0 = new RowInputTextLog();
      try { 
        scalarTypeYear0.readData(rowInputTextLog0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      NoDataTimeZone noDataTimeZone0 = new NoDataTimeZone();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      RsetDataReader rsetDataReader0 = new RsetDataReader(noDataTimeZone0, simpleResultSet0);
      try { 
        scalarTypeYear0.read(rsetDataReader0);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // No data is available [2000-196]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      CloneDataTimeZone cloneDataTimeZone0 = new CloneDataTimeZone("g\"TIg~^3YGUKlF|.I&*");
      Object[] objectArray0 = new Object[3];
      JDBCArrayBasic jDBCArrayBasic0 = new JDBCArrayBasic(objectArray0, (Type) null);
      ResultSet resultSet0 = jDBCArrayBasic0.getResultSet();
      RsetDataReader rsetDataReader0 = new RsetDataReader(cloneDataTimeZone0, resultSet0);
      try { 
        scalarTypeYear0.read(rsetDataReader0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // invalid cursor state: identifier cursor not positioned on row in UPDATE, DELETE, SET, or GET statement: ; ResultSet is positioned before first row
         //
         verifyException("org.hsqldb.jdbc.JDBCUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      NoDataTimeZone noDataTimeZone0 = new NoDataTimeZone();
      RsetDataReader rsetDataReader0 = new RsetDataReader(noDataTimeZone0, (ResultSet) null);
      // Undeclared exception!
      try { 
        scalarTypeYear0.read(rsetDataReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.RsetDataReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      NoDataTimeZone noDataTimeZone0 = new NoDataTimeZone();
      int[] intArray0 = new int[0];
      RsetDataReaderIndexed rsetDataReaderIndexed0 = new RsetDataReaderIndexed(noDataTimeZone0, (ResultSet) null, intArray0, false);
      // Undeclared exception!
      try { 
        scalarTypeYear0.read(rsetDataReaderIndexed0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("io.ebeaninternal.server.type.RsetDataReaderIndexed", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.parse(" between ? and ? ");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text ' between ? and ? ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, scalarTypeYear0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      byte[] byteArray0 = new byte[4];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3611, objectReader0, dataOutputStream0, byteArray0, 3921, true);
      Year year0 = MockYear.of(153);
      // Undeclared exception!
      try { 
        scalarTypeYear0.jsonWrite((JsonGenerator) uTF8JsonGenerator0, year0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.jsonRead((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.of(161);
      Year year1 = scalarTypeYear0.toBeanType(year0);
      assertSame(year1, year0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        scalarTypeYear0.toBeanType(object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.now();
      Object object0 = scalarTypeYear0.toJdbcType(year0);
      assertEquals(2014, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.toJdbcType("2014");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      BinaryMessage binaryMessage0 = new BinaryMessage(517);
      DataOutputStream dataOutputStream0 = binaryMessage0.getOs();
      scalarTypeYear0.writeData((DataOutput) dataOutputStream0, (Year) null);
      assertFalse(scalarTypeYear0.isDateTimeCapable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.now();
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180(374, 374);
      scalarTypeYear0.writeData((DataOutput) rowOutputBinary180_0, year0);
      assertEquals(5, rowOutputBinary180_0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      Year year0 = scalarTypeYear0.readData(rowInputBinary0);
      assertNull(year0);
      assertEquals(63, rowInputBinary0.available());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      // Undeclared exception!
      try { 
        scalarTypeYear0.readData(rowInputBinary0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IO error: RowInputBinary
         //
         verifyException("org.hsqldb.error.Error", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.bind((DataBind) null, (Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.now();
      // Undeclared exception!
      try { 
        scalarTypeYear0.bind((DataBind) null, year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      Year year0 = MockYear.now();
      // Undeclared exception!
      try { 
        scalarTypeYear0.jsonWrite((JsonGenerator) null, year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, scalarTypeYear0, false);
      File file0 = MockFile.createTempFile("RowDataDynamic.7", ",JR<B{'Q)S%3#");
      JDBCClobFile jDBCClobFile0 = new JDBCClobFile(file0);
      Reader reader0 = jDBCClobFile0.getCharacterStream();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 100, reader0, objectReader0, charsToNameCanonicalizer0);
      try { 
        scalarTypeYear0.jsonRead(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      DocPropertyType docPropertyType0 = scalarTypeYear0.getDocType();
      assertEquals(DocPropertyType.INTEGER, docPropertyType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      boolean boolean0 = scalarTypeYear0.isDateTimeCapable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.convertFromMillis(1587L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not Supported
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScalarTypeYear scalarTypeYear0 = new ScalarTypeYear();
      // Undeclared exception!
      try { 
        scalarTypeYear0.formatValue((Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeYear", e);
      }
  }
}
