/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:06:49 GMT 2019
 */

package io.ebeaninternal.server.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebeaninternal.server.type.ScalarTypeJodaPeriod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.chrono.GregorianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScalarTypeJodaPeriod_ESTest extends ScalarTypeJodaPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      Period period0 = scalarTypeJodaPeriod0.convertFromDbString("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.parse("0Y. 5NX},RS#7`(7s$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0Y. 5NX},RS#7`(7s$\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.formatValue((Period) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeJodaPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.convertToDbString((Period) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.ScalarTypeJodaPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.convertFromDbString("zq|>GLMa|2H#Kx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"zq|>GLMa|2H#Kx\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      Period period0 = scalarTypeJodaPeriod0.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now((Chronology) gregorianChronology0);
      Period period0 = new Period(localTime0, localTime0);
      String string0 = scalarTypeJodaPeriod0.formatValue(period0);
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now((Chronology) gregorianChronology0);
      Period period0 = new Period(localTime0, localTime0);
      String string0 = scalarTypeJodaPeriod0.convertToDbString(period0);
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      // Undeclared exception!
      try { 
        scalarTypeJodaPeriod0.convertFromDbString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScalarTypeJodaPeriod scalarTypeJodaPeriod0 = new ScalarTypeJodaPeriod();
      int int0 = scalarTypeJodaPeriod0.getLength();
      assertEquals(50, int0);
  }
}
