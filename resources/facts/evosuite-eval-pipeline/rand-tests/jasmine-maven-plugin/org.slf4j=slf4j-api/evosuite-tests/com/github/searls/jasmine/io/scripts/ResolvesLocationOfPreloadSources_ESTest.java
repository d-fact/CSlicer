/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:39:42 GMT 2019
 */

package com.github.searls.jasmine.io.scripts;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.searls.jasmine.io.scripts.ConvertsFileToUriString;
import com.github.searls.jasmine.io.scripts.ResolvesLocationOfPreloadSources;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolvesLocationOfPreloadSources_ESTest extends ResolvesLocationOfPreloadSources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConvertsFileToUriString convertsFileToUriString0 = new ConvertsFileToUriString();
      ResolvesLocationOfPreloadSources resolvesLocationOfPreloadSources0 = new ResolvesLocationOfPreloadSources(convertsFileToUriString0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("Predicates.in(");
      arrayList0.add("");
      MockFile mockFile1 = new MockFile(")tD*J");
      List<String> list0 = resolvesLocationOfPreloadSources0.resolve(arrayList0, mockFile1, mockFile0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ResolvesLocationOfPreloadSources resolvesLocationOfPreloadSources0 = new ResolvesLocationOfPreloadSources((ConvertsFileToUriString) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      // Undeclared exception!
      try { 
        resolvesLocationOfPreloadSources0.resolve(arrayList0, (File) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.searls.jasmine.io.scripts.ResolvesLocationOfPreloadSources", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConvertsFileToUriString convertsFileToUriString0 = new ConvertsFileToUriString();
      ResolvesLocationOfPreloadSources resolvesLocationOfPreloadSources0 = new ResolvesLocationOfPreloadSources(convertsFileToUriString0);
      File file0 = MockFile.createTempFile("Nnq|3K5YF=", "Nnq|3K5YF=");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      List<String> list0 = resolvesLocationOfPreloadSources0.resolve(linkedList0, file0, file0);
      List<String> list1 = resolvesLocationOfPreloadSources0.resolve(list0, file0, file0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertFalse(list1.contains(""));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConvertsFileToUriString convertsFileToUriString0 = new ConvertsFileToUriString();
      ResolvesLocationOfPreloadSources resolvesLocationOfPreloadSources0 = new ResolvesLocationOfPreloadSources(convertsFileToUriString0);
      File file0 = MockFile.createTempFile("Jza!)2gV2lEffeX", "Jza!)2gV2lEffeX");
      List<String> list0 = resolvesLocationOfPreloadSources0.resolve((List<String>) null, file0, file0);
      List<String> list1 = resolvesLocationOfPreloadSources0.resolve(list0, file0, file0);
      assertFalse(list1.contains("Jza!)2gV2lEffeX"));
  }
}
