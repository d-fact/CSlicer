/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:38:34 GMT 2019
 */

package com.github.searls.jasmine.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.searls.jasmine.config.ImmutableJasmineConfiguration;
import com.github.searls.jasmine.config.JasmineConfiguration;
import com.github.searls.jasmine.model.FileSystemReporter;
import com.github.searls.jasmine.model.Reporter;
import com.github.searls.jasmine.model.ScriptSearch;
import com.github.searls.jasmine.mojo.Context;
import com.github.searls.jasmine.runner.ReporterType;
import com.github.searls.jasmine.runner.SpecRunnerTemplate;
import java.io.File;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImmutableJasmineConfiguration_ESTest extends ImmutableJasmineConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      immutableJasmineConfiguration_Builder0.autoRefreshInterval((-1188));
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.autoRefreshInterval((-1188));
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      LinkedHashSet<FileSystemReporter> linkedHashSet0 = new LinkedHashSet<FileSystemReporter>();
      immutableJasmineConfiguration_Builder0.addAllFileSystemReporters(linkedHashSet0);
      Stack<FileSystemReporter> stack0 = new Stack<FileSystemReporter>();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.fileSystemReporters(stack0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter[] fileSystemReporterArray0 = new FileSystemReporter[1];
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter("", "`*q.H2%>xq}SC,-@E3");
      fileSystemReporterArray0[0] = fileSystemReporter0;
      Stack<FileSystemReporter> stack0 = new Stack<FileSystemReporter>();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.fileSystemReporters(stack0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder2 = immutableJasmineConfiguration_Builder0.addFileSystemReporters(fileSystemReporterArray0);
      assertSame(immutableJasmineConfiguration_Builder2, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter("", "");
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addReporters((Reporter) fileSystemReporter0);
      Comparator<Reporter> comparator0 = (Comparator<Reporter>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Reporter> treeSet0 = new TreeSet<Reporter>(comparator0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder2 = immutableJasmineConfiguration_Builder1.addAllReporters(treeSet0);
      assertSame(immutableJasmineConfiguration_Builder2, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      MockFile mockFile0 = new MockFile("");
      Reporter reporter0 = new Reporter("", mockFile0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addReporters(reporter0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder2 = immutableJasmineConfiguration_Builder0.addReporters(reporter0);
      assertSame(immutableJasmineConfiguration_Builder2, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder0.from((JasmineConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instance
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      MockFile mockFile0 = new MockFile("3bs*>f%[|}N=q6^J]>");
      Optional<File> optional0 = Optional.of((File) mockFile0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.customRunnerConfiguration(optional0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      File file0 = MockFile.createTempFile("@GcDDOiq8a~,jT<M%", "H69/Zv(&");
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.basedir(file0);
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build JasmineConfiguration, some of required attributes are not set [jasmineTargetDir, sources, specs]
         //
         verifyException("com.github.searls.jasmine.config.ImmutableJasmineConfiguration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build JasmineConfiguration, some of required attributes are not set [basedir, jasmineTargetDir, sources, specs]
         //
         verifyException("com.github.searls.jasmine.config.ImmutableJasmineConfiguration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      PriorityQueue<FileSystemReporter> priorityQueue0 = new PriorityQueue<FileSystemReporter>();
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter();
      priorityQueue0.add(fileSystemReporter0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.fileSystemReporters(priorityQueue0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter[] fileSystemReporterArray0 = new FileSystemReporter[9];
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter("$sWV.NS\"A#U}f0b2kSg", "$sWV.NS\"A#U}f0b2kSg");
      fileSystemReporterArray0[0] = fileSystemReporter0;
      fileSystemReporterArray0[1] = fileSystemReporterArray0[0];
      fileSystemReporterArray0[2] = fileSystemReporter0;
      fileSystemReporterArray0[3] = fileSystemReporterArray0[1];
      fileSystemReporterArray0[4] = fileSystemReporter0;
      fileSystemReporterArray0[5] = fileSystemReporterArray0[1];
      fileSystemReporterArray0[6] = fileSystemReporterArray0[3];
      fileSystemReporterArray0[7] = fileSystemReporter0;
      fileSystemReporterArray0[8] = fileSystemReporterArray0[3];
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addFileSystemReporters(fileSystemReporterArray0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      Reporter reporter0 = new Reporter("h!L#+ AojUQ4+viqQ", (File) null);
      linkedList0.add(reporter0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addAllReporters(linkedList0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter("%A6{Rw]'i%la]5t", "%A6{Rw]'i%la]5t");
      Reporter[] reporterArray0 = new Reporter[2];
      reporterArray0[0] = (Reporter) fileSystemReporter0;
      reporterArray0[1] = (Reporter) fileSystemReporter0;
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addReporters(reporterArray0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addAllPreloadSources(set0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "reporterType=";
      stringArray0[1] = "reporterType=";
      stringArray0[2] = "reporterType=";
      stringArray0[3] = "reporterType=";
      stringArray0[4] = "reporters";
      stringArray0[5] = "reporterType=";
      stringArray0[6] = "reporterType=";
      stringArray0[7] = "reporterType=";
      stringArray0[8] = "reporterType=";
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addPreloadSources(stringArray0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      LinkedList<Context> linkedList0 = new LinkedList<Context>();
      Context context0 = new Context();
      linkedList0.add(context0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addAllContexts(linkedList0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Context[] contextArray0 = new Context[1];
      MockFile mockFile0 = new MockFile("lDY&2,TyL(;_C", "lDY&2,TyL(;_C");
      Context context0 = new Context("lDY&2,TyL(;_C", mockFile0);
      contextArray0[0] = context0;
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addContexts(contextArray0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableJasmineConfiguration.copyOf((JasmineConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instance
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.specDirectoryName("");
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter("%A6{Rw]'i%la]5t", "%A6{Rw]'i%la]5t");
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addReporters((Reporter) fileSystemReporter0);
      Reporter[] reporterArray0 = new Reporter[2];
      reporterArray0[0] = (Reporter) fileSystemReporter0;
      reporterArray0[1] = (Reporter) fileSystemReporter0;
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder2 = immutableJasmineConfiguration_Builder1.addReporters(reporterArray0);
      assertSame(immutableJasmineConfiguration_Builder2, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Context context0 = new Context();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addContexts(context0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.srcDirectoryName("");
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.specRunnerHtmlFileName("T=N>5 -&Yz*\"s3r");
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.projectClassLoader(classLoader0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Class<FileSystemReporter> class0 = FileSystemReporter.class;
      ServiceLoader<FileSystemReporter> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.reporters(serviceLoader0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Context> priorityQueue0 = new PriorityQueue<Context>(comparator0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.contexts(priorityQueue0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder0.sources((ScriptSearch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sources
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder0.specs((ScriptSearch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // specs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.sourceEncoding("reporterType=");
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0, 812.7723F);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.preloadSources(linkedHashSet0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      Class<FileSystemReporter> class0 = FileSystemReporter.class;
      ServiceLoader<FileSystemReporter> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      immutableJasmineConfiguration_Builder0.fileSystemReporters(serviceLoader0);
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addFileSystemReporters(fileSystemReporter0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      FileSystemReporter fileSystemReporter0 = new FileSystemReporter();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addFileSystemReporters(fileSystemReporter0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ReporterType reporterType0 = ReporterType.HtmlReporter;
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.reporterType(reporterType0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      MockFile mockFile0 = new MockFile("lDY&2,TyL(;_C", "lDY&2,TyL(;_C");
      immutableJasmineConfiguration_Builder0.jasmineTargetDir(mockFile0);
      // Undeclared exception!
      try { 
        immutableJasmineConfiguration_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build JasmineConfiguration, some of required attributes are not set [basedir, sources, specs]
         //
         verifyException("com.github.searls.jasmine.config.ImmutableJasmineConfiguration$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      MockFile mockFile0 = new MockFile("lDY&2,TyL(;_C", "lDY&2,TyL(;_C");
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.customRunnerConfiguration((File) mockFile0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.addPreloadSources("tt1~ddW,'Iy`^");
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      File file0 = MockFile.createTempFile("reporterType=", "reporterType=");
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.customRunnerTemplate(file0);
      assertSame(immutableJasmineConfiguration_Builder0, immutableJasmineConfiguration_Builder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      SpecRunnerTemplate specRunnerTemplate0 = SpecRunnerTemplate.REQUIRE_JS;
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.specRunnerTemplate(specRunnerTemplate0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder0 = ImmutableJasmineConfiguration.builder();
      File file0 = MockFile.createTempFile("com.github.searls.jasmine.config.ImmutableJasmineConfiguration$InitShim", "com.github.searls.jasmine.config.ImmutableJasmineConfiguration$InitShim");
      Optional<File> optional0 = Optional.of(file0);
      ImmutableJasmineConfiguration.Builder immutableJasmineConfiguration_Builder1 = immutableJasmineConfiguration_Builder0.customRunnerTemplate(optional0);
      assertSame(immutableJasmineConfiguration_Builder1, immutableJasmineConfiguration_Builder0);
  }
}
