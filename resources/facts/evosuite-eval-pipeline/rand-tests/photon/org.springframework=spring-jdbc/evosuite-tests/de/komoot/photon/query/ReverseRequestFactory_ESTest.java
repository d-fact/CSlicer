/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 15:27:16 GMT 2019
 */

package de.komoot.photon.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.komoot.photon.query.ReverseRequest;
import de.komoot.photon.query.ReverseRequestFactory;
import java.util.HashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.Request;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReverseRequestFactory_ESTest extends ReverseRequestFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory.m_hsRequestQueryParams = hashSet0;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("1", "1", "1").when(request0).queryParamOrDefault(anyString() , anyString());
      doReturn(hashSet0).when(request0).queryParams();
      doReturn("1", "1", "k8").when(request0).queryParams(anyString());
      hashSet0.add("1");
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid search term 'limit', expected an integer.
         //
         verifyException("de.komoot.photon.query.ReverseRequestFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory.m_hsRequestQueryParams = hashSet0;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("1", "1").when(request0).queryParamOrDefault(anyString() , anyString());
      doReturn(hashSet0).when(request0).queryParams();
      doReturn("1", "Uzi?e/m.) C").when(request0).queryParams(anyString());
      hashSet0.add("1");
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid search term 'radius', expected a number.
         //
         verifyException("de.komoot.photon.query.ReverseRequestFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      hashSet0.add("");
      ReverseRequestFactory.m_hsRequestQueryParams = hashSet0;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("").when(request0).queryParamOrDefault(anyString() , anyString());
      doReturn(hashSet0).when(request0).queryParams();
      doReturn("").when(request0).queryParams(anyString());
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid search term 'lat' and/or 'lon', try instead lat=51.5&lon=8.0
         //
         verifyException("de.komoot.photon.query.ReverseRequestFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(request0).queryParams();
      // Undeclared exception!
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.komoot.photon.query.ReverseRequestFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory.m_hsRequestQueryParams = hashSet0;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("1", (String) null).when(request0).queryParamOrDefault(anyString() , anyString());
      doReturn(hashSet0).when(request0).queryParams();
      doReturn("1").when(request0).queryParams(anyString());
      hashSet0.add("1");
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      // Undeclared exception!
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ReverseRequestFactory.m_hsRequestQueryParams = hashSet0;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("9", "9", (String) null).when(request0).queryParamOrDefault(anyString() , anyString());
      doReturn(hashSet0).when(request0).queryParams();
      doReturn("9", (String) null, (String) null, "9").when(request0).queryParams(anyString());
      hashSet0.add("9");
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(ReverseRequestFactory.m_hsRequestQueryParams);
      ReverseRequest reverseRequest0 = reverseRequestFactory0.create(request0);
      assertEquals(1.0, reverseRequest0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(hashSet0).when(request0).queryParams();
      hashSet0.add("1");
      ReverseRequestFactory reverseRequestFactory0 = new ReverseRequestFactory(hashSet0);
      try { 
        reverseRequestFactory0.create(request0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown query parameter '1'.  Allowed parameters are: [query_string_filter, limit, distance_sort, lon, lang, radius, lat]
         //
         verifyException("de.komoot.photon.query.ReverseRequestFactory", e);
      }
  }
}
