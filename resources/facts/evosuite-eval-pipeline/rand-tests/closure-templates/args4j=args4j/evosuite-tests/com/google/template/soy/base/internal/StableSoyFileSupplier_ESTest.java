/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 13:58:30 GMT 2019
 */

package com.google.template.soy.base.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.CharSource;
import com.google.template.soy.base.internal.SoyFileKind;
import com.google.template.soy.base.internal.SoyFileSupplier;
import com.google.template.soy.base.internal.StableSoyFileSupplier;
import java.io.Reader;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StableSoyFileSupplier_ESTest extends StableSoyFileSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<CharSource> linkedList0 = new LinkedList<CharSource>();
      CharSource charSource0 = CharSource.empty();
      linkedList0.add(charSource0);
      linkedList0.add(charSource0);
      List<CharSource> list0 = linkedList0.subList(0, 1);
      CharSource charSource1 = CharSource.concat((Iterable<? extends CharSource>) list0);
      SoyFileKind soyFileKind0 = SoyFileKind.DEP;
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier(charSource1, soyFileKind0, "com.google.template.soy.base.internal.StableSoyFileSupplier");
      linkedList0.remove(1);
      // Undeclared exception!
      try { 
        stableSoyFileSupplier0.open();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeSet<CharSource> treeSet0 = new TreeSet<CharSource>();
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>((SortedSet<? extends CharSource>) treeSet0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      SoyFileKind soyFileKind0 = SoyFileKind.DEP;
      priorityQueue0.add(charSource0);
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier(charSource0, soyFileKind0, "com.google.template.soy.base.internal.StableSoyFileSupplier");
      // Undeclared exception!
      try { 
        stableSoyFileSupplier0.open();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier((CharSource) null, soyFileKind0, "Iknf^KwIp9HTot|7|'&");
      // Undeclared exception!
      try { 
        stableSoyFileSupplier0.open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.template.soy.base.internal.StableSoyFileSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SoyFileKind soyFileKind0 = SoyFileKind.INDIRECT_DEP;
      StableSoyFileSupplier stableSoyFileSupplier0 = null;
      try {
        stableSoyFileSupplier0 = new StableSoyFileSupplier((CharSource) null, soyFileKind0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Soy file path must be non-null and non-empty.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CharSource charSource0 = CharSource.empty();
      SoyFileKind soyFileKind0 = SoyFileKind.INDIRECT_DEP;
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier(charSource0, soyFileKind0, "`tJ");
      boolean boolean0 = stableSoyFileSupplier0.hasChangedSince((SoyFileSupplier.Version) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeSet<CharSource> treeSet0 = new TreeSet<CharSource>();
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>((SortedSet<? extends CharSource>) treeSet0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      SoyFileKind soyFileKind0 = SoyFileKind.DEP;
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier(charSource0, soyFileKind0, "com.google.template.soy.base.internal.StableSoyFileSupplier");
      SoyFileSupplier.Version soyFileSupplier_Version0 = stableSoyFileSupplier0.getVersion();
      boolean boolean0 = stableSoyFileSupplier0.hasChangedSince(soyFileSupplier_Version0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TreeSet<CharSource> treeSet0 = new TreeSet<CharSource>();
      PriorityQueue<CharSource> priorityQueue0 = new PriorityQueue<CharSource>((SortedSet<? extends CharSource>) treeSet0);
      CharSource charSource0 = CharSource.concat((Iterable<? extends CharSource>) priorityQueue0);
      SoyFileKind soyFileKind0 = SoyFileKind.DEP;
      StableSoyFileSupplier stableSoyFileSupplier0 = new StableSoyFileSupplier(charSource0, soyFileKind0, "com.google.template.soy.base.internal.StableSoyFileSupplier");
      Reader reader0 = stableSoyFileSupplier0.open();
      assertNotNull(reader0);
  }
}
