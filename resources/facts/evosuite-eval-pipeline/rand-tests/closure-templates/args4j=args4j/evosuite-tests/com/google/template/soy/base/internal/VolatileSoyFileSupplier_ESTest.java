/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 13:56:04 GMT 2019
 */

package com.google.template.soy.base.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.template.soy.base.internal.SoyFileKind;
import com.google.template.soy.base.internal.SoyFileSupplier;
import com.google.template.soy.base.internal.VolatileSoyFileSupplier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VolatileSoyFileSupplier_ESTest extends VolatileSoyFileSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile("LdhWU!=ca{$6#ucH^", "LdhWU!=ca{$6#ucH^");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(file0, soyFileKind0);
      SoyFileSupplier.Version soyFileSupplier_Version0 = volatileSoyFileSupplier0.getVersion();
      file0.setLastModified(658L);
      boolean boolean0 = volatileSoyFileSupplier0.hasChangedSince(soyFileSupplier_Version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Funnels.sequentialFunnel(", "Funnels.sequentialFunnel(");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(mockFile0, soyFileKind0);
      try { 
        volatileSoyFileSupplier0.open();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SoyFileKind soyFileKind0 = SoyFileKind.INDIRECT_DEP;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = null;
      try {
        volatileSoyFileSupplier0 = new VolatileSoyFileSupplier((File) null, soyFileKind0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.template.soy.base.internal.VolatileSoyFileSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = null;
      try {
        volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(mockFile0, soyFileKind0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Soy file path must be non-null and non-empty.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      File file0 = MockFile.createTempFile("LdhWU!=ca{$6#ucH^", "LdhWU!=ca{$6#ucH^");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(file0, soyFileKind0);
      Reader reader0 = volatileSoyFileSupplier0.open();
      assertNotNull(reader0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("buffeSize m)t ~e postive: %s", "");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(mockFile0, soyFileKind0);
      SoyFileSupplier.Version soyFileSupplier_Version0 = volatileSoyFileSupplier0.getVersion();
      mockFile0.mkdir();
      boolean boolean0 = volatileSoyFileSupplier0.hasChangedSince(soyFileSupplier_Version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cb9K8/me8YYj", "Cb9K8/me8YYj");
      SoyFileKind soyFileKind0 = SoyFileKind.DEP;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(mockFile0, soyFileKind0);
      boolean boolean0 = volatileSoyFileSupplier0.hasChangedSince((SoyFileSupplier.Version) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      File file0 = MockFile.createTempFile("HZ{drQ^fkAR+D=7'^z", "HZ{drQ^fkAR+D=7'^z");
      SoyFileKind soyFileKind0 = SoyFileKind.SRC;
      VolatileSoyFileSupplier volatileSoyFileSupplier0 = new VolatileSoyFileSupplier(file0, soyFileKind0);
      SoyFileSupplier.Version soyFileSupplier_Version0 = volatileSoyFileSupplier0.getVersion();
      boolean boolean0 = volatileSoyFileSupplier0.hasChangedSince(soyFileSupplier_Version0);
      assertFalse(boolean0);
  }
}
