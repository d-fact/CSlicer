/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:22:21 GMT 2019
 */

package com.aventstack.extentreports.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.gherkin.model.IGherkinFormatterModel;
import com.aventstack.extentreports.markuputils.Markup;
import com.aventstack.extentreports.model.AbstractStructure;
import com.aventstack.extentreports.model.Author;
import com.aventstack.extentreports.model.ExceptionInfo;
import com.aventstack.extentreports.model.Log;
import com.aventstack.extentreports.model.ScreenCapture;
import com.aventstack.extentreports.model.Screencast;
import com.aventstack.extentreports.model.TestAttribute;
import java.util.Date;
import org.bson.types.ObjectId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Log_ESTest extends Log_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.setTimestamp((Date) null);
      Date date0 = log0.getTimestamp();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.setStepName("g.4GR4-D=p!Q6");
      String string0 = log0.getStepName();
      assertEquals("g.4GR4-D=p!Q6", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      log0.setStepName("");
      String string0 = log0.getStepName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Status status0 = Status.PASS;
      log0.setStatus(status0);
      Status status1 = log0.getStatus();
      assertSame(status1, status0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.setSequence(1376);
      int int0 = log0.getSequence();
      assertEquals(1376, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.setSequence((-5130));
      int int0 = log0.getSequence();
      assertEquals((-5130), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Screencast screencast0 = new Screencast();
      log0.setScreencast(screencast0);
      log0.getScreencastContext();
      //  // Unstable assertion: assertEquals(43, test0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      com.aventstack.extentreports.model.Test test0 = log0.getParentModel();
      assertNull(test0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Class<IGherkinFormatterModel> class0 = IGherkinFormatterModel.class;
      test0.setBehaviorDrivenType(class0);
      Log log0 = new Log(test0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertNull(test1.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Screencast screencast0 = new Screencast();
      test0.setScreencast(screencast0);
      Log log0 = new Log(test0);
      ScreenCapture screenCapture0 = new ScreenCapture();
      test0.setScreenCapture(screenCapture0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertFalse(test1.hasEnded());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      ExceptionInfo exceptionInfo0 = new ExceptionInfo();
      test0.setExceptionInfo(exceptionInfo0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertNull(test1.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      test0.setCategory((TestAttribute) null);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertNull(test1.getHierarchicalName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Author author0 = new Author("n[_");
      test0.setAuthor(author0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertNull(test1.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      test0.setLevel(2613);
      Log log0 = new Log(test0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertFalse(test1.hasMedia());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      test0.setLevel((-11));
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertEquals(Status.PASS, test1.getStatus());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      test0.setID(0);
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertFalse(test1.hasEnded());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      test0.setID((-14));
      com.aventstack.extentreports.model.Test test1 = log0.getParentModel();
      assertNull(test1.getHierarchicalName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(131, 131, 131);
      log0.setObjectId(objectId0);
      ObjectId objectId1 = log0.getObjectId();
      assertEquals(0, objectId1.getMachineIdentifier());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Log log0 = new Log((com.aventstack.extentreports.model.Test) null);
      ObjectId objectId0 = ObjectId.createFromLegacyFormat((-2056), 112, 0);
      log0.setObjectId(objectId0);
      ObjectId objectId1 = log0.getObjectId();
      assertEquals((short)28672, objectId1.getProcessIdentifier());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      ObjectId objectId0 = new ObjectId(3059, 3059, (short)294, 3059);
      log0.setObjectId(objectId0);
      ObjectId objectId1 = log0.getObjectId();
      assertEquals(3059, objectId1.getTimeSecond());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Log log0 = new Log((com.aventstack.extentreports.model.Test) null);
      log0.setDetails((String) null);
      String string0 = log0.getDetails();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Log log0 = new Log((com.aventstack.extentreports.model.Test) null);
      Screencast screencast0 = new Screencast();
      log0.setScreencast(screencast0);
      String string0 = log0.getDetails();
      assertEquals("<video id='video' width='50%' controls><source src='file:///null'>Your browser does not support the video tag.</video>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      Screencast screencast0 = new Screencast();
      log0.setDetails((String) null);
      // Undeclared exception!
      try { 
        log0.setScreencast(screencast0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      boolean boolean0 = log0.hasScreenCapture();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      String string0 = log0.getDetails();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      ExtentTest extentTest0 = log0.getParent();
      assertNull(extentTest0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Screencast screencast0 = new Screencast();
      log0.setScreencast(screencast0);
      boolean boolean0 = log0.hasScreencast();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Log log0 = new Log((ExtentTest) null);
      boolean boolean0 = log0.hasScreencast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.getStatus();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      AbstractStructure<ScreenCapture> abstractStructure0 = log0.getScreenCaptureContext();
      assertNull(abstractStructure0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Screencast screencast0 = new Screencast();
      log0.setScreencast(screencast0);
      log0.setScreencast(screencast0);
      //  // Unstable assertion: assertEquals(13, test0.getID());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      int int0 = log0.getSequence();
      //  // Unstable assertion: assertEquals(9, test0.getID());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      ScreenCapture screenCapture0 = new ScreenCapture();
      // Undeclared exception!
      try { 
        log0.setScreenCapture(screenCapture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.model.Log", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Markup markup0 = log0.getMarkup();
      assertNull(markup0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      ObjectId objectId0 = log0.getObjectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      log0.setMarkup((Markup) null);
      assertFalse(log0.hasScreencast());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      String string0 = log0.getStepName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      Date date0 = log0.getTimestamp();
      log0.setTimestamp(date0);
      assertFalse(log0.hasScreencast());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      AbstractStructure<Screencast> abstractStructure0 = log0.getScreencastContext();
      assertNull(abstractStructure0);
  }
}
