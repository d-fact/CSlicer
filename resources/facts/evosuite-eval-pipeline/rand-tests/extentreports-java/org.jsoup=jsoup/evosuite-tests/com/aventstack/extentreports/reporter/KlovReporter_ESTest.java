/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:24:01 GMT 2019
 */

package com.aventstack.extentreports.reporter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.gherkin.model.But;
import com.aventstack.extentreports.model.Author;
import com.aventstack.extentreports.model.Category;
import com.aventstack.extentreports.model.Log;
import com.aventstack.extentreports.model.MediaType;
import com.aventstack.extentreports.model.ScreenCapture;
import com.aventstack.extentreports.model.Screencast;
import com.aventstack.extentreports.reporter.KlovReporter;
import com.mongodb.MongoClientOptions;
import com.mongodb.MongoClientURI;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.bson.types.ObjectId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KlovReporter_ESTest extends KlovReporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("B+*Z`Yny*a'M#6l!", ":oMCv-'E~dK-|b\"");
      ServerAddress serverAddress0 = new ServerAddress();
      klovReporter0.initMongoDbConnection(serverAddress0);
      klovReporter0.stop();
      assertEquals(":oMCv-'E~dK-|b\"", klovReporter0.getReportName());
      assertEquals("B+*Z`Yny*a'M#6l!", klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "testCount");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log((com.aventstack.extentreports.model.Test) null);
      Status status0 = Status.SKIP;
      log0.setStatus(status0);
      // Undeclared exception!
      try { 
        klovReporter0.onLogAdded(test0, log0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Author author0 = new Author((String) null);
      // Undeclared exception!
      try { 
        klovReporter0.onAuthorAssigned(test0, author0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("B+*Z`Yny*a'M#6l!", ":oMCv-'E~dK-|b\"");
      Vector<ServerAddress> vector0 = new Vector<ServerAddress>();
      ServerAddress serverAddress0 = new ServerAddress();
      vector0.add(serverAddress0);
      PriorityQueue<MongoCredential> priorityQueue0 = new PriorityQueue<MongoCredential>();
      LinkedList<MongoCredential> linkedList0 = new LinkedList<MongoCredential>(priorityQueue0);
      klovReporter0.initMongoDbConnection((List<ServerAddress>) vector0, (List<MongoCredential>) linkedList0);
      assertEquals(":oMCv-'E~dK-|b\"", klovReporter0.getReportName());
      assertEquals("B+*Z`Yny*a'M#6l!", klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "duration");
      ArrayList<ServerAddress> arrayList0 = new ArrayList<ServerAddress>();
      ServerAddress serverAddress0 = new ServerAddress("Y*", 0);
      arrayList0.add(serverAddress0);
      klovReporter0.initMongoDbConnection((List<ServerAddress>) arrayList0);
      assertEquals("", klovReporter0.getProjectName());
      assertEquals("duration", klovReporter0.getReportName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "");
      klovReporter0.initMongoDbConnection("", (-508));
      assertEquals("", klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("U.Rb", "U.Rb");
      ServerAddress serverAddress0 = new ServerAddress("U.Rb", 100);
      Vector<MongoCredential> vector0 = new Vector<MongoCredential>();
      klovReporter0.initMongoDbConnection(serverAddress0, (List<MongoCredential>) vector0);
      assertEquals("U.Rb", klovReporter0.getReportName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("U.Rb", "U.Rb");
      String string0 = klovReporter0.getReportName();
      assertEquals("U.Rb", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "");
      String string0 = klovReporter0.getReportName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      String string0 = klovReporter0.getProjectName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("' >7y<LI'", "^2z");
      String string0 = klovReporter0.getProjectName();
      assertEquals("' >7y<LI'", string0);
      assertNotNull(string0);
      assertEquals("^2z", klovReporter0.getReportName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("ss.US", "ss.US");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      klovReporter0.setKlovUrl(")$d1lF1OBOI^u%>m");
      Screencast screencast0 = new Screencast();
      // Undeclared exception!
      try { 
        klovReporter0.onScreencastAdded(test0, screencast0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Log log0 = new Log(test0);
      ScreenCapture screenCapture0 = new ScreenCapture();
      try { 
        klovReporter0.onScreenCaptureAdded(log0, screenCapture0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // server url cannot be null, use klov.setKlovUrl(url)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("]`3URL", "");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      // Undeclared exception!
      try { 
        klovReporter0.onNodeStarted(test0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      ArrayList<ServerAddress> arrayList0 = new ArrayList<ServerAddress>();
      Vector<MongoCredential> vector0 = new Vector<MongoCredential>();
      ServerAddress serverAddress0 = new ServerAddress("1$SNa51(=5)imGmf", 1);
      arrayList0.add(serverAddress0);
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) arrayList0, (List<MongoCredential>) vector0, (MongoClientOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Stack<ServerAddress> stack0 = new Stack<ServerAddress>();
      stack0.setSize(3516);
      LinkedList<MongoCredential> linkedList0 = new LinkedList<MongoCredential>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) stack0, (List<MongoCredential>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter(" LILl", " LILl");
      Vector<ServerAddress> vector0 = new Vector<ServerAddress>();
      ServerAddress serverAddress0 = new ServerAddress(" LILl", 453);
      vector0.add(serverAddress0);
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) vector0, (MongoClientOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter((String) null, (String) null);
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Vector<MongoCredential> vector0 = new Vector<MongoCredential>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((ServerAddress) null, (List<MongoCredential>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Stack<com.aventstack.extentreports.model.Test> stack0 = new Stack<com.aventstack.extentreports.model.Test>();
      klovReporter0.setTestList(stack0);
      List<com.aventstack.extentreports.model.Test> list0 = klovReporter0.getTestList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("ss.US", "ss.US");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      klovReporter0.setKlovUrl(")$d1lF1OBOI^u%>m");
      ScreenCapture screenCapture0 = new ScreenCapture();
      MediaType mediaType0 = MediaType.IMG;
      screenCapture0.setMediaType(mediaType0);
      // Undeclared exception!
      try { 
        klovReporter0.onScreenCaptureAdded(test0, screenCapture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Category category0 = new Category("");
      // Undeclared exception!
      try { 
        klovReporter0.onCategoryAssigned(test0, category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      Class<But> class0 = But.class;
      test0.setBehaviorDrivenType(class0);
      // Undeclared exception!
      try { 
        klovReporter0.onTestStarted(test0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      // Undeclared exception!
      try { 
        klovReporter0.onTestStarted(test0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      klovReporter0.getTestList();
      klovReporter0.flush();
      assertNull(klovReporter0.getKlovUrl());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      klovReporter0.flush();
      assertNull(klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("g-", "g-");
      Vector<ServerAddress> vector0 = new Vector<ServerAddress>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hosts list may not be empty
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      ServerAddress serverAddress0 = new ServerAddress(inetAddress0);
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection(serverAddress0, (MongoClientOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      klovReporter0.initKlovServerConnection("");
      assertNull(klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      ObjectId objectId0 = klovReporter0.getReportId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("jk`6OqPpDYd_8'7", "jk`6OqPpDYd_8'7");
      ArrayList<ServerAddress> arrayList0 = new ArrayList<ServerAddress>();
      Vector<MongoCredential> vector0 = new Vector<MongoCredential>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) arrayList0, (List<MongoCredential>) vector0, (MongoClientOptions) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hosts list may not be empty
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection("", (MongoClientOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Screencast screencast0 = new Screencast();
      try { 
        klovReporter0.onScreencastAdded((com.aventstack.extentreports.model.Test) null, screencast0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // server url cannot be null, use klov.setKlovUrl(url)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Log log0 = new Log((com.aventstack.extentreports.model.Test) null);
      // Undeclared exception!
      try { 
        klovReporter0.onScreenCaptureAdded(log0, (ScreenCapture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      String string0 = klovReporter0.getReportName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      // Undeclared exception!
      try { 
        klovReporter0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      // Undeclared exception!
      try { 
        klovReporter0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      String string0 = klovReporter0.getKlovUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((ServerAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      Stack<ServerAddress> stack0 = new Stack<ServerAddress>();
      LinkedList<MongoCredential> linkedList0 = new LinkedList<MongoCredential>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) stack0, (List<MongoCredential>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hosts list may not be empty
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((MongoClientURI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "");
      String string0 = klovReporter0.getProjectName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      ArrayList<ServerAddress> arrayList0 = new ArrayList<ServerAddress>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection((List<ServerAddress>) arrayList0, (MongoClientOptions) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hosts list may not be empty
         //
         verifyException("com.mongodb.connection.ClusterSettings$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("ss.US", "ss.US");
      com.aventstack.extentreports.model.Test test0 = new com.aventstack.extentreports.model.Test();
      ScreenCapture screenCapture0 = new ScreenCapture();
      try { 
        klovReporter0.onScreenCaptureAdded(test0, screenCapture0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // server url cannot be null, use klov.setKlovUrl(url)
         //
         verifyException("com.aventstack.extentreports.reporter.KlovReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      ServerAddress serverAddress0 = new ServerAddress("");
      Stack<MongoCredential> stack0 = new Stack<MongoCredential>();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection(serverAddress0, (List<MongoCredential>) stack0, (MongoClientOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mongodb.Mongo", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("", "");
      ObjectId objectId0 = klovReporter0.getProjectId();
      assertNull(objectId0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      ServerAddress serverAddress0 = new ServerAddress();
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection(serverAddress0, (List<MongoCredential>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // credentialList can not be null
         //
         verifyException("com.mongodb.assertions.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("[", "[");
      // Undeclared exception!
      try { 
        klovReporter0.initMongoDbConnection("[", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // an IPV6 address must be encosed with '[' and ']' according to RFC 2732.
         //
         verifyException("com.mongodb.ServerAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter("]SR", "]SR");
      klovReporter0.setProjectName("]SR");
      assertEquals("]SR", klovReporter0.getReportName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      klovReporter0.initMongoDbConnection("");
      assertNull(klovReporter0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      KlovReporter klovReporter0 = new KlovReporter();
      klovReporter0.setReportName("q4");
      assertNull(klovReporter0.getAnalysisStrategy());
  }
}
