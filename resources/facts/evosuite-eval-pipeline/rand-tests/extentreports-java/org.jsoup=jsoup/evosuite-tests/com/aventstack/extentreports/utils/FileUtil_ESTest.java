/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 12 14:19:44 GMT 2019
 */

package com.aventstack.extentreports.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aventstack.extentreports.utils.FileUtil;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FileUtil.getExtension("co.aventstack.extenrepor/.utiws%FileUtil");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".&q rw2[;^Wd'=Nd", ".&q rw2[;^Wd'=Nd");
      String string0 = FileUtil.getFileNameWithoutExtension((File) mockFile0);
      assertEquals(".&q rw2[;^Wd'=Nd", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FileUtil.getFileNameWithoutExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileNameWithoutExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileNameWithoutExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.utils.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getExtension((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aventstack.extentreports.utils.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("c*!{JC.10Z1D", "c*!{JC.10Z1D");
      String string0 = FileUtil.getExtension((File) mockFile0);
      assertEquals("10Z1D", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      String string0 = FileUtil.getExtension((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("` e&H53", "com.aventstack.extentreports.utils.FileUtil");
      String string0 = FileUtil.getFileNameWithoutExtension((File) mockFile0);
      assertEquals("com.aventstack.extentreports.utils", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      String string0 = FileUtil.getFileNameWithoutExtension((File) mockFile0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = FileUtil.getFileNameWithoutExtension("/om.ava&stack.extentrrts.jtiys.Fi(eUl");
      assertEquals("om.ava&stack.extentrrts.jtiys", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = FileUtil.getExtension("/om.ava&stack.extentrrts.jtiys.Fi(eUl");
      assertEquals("Fi(eUl", string0);
  }
}
