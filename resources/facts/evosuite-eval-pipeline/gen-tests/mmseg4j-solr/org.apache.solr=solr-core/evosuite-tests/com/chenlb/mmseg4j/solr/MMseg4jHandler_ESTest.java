/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 19 06:40:03 GMT 2019
 */

package com.chenlb.mmseg4j.solr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.chenlb.mmseg4j.solr.MMseg4jHandler;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.apache.solr.common.params.RequiredSolrParams;
import org.apache.solr.core.SolrCore;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.response.SolrQueryResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MMseg4jHandler_ESTest extends MMseg4jHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      ModifiableSolrParams modifiableSolrParams0 = new ModifiableSolrParams();
      RequiredSolrParams requiredSolrParams0 = new RequiredSolrParams(modifiableSolrParams0);
      SolrQueryRequest solrQueryRequest0 = mock(SolrQueryRequest.class, new ViolatedAssumptionAnswer());
      doReturn(requiredSolrParams0).when(solrQueryRequest0).getParams();
      SolrQueryResponse solrQueryResponse0 = new SolrQueryResponse();
      try { 
        mMseg4jHandler0.handleRequestBody(solrQueryRequest0, solrQueryResponse0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing required parameter: dicPath
         //
         verifyException("org.apache.solr.common.params.RequiredSolrParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      ModifiableSolrParams modifiableSolrParams0 = new ModifiableSolrParams();
      SolrQueryRequest solrQueryRequest0 = mock(SolrQueryRequest.class, new ViolatedAssumptionAnswer());
      doReturn(modifiableSolrParams0).when(solrQueryRequest0).getParams();
      SolrQueryResponse solrQueryResponse0 = new SolrQueryResponse();
      mMseg4jHandler0.handleRequestBody(solrQueryRequest0, solrQueryResponse0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      SolrQueryResponse solrQueryResponse0 = new SolrQueryResponse();
      try { 
        mMseg4jHandler0.handleRequestBody((SolrQueryRequest) null, solrQueryResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.chenlb.mmseg4j.solr.MMseg4jHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("file:/tmp/jars/mmseg4j-core-1.10.0.jar!/data/chars.dic");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ModifiableSolrParams modifiableSolrParams0 = new ModifiableSolrParams();
      SolrQueryResponse solrQueryResponse0 = new SolrQueryResponse();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "B0&qrqgKUgo:8@%");
      SolrQueryRequest solrQueryRequest0 = mock(SolrQueryRequest.class, new ViolatedAssumptionAnswer());
      doReturn(modifiableSolrParams0).when(solrQueryRequest0).getParams();
      mMseg4jHandler0.handleRequestBody(solrQueryRequest0, solrQueryResponse0);
      assertFalse(solrQueryResponse0.isHttpCaching());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      String string0 = mMseg4jHandler0.getVersion();
      assertEquals("1.8", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      // Undeclared exception!
      try { 
        mMseg4jHandler0.inform((SolrCore) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.chenlb.mmseg4j.solr.MMseg4jHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      String string0 = mMseg4jHandler0.getSourceId();
      assertEquals("$Revision: 63 $", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      String string0 = mMseg4jHandler0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MMseg4jHandler mMseg4jHandler0 = new MMseg4jHandler();
      String string0 = mMseg4jHandler0.getSource();
      assertEquals("$URL: http://mmseg4j.googlecode.com/svn/trunk/src/com/chenlb/mmseg4j/solr/MMseg4jHandler.java $", string0);
  }
}
