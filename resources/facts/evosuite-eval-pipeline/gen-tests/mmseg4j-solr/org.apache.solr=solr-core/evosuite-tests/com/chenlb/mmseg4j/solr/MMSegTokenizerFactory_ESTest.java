/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 19 06:36:53 GMT 2019
 */

package com.chenlb.mmseg4j.solr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.chenlb.mmseg4j.solr.MMSegTokenizerFactory;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.util.ClasspathResourceLoader;
import org.apache.lucene.util.AttributeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MMSegTokenizerFactory_ESTest extends MMSegTokenizerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("file:/tmp/jars/mmseg4j-core-1.10.0.jar!/data/chars.dic");
      FileSystemHandling.createFolder(evoSuiteFile0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      Class<Object> class0 = Object.class;
      ClasspathResourceLoader classpathResourceLoader0 = new ClasspathResourceLoader(class0);
      mMSegTokenizerFactory0.inform(classpathResourceLoader0);
      assertFalse(mMSegTokenizerFactory0.isExplicitLuceneMatchVersion());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      MMSegTokenizerFactory mMSegTokenizerFactory0 = null;
      try {
        mMSegTokenizerFactory0 = new MMSegTokenizerFactory(map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MMSegTokenizerFactory mMSegTokenizerFactory0 = null;
      try {
        mMSegTokenizerFactory0 = new MMSegTokenizerFactory((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("luceneMatchVersion", "i}Ipleo");
      MMSegTokenizerFactory mMSegTokenizerFactory0 = null;
      try {
        mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.text.ParseException: failed to parse lenient version string \"i}Ipleo\": Failed to parse major version from \"I}IPLEO\" (got: I}IPLEO)
         //
         verifyException("org.apache.lucene.analysis.util.AbstractAnalysisFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      AttributeFactory attributeFactory0 = AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY;
      Tokenizer tokenizer0 = mMSegTokenizerFactory0.create(attributeFactory0);
      Tokenizer tokenizer1 = mMSegTokenizerFactory0.create(attributeFactory0);
      assertSame(tokenizer1, tokenizer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("mode", "complex");
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      AttributeFactory attributeFactory0 = AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY;
      Tokenizer tokenizer0 = mMSegTokenizerFactory0.create(attributeFactory0);
      assertTrue(tokenizer0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("mode", "simple");
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      Tokenizer tokenizer0 = mMSegTokenizerFactory0.create((AttributeFactory) null);
      assertTrue(tokenizer0.hasAttributes());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      AttributeFactory attributeFactory0 = TokenStream.DEFAULT_TOKEN_ATTRIBUTE_FACTORY;
      Tokenizer tokenizer0 = mMSegTokenizerFactory0.create(attributeFactory0);
      tokenizer0.removeAllAttributes();
      Tokenizer tokenizer1 = mMSegTokenizerFactory0.create(tokenizer0.DEFAULT_TOKEN_ATTRIBUTE_FACTORY);
      assertSame(tokenizer0, tokenizer1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MMSegTokenizerFactory mMSegTokenizerFactory0 = new MMSegTokenizerFactory(hashMap0);
      ClasspathResourceLoader classpathResourceLoader0 = new ClasspathResourceLoader();
      // Undeclared exception!
      mMSegTokenizerFactory0.inform(classpathResourceLoader0);
  }
}
