/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Aug 20 09:15:11 GMT 2019
 */

package org.vafer.jdeb.utils;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class PGPSignatureOutputStream_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.vafer.jdeb.utils.PGPSignatureOutputStream"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/gen-tests/jdeb/org.bouncycastle=bcpg-jdk15on"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PGPSignatureOutputStream_ESTest_scaffolding.class.getClassLoader() ,
      "org.vafer.jdeb.utils.PGPSignatureOutputStream",
      "org.bouncycastle.bcpg.BCPGInputStream$PartialInputStream",
      "org.bouncycastle.bcpg.sig.IssuerKeyID",
      "org.bouncycastle.util.Strings$1",
      "org.bouncycastle.bcpg.SignatureSubpacket",
      "org.bouncycastle.openpgp.PGPException",
      "org.bouncycastle.bcpg.CompressionAlgorithmTags",
      "org.bouncycastle.bcpg.attr.ImageAttribute",
      "org.bouncycastle.asn1.ASN1Object",
      "org.bouncycastle.openpgp.operator.PGPContentVerifierBuilder",
      "org.bouncycastle.bcpg.S2K",
      "org.bouncycastle.openpgp.PGPPrivateKey",
      "org.bouncycastle.bcpg.MPInteger",
      "org.bouncycastle.bcpg.CompressedDataPacket",
      "org.bouncycastle.bcpg.MarkerPacket",
      "org.bouncycastle.openpgp.operator.PGPContentVerifier",
      "org.bouncycastle.bcpg.ContainedPacket",
      "org.bouncycastle.openpgp.PGPPublicKey",
      "org.bouncycastle.openpgp.operator.KeyFingerPrintCalculator",
      "org.bouncycastle.bcpg.BCPGKey",
      "org.bouncycastle.bcpg.sig.SignatureCreationTime",
      "org.bouncycastle.openpgp.PGPSignatureSubpacketVector",
      "org.bouncycastle.bcpg.BCPGOutputStream",
      "org.bouncycastle.bcpg.SymmetricEncIntegrityPacket",
      "org.bouncycastle.asn1.DLOutputStream",
      "org.bouncycastle.bcpg.SecretKeyPacket",
      "org.bouncycastle.bcpg.sig.SignatureTarget",
      "org.bouncycastle.bcpg.sig.Features",
      "org.bouncycastle.bcpg.UserIDPacket",
      "org.bouncycastle.asn1.ASN1Primitive",
      "org.bouncycastle.util.Arrays",
      "org.bouncycastle.util.Encodable",
      "org.bouncycastle.bcpg.SignaturePacket",
      "org.bouncycastle.openpgp.operator.PGPContentVerifierBuilderProvider",
      "org.bouncycastle.bcpg.ModDetectionCodePacket",
      "org.bouncycastle.bcpg.InputStreamPacket",
      "org.bouncycastle.openpgp.PGPRuntimeOperationException",
      "org.bouncycastle.bcpg.PacketTags",
      "org.bouncycastle.bcpg.PublicKeyPacket",
      "org.bouncycastle.bcpg.SymmetricEncDataPacket",
      "org.bouncycastle.openpgp.PGPSignatureGenerator",
      "org.bouncycastle.openpgp.operator.PGPContentSignerBuilder",
      "org.bouncycastle.openpgp.PGPUserAttributeSubpacketVector",
      "org.bouncycastle.bcpg.OnePassSignaturePacket",
      "org.bouncycastle.bcpg.BCPGObject",
      "org.bouncycastle.bcpg.PublicKeyEncSessionPacket",
      "org.bouncycastle.openpgp.PGPOnePassSignature",
      "org.bouncycastle.bcpg.SecretSubkeyPacket",
      "org.bouncycastle.bcpg.sig.NotationData",
      "org.bouncycastle.util.Iterable",
      "org.bouncycastle.util.Strings",
      "org.bouncycastle.openpgp.operator.PGPContentSigner",
      "org.bouncycastle.asn1.ASN1Encodable",
      "org.bouncycastle.openpgp.PGPSignatureList",
      "org.bouncycastle.asn1.ASN1OutputStream",
      "org.bouncycastle.bcpg.UserAttributeSubpacket",
      "org.bouncycastle.bcpg.ExperimentalPacket",
      "org.bouncycastle.openpgp.PGPSignature",
      "org.bouncycastle.bcpg.PublicSubkeyPacket",
      "org.bouncycastle.util.StringList",
      "org.bouncycastle.bcpg.ArmoredOutputStream",
      "org.bouncycastle.bcpg.BCPGInputStream",
      "org.bouncycastle.asn1.ASN1OutputStream$ImplicitOutputStream",
      "org.bouncycastle.bcpg.PublicKeyAlgorithmTags",
      "org.bouncycastle.bcpg.LiteralDataPacket",
      "org.bouncycastle.bcpg.Packet",
      "org.bouncycastle.bcpg.TrustPacket",
      "org.bouncycastle.bcpg.UserAttributePacket",
      "org.bouncycastle.bcpg.SymmetricKeyEncSessionPacket",
      "org.bouncycastle.asn1.DEROutputStream"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.bouncycastle.openpgp.operator.PGPContentSignerBuilder", false, PGPSignatureOutputStream_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PGPSignatureOutputStream_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.vafer.jdeb.utils.PGPSignatureOutputStream",
      "org.bouncycastle.openpgp.PGPSignatureGenerator",
      "org.bouncycastle.openpgp.PGPUserAttributeSubpacketVector",
      "org.bouncycastle.bcpg.SignatureSubpacket",
      "org.bouncycastle.bcpg.sig.SignatureCreationTime",
      "org.bouncycastle.bcpg.sig.IssuerKeyID",
      "org.bouncycastle.bcpg.Packet",
      "org.bouncycastle.bcpg.ContainedPacket",
      "org.bouncycastle.bcpg.PublicKeyPacket",
      "org.bouncycastle.openpgp.PGPPublicKey",
      "org.bouncycastle.openpgp.PGPPrivateKey",
      "org.bouncycastle.bcpg.UserIDPacket",
      "org.bouncycastle.util.Strings$1",
      "org.bouncycastle.util.Strings",
      "org.bouncycastle.openpgp.PGPOnePassSignature",
      "org.bouncycastle.bcpg.OnePassSignaturePacket",
      "org.bouncycastle.util.Arrays",
      "org.bouncycastle.bcpg.BCPGOutputStream"
    );
  }
}
