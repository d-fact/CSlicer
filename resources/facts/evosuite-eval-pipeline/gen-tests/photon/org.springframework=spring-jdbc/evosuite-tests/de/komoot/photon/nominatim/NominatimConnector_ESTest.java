/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 15:31:41 GMT 2019
 */

package de.komoot.photon.nominatim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.i18n.CountryCode;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.DefaultCoordinateSequenceFactory;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.geom.MultiPolygon;
import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.geom.Polygon;
import com.vividsolutions.jts.geom.PrecisionModel;
import de.komoot.photon.JsonDumper;
import de.komoot.photon.PhotonDoc;
import de.komoot.photon.nominatim.NominatimConnector;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NominatimConnector_ESTest extends NominatimConnector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F";
      // Undeclared exception!
      try { 
        NominatimConnector.convertCountryCode(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // country code invalid F
         //
         verifyException("de.komoot.photon.nominatim.NominatimConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      NominatimConnector.convertCountryCode(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", (-1937), "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", "]J/a>E(W");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc";
      // Undeclared exception!
      try { 
        nominatimConnector0.readEntireDatabase(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // country code invalid SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc
         //
         verifyException("de.komoot.photon.nominatim.NominatimConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("osm_id", (-1), "osm_id", "osm_id", "osm_id");
      // Undeclared exception!
      try { 
        nominatimConnector0.getAddresses((PhotonDoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.komoot.photon.nominatim.NominatimConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("yzzJYGW7eG33_", 188, "Iy", "yzzJYGW7eG33_", "yzzJYGW7eG33_");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Iy";
      stringArray0[1] = "Iy";
      // Undeclared exception!
      try { 
        nominatimConnector0.readEntireDatabase(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MP";
      // Undeclared exception!
      try { 
        NominatimConnector.convertCountryCode(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "de.komoot.photon.nominatim.NominatimConnector$7";
      // Undeclared exception!
      try { 
        NominatimConnector.convertCountryCode(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // country code invalid de.komoot.photon.nominatim.NominatimConnector$7
         //
         verifyException("de.komoot.photon.nominatim.NominatimConnector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", 28, "", "", "");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Coordinate coordinate0 = new Coordinate(2.0, 0.0);
      Envelope envelope0 = new Envelope(coordinate0, coordinate0);
      CountryCode countryCode0 = CountryCode.LC;
      Point point0 = new Point(coordinate0, (PrecisionModel) null, 2455);
      PhotonDoc photonDoc0 = new PhotonDoc(3432L, "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", 3432L, "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", "SELECT p.place_id, p.osm_type, p.osm_id, p.name, p.class, p.type, p.rank_address, p.admin_level, p.postcode, p.extratags->'place' as place FROM placex p, place_addressline pa WHERE p.place_id = pa.address_place_id and pa.place_id = ? and pa.cached_rank_address > 4 and pa.address_place_id != ? and pa.isaddress order by rank_address desc,fromarea desc,distance asc,rank_search desc", map0, "", map0, envelope0, (-1192L), 4504.877, countryCode0, point0, 28, 478);
      // Undeclared exception!
      try { 
        nominatimConnector0.getAddresses(photonDoc0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (The connection attempt failed.)
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("startnumber", 887, "startnumber", "startnumber", "startnumber");
      JsonDumper jsonDumper0 = new JsonDumper("startnumber", "startnumber");
      nominatimConnector0.setImporter(jsonDumper0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("startnumber", 887, "startnumber", "startnumber", "startnumber");
      // Undeclared exception!
      try { 
        nominatimConnector0.readDocument(887, '\u0087');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (The connection attempt failed.)
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("@>t.a5+4M['%l2", 1429, "]Jo}FL@C", "G{hLU5c,gcgx%,d", "G{hLU5c,gcgx%,d");
      // Undeclared exception!
      try { 
        nominatimConnector0.getByPlaceId(0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (The connection attempt failed.)
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector("endnumber", (-371), "endnumber", "endnumber", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        nominatimConnector0.readEntireDatabase(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (Something unusual has occured to cause the driver to fail. Please report this exception.)
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NominatimConnector nominatimConnector0 = new NominatimConnector((String) null, 4976, "", "", "j!bl/I ea'Tz|SZS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Envelope envelope0 = new Envelope(862L, 4976, 4976, 225.41);
      CountryCode countryCode0 = CountryCode.DM;
      Polygon[] polygonArray0 = new Polygon[8];
      DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory();
      GeometryFactory geometryFactory0 = new GeometryFactory(defaultCoordinateSequenceFactory0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing((Coordinate[]) null);
      Polygon polygon0 = new Polygon(linearRing0, (LinearRing[]) null, geometryFactory0);
      polygonArray0[0] = polygon0;
      polygonArray0[1] = polygonArray0[0];
      polygonArray0[2] = polygon0;
      polygonArray0[3] = polygonArray0[0];
      polygonArray0[4] = polygonArray0[0];
      polygonArray0[5] = polygon0;
      polygonArray0[6] = polygonArray0[1];
      polygonArray0[7] = polygonArray0[2];
      MultiPolygon multiPolygon0 = new MultiPolygon(polygonArray0, geometryFactory0);
      Point point0 = multiPolygon0.getCentroid();
      PhotonDoc photonDoc0 = new PhotonDoc(862L, "", 4976, "j!bl/I ea'Tz|SZS", "j!bl/I ea'Tz|SZS", hashMap0, "", hashMap0, envelope0, (-4060L), (-4060L), countryCode0, point0, (-4060L), 0);
      // Undeclared exception!
      try { 
        nominatimConnector0.getAddresses(photonDoc0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not get JDBC Connection; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory (The connection attempt failed.)
         //
         verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
      }
  }
}
