/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:43:47 GMT 2019
 */

package com.github.pagehelper.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.PageRowBounds;
import com.github.pagehelper.dialect.rowbounds.Db2RowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.HsqldbRowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.InformixRowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.MySqlRowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.OracleRowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.SqlServer2012RowBoundsDialect;
import com.github.pagehelper.dialect.rowbounds.SqlServerRowBoundsDialect;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.time.chrono.MinguoDate;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.hsqldb.jdbc.JDBCDataSource;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRowBoundsDialect_ESTest extends AbstractRowBoundsDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageRowBounds pageRowBounds0 = new PageRowBounds((-751), (-751));
      Db2RowBoundsDialect db2RowBoundsDialect0 = new Db2RowBoundsDialect();
      boolean boolean0 = db2RowBoundsDialect0.afterCount((-4323457841299070996L), "_PCOUNT", pageRowBounds0);
      assertFalse(boolean0);
      assertEquals((-4323457841299070996L), (long)pageRowBounds0.getTotal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Db2RowBoundsDialect db2RowBoundsDialect0 = new Db2RowBoundsDialect();
      CacheKey cacheKey0 = new CacheKey();
      Object object0 = db2RowBoundsDialect0.processParameterObject((MappedStatement) null, (Object) null, (BoundSql) null, cacheKey0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Db2RowBoundsDialect db2RowBoundsDialect0 = new Db2RowBoundsDialect();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      CacheKey cacheKey0 = new CacheKey();
      String string0 = db2RowBoundsDialect0.getPageSql("wzrG*xdsK(y\"T9", rowBounds0, cacheKey0);
      assertEquals("SELECT * FROM (SELECT TMP_PAGE.*,ROWNUMBER() OVER() AS ROW_ID FROM ( wzrG*xdsK(y\"T9 ) AS TMP_PAGE) TMP_PAGE WHERE ROW_ID BETWEEN 1 AND 2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OracleRowBoundsDialect oracleRowBoundsDialect0 = new OracleRowBoundsDialect();
      RowBounds rowBounds0 = new RowBounds((-185), (-185));
      Object[] objectArray0 = new Object[4];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      String string0 = oracleRowBoundsDialect0.getPageSql("", rowBounds0, cacheKey0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MySqlRowBoundsDialect mySqlRowBoundsDialect0 = new MySqlRowBoundsDialect();
      RowBounds rowBounds0 = new RowBounds();
      Object object0 = mySqlRowBoundsDialect0.afterPage((List) null, (Object) null, rowBounds0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds((-13), (-13));
      MySqlRowBoundsDialect mySqlRowBoundsDialect0 = new MySqlRowBoundsDialect();
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCDataSource jDBCDataSource0 = new JDBCDataSource();
      Environment environment0 = new Environment("", transactionFactory0, jDBCDataSource0);
      Configuration configuration0 = new Configuration(environment0);
      LinkedList<ParameterMapping> linkedList0 = new LinkedList<ParameterMapping>();
      BoundSql boundSql0 = new BoundSql(configuration0, "com.github.pagehelper.dialect.AbstractRowBoundsDialect", linkedList0, "com.github.pagehelper.dialect.AbstractRowBoundsDialect");
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        mySqlRowBoundsDialect0.getPageSql((MappedStatement) null, boundSql0, (Object) informixRowBoundsDialect0, (RowBounds) pageRowBounds0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheKey cacheKey0 = new CacheKey();
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      Object object0 = new Object();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      // Undeclared exception!
      try { 
        informixRowBoundsDialect0.getPageSql((MappedStatement) null, (BoundSql) null, object0, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractRowBoundsDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlServerRowBoundsDialect sqlServerRowBoundsDialect0 = new SqlServerRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(1, 1);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServerRowBoundsDialect0.getPageSql("", (RowBounds) pageRowBounds0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlServer2012RowBoundsDialect sqlServer2012RowBoundsDialect0 = new SqlServer2012RowBoundsDialect();
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServer2012RowBoundsDialect0.getPageSql("S1", (RowBounds) null, (CacheKey) nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.rowbounds.SqlServer2012RowBoundsDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HsqldbRowBoundsDialect hsqldbRowBoundsDialect0 = new HsqldbRowBoundsDialect();
      Clock clock0 = MockClock.systemUTC();
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      // Undeclared exception!
      try { 
        hsqldbRowBoundsDialect0.afterCount(0L, minguoDate0, (RowBounds) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractRowBoundsDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Db2RowBoundsDialect db2RowBoundsDialect0 = new Db2RowBoundsDialect();
      Object object0 = new Object();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      // Undeclared exception!
      try { 
        db2RowBoundsDialect0.afterCount((-2070L), object0, rowBounds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.ibatis.session.RowBounds cannot be cast to com.github.pagehelper.PageRowBounds
         //
         verifyException("com.github.pagehelper.dialect.AbstractRowBoundsDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      informixRowBoundsDialect0.setProperties((Properties) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      Object object0 = new Object();
      boolean boolean0 = informixRowBoundsDialect0.afterCount(Integer.MAX_VALUE, object0, pageRowBounds0);
      assertTrue(boolean0);
      assertEquals(2147483647L, (long)pageRowBounds0.getTotal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlServerRowBoundsDialect sqlServerRowBoundsDialect0 = new SqlServerRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, Integer.MAX_VALUE);
      boolean boolean0 = sqlServerRowBoundsDialect0.afterCount(0, pageRowBounds0, pageRowBounds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      Boolean boolean0 = new Boolean(true);
      pageRowBounds0.setCount(boolean0);
      boolean boolean1 = informixRowBoundsDialect0.beforeCount((MappedStatement) null, pageRowBounds0, pageRowBounds0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds((-13), (-13));
      Boolean boolean0 = new Boolean(false);
      pageRowBounds0.setCount(boolean0);
      boolean boolean1 = informixRowBoundsDialect0.beforeCount((MappedStatement) null, pageRowBounds0, pageRowBounds0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      boolean boolean0 = informixRowBoundsDialect0.beforeCount((MappedStatement) null, (Object) null, pageRowBounds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      PageRowBounds pageRowBounds0 = new PageRowBounds(Integer.MAX_VALUE, 0);
      boolean boolean0 = informixRowBoundsDialect0.beforeCount((MappedStatement) null, pageRowBounds0, rowBounds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      boolean boolean0 = informixRowBoundsDialect0.skip((MappedStatement) null, (Object) null, rowBounds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      boolean boolean0 = informixRowBoundsDialect0.skip((MappedStatement) null, (Object) null, pageRowBounds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      Object object0 = new Object();
      HsqldbRowBoundsDialect hsqldbRowBoundsDialect0 = new HsqldbRowBoundsDialect();
      boolean boolean0 = hsqldbRowBoundsDialect0.beforePage((MappedStatement) null, object0, pageRowBounds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      informixRowBoundsDialect0.afterAll();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SqlServerRowBoundsDialect sqlServerRowBoundsDialect0 = new SqlServerRowBoundsDialect();
      Properties properties0 = new Properties();
      sqlServerRowBoundsDialect0.setProperties(properties0);
      PageRowBounds pageRowBounds0 = new PageRowBounds(2017, 2017);
      Object[] objectArray0 = new Object[0];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      // Undeclared exception!
      try { 
        sqlServerRowBoundsDialect0.getPageSql("8!:Nb2w?[^8", (RowBounds) pageRowBounds0, cacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u652F\u6301\u8BE5SQL\u8F6C\u6362\u4E3A\u5206\u9875\u67E5\u8BE2!
         //
         verifyException("com.github.pagehelper.parser.SqlServerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Db2RowBoundsDialect db2RowBoundsDialect0 = new Db2RowBoundsDialect();
      CacheKey cacheKey0 = new CacheKey();
      Object object0 = db2RowBoundsDialect0.processParameterObject((MappedStatement) null, "wzrgexd-K(y\"4+|9", (BoundSql) null, cacheKey0);
      assertEquals("wzrgexd-K(y\"4+|9", object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InformixRowBoundsDialect informixRowBoundsDialect0 = new InformixRowBoundsDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, 0);
      CacheKey cacheKey0 = new CacheKey();
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool();
      Environment environment0 = new Environment("net.sf.jsqlparser.statement.select.Fetch", transactionFactory0, jDBCPool0);
      Configuration configuration0 = new Configuration(environment0);
      LinkedList<ParameterMapping> linkedList0 = new LinkedList<ParameterMapping>();
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Object object0 = informixRowBoundsDialect0.afterPage(linkedList0, localDate0, pageRowBounds0);
      BoundSql boundSql0 = new BoundSql(configuration0, "net.sf.jsqlparser.statement.select.Fetch", linkedList0, object0);
      String string0 = informixRowBoundsDialect0.getPageSql((MappedStatement) null, boundSql0, (Object) null, (RowBounds) pageRowBounds0, cacheKey0);
      assertEquals("SELECT  * FROM ( net.sf.jsqlparser.statement.select.Fetch ) TEMP_T", string0);
  }
}
