/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:32:27 GMT 2019
 */

package com.github.pagehelper.dialect.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.SqlServerDialect;
import com.github.pagehelper.dialect.replace.RegexWithNolockReplaceSql;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlServerDialect_ESTest extends SqlServerDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Configuration configuration0 = new Configuration();
      CacheKey cacheKey0 = new CacheKey();
      Page<String> page0 = new Page<String>(855, 855);
      BoundSql boundSql0 = new BoundSql(configuration0, (String) null, (List<ParameterMapping>) null, cacheKey0);
      Object object0 = sqlServerDialect0.processPageParameter((MappedStatement) null, (Map<String, Object>) null, page0, boundSql0, cacheKey0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      // Undeclared exception!
      try { 
        sqlServerDialect0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Page<Object> page0 = new Page<Object>(604, (-672), false);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql((String) null, (Page) page0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Page<String> page0 = new Page<String>();
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql("q~rn@pBjk=r0ecnO", page0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Properties properties0 = new Properties();
      sqlServerDialect0.setProperties(properties0);
      Page<Object> page0 = new Page<Object>(0, 4306);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql((String) null, page0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>((-650), (-111), false);
      RegexWithNolockReplaceSql regexWithNolockReplaceSql0 = new RegexWithNolockReplaceSql();
      BoundSql boundSql0 = new BoundSql(configuration0, (String) null, page0, regexWithNolockReplaceSql0);
      RowBounds rowBounds0 = new RowBounds((-111), (-111));
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, boundSql0, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>((-650), (-111), false);
      RegexWithNolockReplaceSql regexWithNolockReplaceSql0 = new RegexWithNolockReplaceSql();
      BoundSql boundSql0 = new BoundSql(configuration0, (String) null, page0, regexWithNolockReplaceSql0);
      RowBounds rowBounds0 = new RowBounds((-111), (-111));
      Properties properties0 = configuration0.getVariables();
      sqlServerDialect0.setProperties(properties0);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, boundSql0, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Properties properties0 = new Properties();
      sqlServerDialect0.setProperties(properties0);
      int[] intArray0 = new int[6];
      Page<ParameterMapping> page0 = new Page<ParameterMapping>(intArray0, true);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql("JbAPI)O3{F", page0, cacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u652F\u6301\u8BE5SQL\u8F6C\u6362\u4E3A\u5206\u9875\u67E5\u8BE2!
         //
         verifyException("com.github.pagehelper.parser.SqlServerParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Properties properties0 = new Properties();
      sqlServerDialect0.setProperties(properties0);
      Page<Integer> page0 = new Page<Integer>(1200, 1200, true);
      Configuration configuration0 = new Configuration();
      int[] intArray0 = new int[6];
      Page<ParameterMapping> page1 = new Page<ParameterMapping>(intArray0, true);
      BoundSql boundSql0 = new BoundSql(configuration0, "JbAPI)O3{F", page1, "");
      CacheKey cacheKey0 = new CacheKey();
      RowBounds rowBounds0 = new RowBounds();
      String string0 = sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, page1, rowBounds0, cacheKey0);
      assertEquals("select count(0) from (JbAPI)O3{F) tmp_count", string0);
      
      String string1 = sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, page0, rowBounds0, cacheKey0);
      assertNotNull(string1);
      assertEquals("select count(0) from (JbAPI)O3{F) tmp_count", string1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Integer> page0 = new Page<Integer>(1200, 1200, true);
      Configuration configuration0 = new Configuration();
      int[] intArray0 = new int[6];
      Page<ParameterMapping> page1 = new Page<ParameterMapping>(intArray0, true);
      BoundSql boundSql0 = new BoundSql(configuration0, "JbAPI)O3{F", page1, "");
      CacheKey cacheKey0 = new CacheKey();
      HashMap hashMap1 = (HashMap)sqlServerDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
      assertTrue(hashMap1.isEmpty());
  }
}
