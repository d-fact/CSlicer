/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:39:49 GMT 2019
 */

package com.github.pagehelper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.util.MSUtils;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.executor.keygen.KeyGenerator;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMap;
import org.apache.ibatis.mapping.ResultSetType;
import org.apache.ibatis.mapping.SqlCommandType;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.mapping.StatementType;
import org.apache.ibatis.scripting.LanguageDriver;
import org.apache.ibatis.session.Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MSUtils_ESTest extends MSUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "").when(configuration0).getLogPrefix();
      doReturn(true).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[14];
      ParameterMap parameterMap0 = mock(ParameterMap.class, new ViolatedAssumptionAnswer());
      StatementType statementType0 = StatementType.STATEMENT;
      Integer integer0 = new Integer((-1));
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((Cache) null).when(mappedStatement0).getCache();
      doReturn(configuration0, configuration1).when(mappedStatement0).getConfiguration();
      doReturn((Integer) null).when(mappedStatement0).getFetchSize();
      doReturn("").when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray0).when(mappedStatement0).getKeyProperties();
      doReturn(parameterMap0).when(mappedStatement0).getParameterMap();
      doReturn("").when(mappedStatement0).getResource();
      doReturn((ResultSetType) null).when(mappedStatement0).getResultSetType();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      doReturn(integer0).when(mappedStatement0).getTimeout();
      doReturn(false).when(mappedStatement0).isFlushCacheRequired();
      doReturn(false).when(mappedStatement0).isUseCache();
      MappedStatement mappedStatement1 = MSUtils.newCountMappedStatement(mappedStatement0, "");
      assertEquals("", mappedStatement1.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      LanguageDriver languageDriver1 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "Ycu%/>PdFtcTt r\"qq").when(configuration0).getLogPrefix();
      doReturn(true).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Cache cache0 = mock(Cache.class, new ViolatedAssumptionAnswer());
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2006);
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'$lP`sY # 7=['(Dkk3";
      stringArray0[1] = null;
      stringArray0[2] = "Key Generators collection";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      ParameterMap parameterMap0 = mock(ParameterMap.class, new ViolatedAssumptionAnswer());
      ResultSetType resultSetType0 = ResultSetType.SCROLL_INSENSITIVE;
      StatementType statementType0 = StatementType.CALLABLE;
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(mappedStatement0).getConfiguration();
      doReturn(integer0).when(mappedStatement0).getFetchSize();
      doReturn("'$lP`sY # 7=['(Dkk3").when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) null).when(mappedStatement0).getKeyProperties();
      doReturn("'$lP`sY # 7=['(Dkk3").when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.util.MSUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      LanguageDriver languageDriver1 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0, languageDriver1).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "", "", "#:{}xQ`JraV}|RF %").when(configuration0).getLogPrefix();
      doReturn(false, false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      ParameterMap parameterMap0 = mock(ParameterMap.class, new ViolatedAssumptionAnswer());
      StatementType statementType0 = StatementType.PREPARED;
      Integer integer0 = new Integer((-1));
      Cache cache0 = mock(Cache.class, new ViolatedAssumptionAnswer());
      ResultSetType resultSetType0 = ResultSetType.SCROLL_SENSITIVE;
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(cache0).when(mappedStatement0).getCache();
      doReturn(configuration0, configuration1).when(mappedStatement0).getConfiguration();
      doReturn((Integer) null).when(mappedStatement0).getFetchSize();
      doReturn("").when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray0).when(mappedStatement0).getKeyProperties();
      doReturn(parameterMap0).when(mappedStatement0).getParameterMap();
      doReturn("").when(mappedStatement0).getResource();
      doReturn(resultSetType0).when(mappedStatement0).getResultSetType();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      doReturn(integer0).when(mappedStatement0).getTimeout();
      doReturn(true).when(mappedStatement0).isFlushCacheRequired();
      doReturn(true).when(mappedStatement0).isUseCache();
      MappedStatement mappedStatement1 = MSUtils.newCountMappedStatement(mappedStatement0, "_COUNT");
      MappedStatement mappedStatement2 = MSUtils.newCountMappedStatement(mappedStatement1);
      assertEquals("_COUNT_COUNT", mappedStatement2.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(configuration0).getLogPrefix();
      doReturn(false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.SELECT;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(mappedStatement0).getConfiguration();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error creating logger for logger null.  Cause: java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "").when(configuration0).getLogPrefix();
      doReturn(false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      StatementType statementType0 = StatementType.PREPARED;
      String[] stringArray1 = new String[0];
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(mappedStatement0).getConfiguration();
      doReturn((Integer) null).when(mappedStatement0).getFetchSize();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray1).when(mappedStatement0).getKeyProperties();
      doReturn("").when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0, "_COUNT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement((MappedStatement) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.util.MSUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "Ycu%/>PdFtcTt r\"qq").when(configuration0).getLogPrefix();
      doReturn(true).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2006);
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      StatementType statementType0 = StatementType.CALLABLE;
      String[] stringArray1 = new String[0];
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(mappedStatement0).getConfiguration();
      doReturn(integer0).when(mappedStatement0).getFetchSize();
      doReturn("'$lP`sY # 7=['(Dkk3").when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray1).when(mappedStatement0).getKeyProperties();
      doReturn("'$lP`sY # 7=['(Dkk3").when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", " 5+MA-<").when(configuration0).getLogPrefix();
      doReturn(false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      ParameterMap parameterMap0 = mock(ParameterMap.class, new ViolatedAssumptionAnswer());
      StatementType statementType0 = StatementType.PREPARED;
      Integer integer0 = new Integer((-1));
      String[] stringArray1 = new String[0];
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0, configuration1).when(mappedStatement0).getConfiguration();
      doReturn((Integer) null).when(mappedStatement0).getFetchSize();
      doReturn((String) null).when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray1).when(mappedStatement0).getKeyProperties();
      doReturn(parameterMap0).when(mappedStatement0).getParameterMap();
      doReturn("").when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      doReturn(integer0).when(mappedStatement0).getTimeout();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0, "_COUNT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ResultMaps must have an id
         //
         verifyException("org.apache.ibatis.mapping.ResultMap$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn((LanguageDriver) null).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn((String) null).when(configuration0).getLogPrefix();
      doReturn(false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0, (Configuration) null).when(mappedStatement0).getConfiguration();
      doReturn((Integer) null).when(mappedStatement0).getFetchSize();
      doReturn((String) null).when(mappedStatement0).getId();
      doReturn((KeyGenerator) null).when(mappedStatement0).getKeyGenerator();
      doReturn((String[]) null).when(mappedStatement0).getKeyProperties();
      doReturn((ParameterMap) null).when(mappedStatement0).getParameterMap();
      doReturn((String) null).when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn((SqlSource) null).when(mappedStatement0).getSqlSource();
      doReturn((StatementType) null).when(mappedStatement0).getStatementType();
      doReturn((Integer) null).when(mappedStatement0).getTimeout();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ResultMaps must have an id
         //
         verifyException("org.apache.ibatis.mapping.ResultMap$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("", "Ycu%/>PdFtcTt r\"qq").when(configuration0).getLogPrefix();
      doReturn(true).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2006);
      KeyGenerator keyGenerator0 = mock(KeyGenerator.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      StatementType statementType0 = StatementType.CALLABLE;
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0, (Configuration) null).when(mappedStatement0).getConfiguration();
      doReturn(integer0).when(mappedStatement0).getFetchSize();
      doReturn("'$lP`sY # 7=['(Dkk3", (String) null).when(mappedStatement0).getId();
      doReturn(keyGenerator0).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray0).when(mappedStatement0).getKeyProperties();
      doReturn((ParameterMap) null).when(mappedStatement0).getParameterMap();
      doReturn("'$lP`sY # 7=['(Dkk3").when(mappedStatement0).getResource();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      doReturn((Integer) null).when(mappedStatement0).getTimeout();
      // Undeclared exception!
      try { 
        MSUtils.newCountMappedStatement(mappedStatement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ResultMaps must have an id
         //
         verifyException("org.apache.ibatis.mapping.ResultMap$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LanguageDriver languageDriver0 = mock(LanguageDriver.class, new ViolatedAssumptionAnswer());
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn(languageDriver0).when(configuration0).getDefaultScriptingLanguageInstance();
      doReturn("s[0Vq!9Bp", "s[0Vq!9Bp").when(configuration0).getLogPrefix();
      doReturn(false).when(configuration0).isUseGeneratedKeys();
      SqlCommandType sqlCommandType0 = SqlCommandType.UPDATE;
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      Cache cache0 = mock(Cache.class, new ViolatedAssumptionAnswer());
      Configuration configuration1 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(29);
      String[] stringArray0 = new String[0];
      ParameterMap parameterMap0 = mock(ParameterMap.class, new ViolatedAssumptionAnswer());
      ResultSetType resultSetType0 = ResultSetType.FORWARD_ONLY;
      StatementType statementType0 = StatementType.STATEMENT;
      MappedStatement mappedStatement0 = mock(MappedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(cache0).when(mappedStatement0).getCache();
      doReturn(configuration0, configuration1).when(mappedStatement0).getConfiguration();
      doReturn(integer0).when(mappedStatement0).getFetchSize();
      doReturn("s[0Vq!9Bp", "s[0Vq!9Bp").when(mappedStatement0).getId();
      doReturn((KeyGenerator) null).when(mappedStatement0).getKeyGenerator();
      doReturn((Object) stringArray0, (Object) stringArray0).when(mappedStatement0).getKeyProperties();
      doReturn(parameterMap0).when(mappedStatement0).getParameterMap();
      doReturn("s[0Vq!9Bp").when(mappedStatement0).getResource();
      doReturn(resultSetType0).when(mappedStatement0).getResultSetType();
      doReturn(sqlCommandType0).when(mappedStatement0).getSqlCommandType();
      doReturn(sqlSource0).when(mappedStatement0).getSqlSource();
      doReturn(statementType0).when(mappedStatement0).getStatementType();
      doReturn(integer0).when(mappedStatement0).getTimeout();
      doReturn(false).when(mappedStatement0).isFlushCacheRequired();
      doReturn(false).when(mappedStatement0).isUseCache();
      MappedStatement mappedStatement1 = MSUtils.newCountMappedStatement(mappedStatement0);
      assertEquals("s[0Vq!9Bp_COUNT", mappedStatement1.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MSUtils mSUtils0 = new MSUtils();
  }
}
