/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:51:37 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.ISelect;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.github.pagehelper.PageSerializable;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageSerializable_ESTest extends PageSerializable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, 0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageSerializable<String> pageSerializable0 = page0.doSelectPageSerializable(iSelect0);
      pageSerializable0.setList((List<String>) null);
      assertEquals(0L, pageSerializable0.getTotal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      LinkedList<Page<Object>> linkedList0 = new LinkedList<Page<Object>>();
      linkedList0.add(page0);
      PageSerializable<Page<Object>> pageSerializable0 = PageSerializable.of((List<Page<Object>>) linkedList0);
      assertEquals(1L, pageSerializable0.getTotal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page<Page<String>> page0 = new Page<Page<String>>(0, 0, true);
      page0.setTotal((-1793L));
      PageSerializable<Page<String>> pageSerializable0 = PageSerializable.of((List<Page<String>>) page0);
      assertEquals((-1793L), pageSerializable0.getTotal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageSerializable<Object> pageSerializable0 = new PageSerializable<Object>();
      pageSerializable0.total = 118L;
      long long0 = pageSerializable0.getTotal();
      assertEquals(118L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageSerializable<Integer> pageSerializable0 = new PageSerializable<Integer>();
      pageSerializable0.setTotal((-1038L));
      long long0 = pageSerializable0.getTotal();
      assertEquals((-1038L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      Object object0 = new Object();
      page0.add(object0);
      PageSerializable<Object> pageSerializable0 = PageSerializable.of((List<Object>) page0);
      List<Object> list0 = pageSerializable0.getList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        PageSerializable.of((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      Page<String> page0 = new Page<String>(intArray0, false);
      PageSerializable<String> pageSerializable0 = new PageSerializable<String>(page0);
      List<String> list0 = pageSerializable0.getList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageSerializable<Object> pageSerializable0 = null;
      try {
        pageSerializable0 = new PageSerializable<Object>((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Integer> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      page0.add((Object) pageInfo0);
      // Undeclared exception!
      try { 
        pageInfo0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PageSerializable<String> pageSerializable0 = PageSerializable.of((List<String>) linkedList0);
      long long0 = pageSerializable0.getTotal();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PageSerializable<String> pageSerializable0 = PageSerializable.of((List<String>) linkedList0);
      String string0 = pageSerializable0.toString();
      assertEquals("PageSerializable{total=0, list=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageSerializable<Integer> pageSerializable0 = new PageSerializable<Integer>();
      List<Integer> list0 = pageSerializable0.getList();
      assertNull(list0);
  }
}
