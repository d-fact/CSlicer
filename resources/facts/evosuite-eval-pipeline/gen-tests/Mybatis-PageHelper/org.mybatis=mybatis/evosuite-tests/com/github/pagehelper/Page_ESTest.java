/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:28:38 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.ISelect;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      assertEquals(0, page0.getPageNum());
      
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page1 = page0.setReasonable(boolean0);
      page1.pageNum(0);
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.setPageNum(93);
      Boolean boolean0 = Boolean.TRUE;
      Page<String> page1 = page0.setPageSize(93);
      Page<String> page2 = page1.setReasonable(boolean0);
      page2.setTotal(405L);
      assertEquals(93, page0.getPageSize());
      assertEquals(465, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page1 = page0.reasonable(boolean0);
      page1.setPageSize(125);
      page1.setTotal(2172);
      assertEquals(125, page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      assertEquals((-1), page0.getPageNum());
      
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page1 = page0.reasonable(boolean0);
      page1.setPageNum((-261));
      assertEquals((-1), page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      page0.toPageSerializable();
      assertEquals(758L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      page0.setTotal((-1));
      page0.toPageSerializable();
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2606, 2606, false);
      page0.setTotal(2606);
      page0.toPageInfo();
      assertEquals(2606L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      page0.setTotal((-1));
      page0.toPageInfo();
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2606, 2606, false);
      Page<Object> page1 = page0.setPages(2606);
      page1.toPageInfo();
      assertEquals(2606, page0.getPages());
      assertEquals(2606, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.setReasonable(boolean0);
      page1.toPageInfo();
      assertEquals(1, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setPages(93);
      page0.toPageInfo();
      assertEquals(93, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1726), (-1726));
      Page<Object> page1 = page0.setPages(1266);
      page1.toPageInfo();
      assertEquals(1266, page0.getPages());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Integer integer0 = new Integer(1434);
      page0.add(integer0);
      PageInfo<Integer> pageInfo0 = page0.toPageInfo();
      assertTrue(page0.isCount());
      assertEquals(1, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getPageNum());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      page0.setStartRow((-2395));
      assertEquals((-2395), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.add((Object) page0);
      page0.setStartRow(1309);
      assertEquals(1309, page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, (-1));
      page0.setTotal(2537);
      page0.setStartRow((-1));
      assertEquals(2537L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>((-1), 1420);
      page0.setPages(676);
      page0.setStartRow((-4299));
      assertEquals((-4299), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Object> page0 = new Page<Object>(intArray0, false);
      page0.setPages((-1381));
      page0.setStartRow(1146);
      assertEquals((-1381), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1381);
      Page<Object> page0 = new Page<Object>(intArray0, false);
      page0.setStartRow(1146);
      assertEquals(1146, page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>((-1), 47);
      Integer integer0 = new Integer((-1));
      page0.add(integer0);
      assertEquals((-1), page0.getPageNum());
      
      Boolean boolean0 = Boolean.TRUE;
      page0.setReasonable(boolean0);
      assertEquals(1, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      Boolean boolean0 = Boolean.TRUE;
      page0.setReasonable(boolean0);
      assertEquals(758L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setTotal((-2673L));
      Boolean boolean0 = Boolean.valueOf(true);
      page0.setReasonable(boolean0);
      assertEquals((-2673L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Page<Object> page0 = new Page<Object>(93, 93);
      Page<Object> page1 = page0.setReasonable(boolean0);
      assertTrue(page1.isCount());
      assertEquals(8649, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1726), (-1726));
      page0.setPages(1266);
      page0.setReasonable((Boolean) null);
      assertEquals(1266, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 1, false);
      Boolean boolean0 = Boolean.FALSE;
      Page<Object> page1 = page0.setPages((-1044));
      page1.setReasonable(boolean0);
      assertEquals((-1044), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-568), (-568), true);
      page0.setOrderByOnly(true);
      page0.setPages(0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) null);
      page0.setPages(125);
      assertEquals(125, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[3];
      Page<Object> page0 = new Page<Object>(intArray0, true);
      page0.setTotal(2396);
      page0.setPages(2396);
      assertEquals(2396L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 1, false);
      page0.setTotal((-1044));
      page0.setPages((-1044));
      assertEquals((-1044L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(3262, (-1), true);
      Page<Object> page1 = page0.setPages(0);
      assertEquals((-3262), page1.getEndRow());
      assertEquals(0, page1.getPages());
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      Boolean boolean0 = new Boolean(true);
      page0.setPageSizeZero(boolean0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Boolean boolean0 = Boolean.valueOf(false);
      page0.add((Object) boolean0);
      Page<Object> page1 = page0.setPageSizeZero((Boolean) null);
      assertTrue(page1.isCount());
      assertEquals(1, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 3225);
      Page<Object> page1 = page0.setOrderBy((String) null);
      page0.setTotal(1703L);
      page1.setPageSizeZero((Boolean) null);
      assertEquals(1703L, page1.getTotal());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      Boolean boolean0 = Boolean.TRUE;
      page0.setTotal((-261));
      page0.setPageSizeZero(boolean0);
      assertEquals((-261L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Object> page0 = new Page<Object>(intArray0, false);
      Page<Object> page1 = page0.setPages((-1381));
      page1.setPageSizeZero((Boolean) null);
      assertEquals((-1381), page0.getPages());
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      int[] intArray0 = new int[5];
      intArray0[1] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      Page<Object> page1 = page0.setPageSizeZero(boolean0);
      assertEquals((-2395), page1.getEndRow());
      assertTrue(page1.isCount());
      assertEquals((-2395), page1.getPageSize());
      assertEquals(1, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      Page<Object> page1 = page0.setPageSizeZero(boolean0);
      assertEquals(125, page1.getEndRow());
      assertEquals(0, page1.getPageNum());
      assertFalse(page1.isCount());
      assertEquals(0, page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      page0.setPageSize(0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1484, 0, true);
      page0.add((Object) page0);
      page0.setPageSize(758);
      assertEquals(758, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(740);
      page0.setPageSize(209);
      assertEquals(740L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, false);
      page0.setTotal((-1L));
      page0.setPageSize(829);
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.setStartRow((-1));
      page1.setPageSize((-261));
      assertEquals((-261), page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[8];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      Page<Integer> page1 = page0.setPages((-1790));
      page1.setPageSize((-1790));
      assertEquals((-1790), page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1309;
      Page<String> page0 = new Page<String>(intArray0, false);
      page0.setPageSize(1418);
      assertEquals(1418, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      page0.setPageNum(0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.add("Page{count=");
      page0.setPageNum(93);
      assertEquals(93, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Page<String> page0 = new Page<String>(2366, (-3067), true);
      page0.setTotal(781);
      page0.setPageNum(125);
      assertEquals(781L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      page0.setTotal((-568L));
      page0.setPageNum((-261));
      assertEquals((-568L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setPages(345);
      page0.setPageNum(345);
      assertEquals(345, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Object> page0 = new Page<Object>(intArray0, false);
      Page<Object> page1 = page0.setPages((-1381));
      page1.setPageNum((-1381));
      assertEquals((-1381), page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(93, 93);
      Page<Object> page1 = page0.setPageNum(93);
      assertEquals(93, page1.getPageNum());
      assertTrue(page1.isCount());
      assertEquals(8649, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2606, 2606, false);
      page0.setOrderByOnly(true);
      page0.setOrderBy("true");
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.add("Iwko:?,_,L=29:W");
      Page<String> page1 = page0.setOrderBy("Iwko:?,_,L=29:W");
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      page0.setOrderBy("");
      assertEquals(758L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, false);
      page0.setTotal((-1L));
      page0.setOrderBy("null");
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.setPages((-3150));
      page1.setOrderBy(", total=");
      assertEquals((-3150), page0.getPages());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      Page<Object> page1 = page0.setOrderBy("Page{count=true, pageNum=0, pageSize=0, startRow=-2395, endRow=0, total=0, pages=0, reasonable=null, pageSizeZero=true}[]");
      assertEquals(0, page1.getPageNum());
      assertTrue(page1.isCount());
      assertEquals(0, page1.getPageSize());
      assertEquals((-2395), page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2606, 2606, false);
      page0.setOrderByOnly(true);
      page0.setEndRow(2606);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) null);
      page0.setEndRow((-2368));
      assertEquals((-2368), page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      page0.setEndRow(758);
      assertEquals(758L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, false);
      page0.setTotal((-1L));
      page0.setEndRow((-1));
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      assertEquals(125, page0.getEndRow());
      
      page0.setEndRow(0);
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      Page<Object> page1 = page0.setEndRow((-2395));
      assertEquals(0, page1.getPageNum());
      assertTrue(page1.isCount());
      assertEquals((-2395), page0.getEndRow());
      assertEquals(0, page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[9];
      Page<String> page0 = new Page<String>(intArray0, true);
      Page<String> page1 = page0.setPages((-1232));
      page1.setEndRow(125);
      assertEquals(125, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      Page<Object> page1 = page0.setEndRow((-2395));
      assertEquals((-2395), page0.getEndRow());
      assertTrue(page1.isCount());
      assertEquals((-2395), page1.getPageSize());
      assertEquals(1, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Page<String> page0 = new Page<String>((-3728), 2963, false);
      page0.setEndRow((-1607));
      assertEquals((-1607), page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<String> page0 = new Page<String>(intArray0, true);
      page0.setOrderByOnly(true);
      page0.setCount(true);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) intArray0[1]);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      assertFalse(page1.isCount());
      
      page1.setCount(true);
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      page0.setCount(false);
      assertEquals(758L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setTotal((-1015));
      page0.setCount(true);
      assertEquals((-1015L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setStartRow((-1015));
      page0.setCount(true);
      assertEquals((-1015), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1726), (-1726));
      page0.setPages(1266);
      page0.setCount(true);
      assertEquals(1266, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Page<String> page1 = page0.setOrderBy("~G?L%Syh2PNQglWs'");
      page0.setPages((-357));
      page1.setCount(true);
      assertEquals((-357), page1.getPages());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.pageSize(49);
      page1.setCount(true);
      assertEquals(49, page0.getPageSize());
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Page<String> page1 = page0.setOrderBy("~G?L%Syh2PNQglWs'");
      page0.pageNum((-683));
      page1.setCount(true);
      assertEquals((-683), page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      Page<Integer> page0 = new Page<Integer>(intArray0, true);
      assertTrue(page0.isCount());
      
      page0.setCount(false);
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Boolean boolean0 = Boolean.valueOf(", pageSizeZero=");
      page0.setOrderByOnly(true);
      page0.reasonable(boolean0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Integer integer0 = new Integer((-1422));
      page0.add(integer0);
      Page<Integer> page1 = page0.reasonable((Boolean) null);
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      Boolean boolean0 = Boolean.valueOf(", pageNum=");
      page0.setTotal(8);
      page0.reasonable(boolean0);
      assertEquals(8L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(118, (-115), true);
      page0.setTotal((-1578L));
      page0.reasonable((Boolean) null);
      assertEquals((-1578L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Page<Object> page1 = page0.reasonable((Boolean) null);
      assertTrue(page1.isCount());
      assertEquals(1, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Page<Integer> page1 = page0.setPages(93);
      Boolean boolean0 = Boolean.FALSE;
      page1.reasonable(boolean0);
      assertEquals(93, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1943, 1943, false);
      Page<Object> page1 = page0.setPages((-404));
      page1.reasonable((Boolean) null);
      assertEquals((-404), page0.getPages());
      assertEquals(3775249, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.pageNum(2206);
      Boolean boolean0 = Boolean.valueOf(", pageSizeZero=");
      page1.pageSize(2321);
      page0.reasonable(boolean0);
      assertEquals(2206, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), true);
      Boolean boolean0 = Boolean.valueOf(true);
      page0.setOrderByOnly(true);
      page0.pageSizeZero(boolean0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      int[] intArray0 = new int[13];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) null);
      Page<Integer> page1 = page0.pageSizeZero(boolean0);
      assertEquals(0, page1.getEndRow());
      assertFalse(page1.isCount());
      assertEquals(0, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Page<String> page0 = new Page<String>(0, 0, false);
      page0.setTotal(93);
      page0.pageSizeZero(boolean0);
      assertEquals(93L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setPages(93);
      Boolean boolean0 = Boolean.FALSE;
      page0.pageSizeZero(boolean0);
      assertEquals(93, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      Boolean boolean0 = Boolean.TRUE;
      page0.setPageSize(125);
      page0.setTotal((-261));
      page0.pageSizeZero(boolean0);
      assertEquals((-261L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Page<Object> page0 = new Page<Object>(93, 93);
      Page<Object> page1 = page0.pageSizeZero(boolean0);
      assertTrue(page1.isCount());
      assertEquals(8649, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(", pageSizeZero=");
      Page<String> page0 = new Page<String>(Integer.MAX_VALUE, 2206, true);
      Page<String> page1 = page0.pageSizeZero(boolean0);
      assertTrue(page1.isCount());
      assertEquals((-2206), page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      page0.pageSize(2963);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) null);
      Page<Integer> page1 = page0.pageSize(0);
      assertEquals(0, page1.getPageNum());
      assertEquals(0, page1.getPageSize());
      assertEquals(0, page0.getEndRow());
      assertFalse(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, 125, true);
      page0.setTotal(853L);
      page0.pageSize(3505);
      assertEquals(853L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-568), (-568), true);
      page0.setTotal((-568));
      page0.pageSize((-568));
      assertEquals((-568L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setPages((-1253));
      page0.pageSize(0);
      assertEquals((-1253), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      page0.pageNum(2963);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      page1.add((Object) page0);
      page0.pageNum(845);
      assertEquals(845, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, true);
      page0.setTotal(845);
      page0.pageNum(0);
      assertEquals(845L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setTotal((-2673L));
      page0.pageNum((-147));
      assertEquals((-2673L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Page<String> page0 = new Page<String>(Integer.MAX_VALUE, 2206, true);
      page0.pageNum((-1));
      assertEquals((-1), page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setPages(93);
      page0.pageNum(0);
      assertEquals(93, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<String> page0 = new Page<String>(intArray0, false);
      Page<String> page1 = page0.setPages((-2400));
      page1.pageNum((-1311));
      assertEquals((-2400), page0.getPages());
      assertEquals((-1311), page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1438, 1438);
      Page<Integer> page1 = page0.pageNum(1438);
      assertTrue(page1.isCount());
      assertEquals(1438, page1.getPageNum());
      assertEquals(2067844, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Integer> page0 = new Page<Integer>(intArray0, true);
      page0.setOrderByOnly(true);
      boolean boolean0 = page0.isOrderByOnly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Boolean boolean0 = Boolean.FALSE;
      Page<Object> page1 = page0.count(boolean0);
      boolean boolean1 = page1.isCount();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, (-1));
      page0.setTotal(2537);
      long long0 = page0.getTotal();
      assertEquals(2537L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      page0.setTotal((-261));
      long long0 = page0.getTotal();
      assertEquals((-261L), long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(528, 528);
      int int0 = page0.getStartRow();
      assertTrue(page0.isCount());
      assertEquals(278256, int0);
      assertEquals(278784, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      Page<Object> page0 = new Page<Object>(intArray0, false);
      int int0 = page0.getStartRow();
      assertFalse(page0.isCount());
      assertEquals((-1), page0.getEndRow());
      assertEquals((-1), int0);
      assertEquals(0, page0.getPageSize());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Page<String> page0 = new Page<String>(2366, (-3067), true);
      page0.add("");
      page0.getResult();
      assertEquals((-7256522), page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      assertEquals((-1), page0.getPageNum());
      
      Boolean boolean0 = Boolean.TRUE;
      page0.reasonable(boolean0);
      page0.getReasonable();
      assertEquals(1, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Boolean boolean0 = Boolean.valueOf(false);
      Page<Object> page1 = page0.setReasonable(boolean0);
      page1.getReasonable();
      assertEquals(0, page1.getPageNum());
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.setPages(345);
      int int0 = page1.getPages();
      assertEquals(345, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(3424, 8, false);
      page0.setPages((-1253));
      int int0 = page0.getPages();
      assertEquals((-1253), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      int[] intArray0 = new int[5];
      Page<Object> page0 = new Page<Object>(intArray0, true);
      page0.setPageSizeZero(boolean0);
      Boolean boolean1 = page0.getPageSizeZero();
      assertTrue(page0.isCount());
      assertNotNull(boolean1);
      assertEquals(0, page0.getEndRow());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      Page<String> page0 = new Page<String>(0, 0);
      page0.setPageSizeZero(boolean0);
      Boolean boolean1 = page0.getPageSizeZero();
      assertNotNull(boolean1);
      assertTrue(page0.isCount());
      assertEquals(0, page0.getPageSize());
      assertEquals(0, page0.getEndRow());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.pageSize(125);
      int int0 = page0.getPageSize();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1866);
      Page<Integer> page0 = new Page<Integer>(intArray0, true);
      int int0 = page0.getPageSize();
      assertEquals((-1866), page0.getEndRow());
      assertEquals((-1866), int0);
      assertTrue(page0.isCount());
      assertEquals(1, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      int int0 = page0.getPageNum();
      assertEquals(0, int0);
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Object> page0 = new Page<Object>(intArray0, false);
      Page<Object> page1 = page0.setPageNum((-1381));
      int int0 = page1.getPageNum();
      assertEquals((-1381), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.setOrderBy("AG'$_pw/t1St?");
      page0.getOrderBy();
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.setOrderBy("");
      page1.getOrderBy();
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1662, 1662);
      int int0 = page0.getEndRow();
      assertTrue(page0.isCount());
      assertEquals(2762244, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1212, (-1622));
      int int0 = page0.getEndRow();
      assertEquals((-1965864), int0);
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, (-546));
      Page<Integer> page1 = page0.countColumn("F2$M:[v@(F..?CX4|L");
      page1.getCountColumn();
      assertEquals(0, page1.getPageNum());
      assertEquals((-546), page1.getPageSize());
      assertEquals(0, page1.getEndRow());
      assertTrue(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1376), (-949));
      page0.countColumn("");
      page0.getCountColumn();
      assertEquals(0, page0.getEndRow());
      assertEquals((-949), page0.getPageSize());
      assertTrue(page0.isCount());
      assertEquals((-1376), page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2606, 2606, false);
      page0.setTotal(2606);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPageSerializable(iSelect0);
      assertEquals(2606L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      page0.setTotal((-1545L));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPageSerializable(iSelect0);
      assertEquals((-1545L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      Boolean boolean0 = new Boolean(true);
      Page<Object> page1 = page0.reasonable(boolean0);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page1.doSelectPageInfo(iSelect0);
      assertEquals(1, page0.getPageNum());
      assertEquals(0, page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(740);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPageInfo(iSelect0);
      assertEquals(740L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.pageNum(3202);
      Page<String> page2 = page1.setPages(26);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page2.doSelectPageInfo(iSelect0);
      assertEquals(3202, page0.getPageNum());
      assertEquals(26, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      Page<String> page1 = page0.pageNum((-1832));
      page0.setTotal((-1));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page1.doSelectPageInfo(iSelect0);
      assertEquals((-1L), page0.getTotal());
      assertEquals((-1), page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.setPages(26);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page1.doSelectPageInfo(iSelect0);
      assertEquals(26, page0.getPages());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      page0.add((Integer) null);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<String> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      assertFalse(page0.isCount());
      assertEquals(0, page0.getEndRow());
      assertEquals(0, pageInfo0.getPageSize());
      assertEquals(0, pageInfo0.getPageNum());
      assertEquals(1, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Boolean boolean0 = Boolean.valueOf(false);
      page0.add((Object) boolean0);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Object> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      assertEquals(1, page0.getEndRow());
      assertEquals(Integer.MAX_VALUE, pageInfo0.getPageSize());
      assertTrue(page0.isCount());
      assertEquals((-2147483645), pageInfo0.getStartRow());
      assertEquals(0, page0.getPages());
      assertEquals(Integer.MAX_VALUE, pageInfo0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<String> page0 = new Page<String>(intArray0, true);
      page0.setTotal(845);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPage(iSelect0);
      assertEquals(845L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      page0.setTotal((-261));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPage(iSelect0);
      assertEquals((-261L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[2];
      Page<String> page0 = new Page<String>(intArray0, false);
      Page<String> page1 = page0.setPages(1);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page1.doSelectPage(iSelect0);
      assertEquals(1, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Page<Integer> page1 = page0.setPages((-357));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page1.doSelectPage(iSelect0);
      assertEquals((-357), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      assertTrue(page1.isCount());
      assertEquals((-2395), page1.getEndRow());
      assertEquals((-2395), page1.getPageSize());
      assertEquals(1, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 1122;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      assertFalse(page1.isCount());
      assertEquals(1122, page1.getPageSize());
      assertEquals(1, page1.getPageNum());
      assertEquals(1122, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      assertEquals(0, page1.getPageNum());
      assertEquals(0, page1.getPageSize());
      assertEquals(125, page1.getEndRow());
      assertFalse(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2395);
      Page<Object> page0 = new Page<Object>(intArray0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      Page<Object> page1 = page0.doSelectPage(iSelect0);
      assertEquals(0, page1.getPageSize());
      assertEquals(0, page1.getPageNum());
      assertTrue(page1.isCount());
      assertEquals((-2395), page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(1477, 0, true);
      page0.setTotal(758);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      long long0 = page0.doCount(iSelect0);
      assertEquals(758L, page0.getTotal());
      assertEquals(758L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>((-3869), 1122);
      page0.setTotal((-3869));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      long long0 = page0.doCount(iSelect0);
      assertEquals((-3869L), page0.getTotal());
      assertEquals((-3869L), long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      page0.setOrderByOnly(true);
      page0.countColumn("");
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, (-546));
      Integer integer0 = new Integer(0);
      page0.add(integer0);
      Page<Integer> page1 = page0.countColumn("F2$M:[v@(F..?CX4|L");
      assertEquals(0, page1.getEndRow());
      assertTrue(page1.isCount());
      assertEquals((-546), page1.getPageSize());
      assertEquals(0, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, 125, true);
      page0.setTotal(853L);
      page0.countColumn(", total=");
      assertEquals(853L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1774;
      intArray0[1] = 1774;
      Page<String> page0 = new Page<String>(intArray0, false);
      Page<String> page1 = page0.pageSize((-1458));
      page1.countColumn("");
      assertEquals((-1458), page0.getPageSize());
      assertEquals((-2916), page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Page<Integer> page1 = page0.setPages((-743));
      page1.countColumn("ATeS$N,g");
      assertEquals((-743), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1438, 1438);
      Page<Integer> page1 = page0.countColumn("rah0M(E5fLZybz");
      assertTrue(page1.isCount());
      assertEquals(2067844, page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.setOrderByOnly(true);
      Boolean boolean0 = new Boolean(true);
      page0.count(boolean0);
      assertTrue(page0.isOrderByOnly());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      page0.add(0, (Object) page0);
      assertTrue(page0.isCount());
      
      Boolean boolean0 = Boolean.valueOf("aCAvuL?fs0\"qFHph9");
      page0.count(boolean0);
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      Boolean boolean0 = Boolean.valueOf(", pageNum=");
      page0.setTotal(8);
      page0.count(boolean0);
      assertEquals(8L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      Boolean boolean0 = Boolean.TRUE;
      page0.setTotal((-568L));
      page0.count(boolean0);
      assertEquals((-568L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      Boolean boolean0 = new Boolean(true);
      page0.setStartRow((-2395));
      page0.count(boolean0);
      assertEquals((-2395), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.setPages(183);
      Boolean boolean0 = new Boolean(false);
      page0.count(boolean0);
      assertEquals(183, page0.getPages());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), 0, false);
      page0.setPages((-1));
      Boolean boolean0 = Boolean.FALSE;
      page0.count(boolean0);
      assertEquals((-1), page0.getPages());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      int[] intArray0 = new int[6];
      intArray0[1] = 1122;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      assertFalse(page0.isCount());
      
      Page<Object> page1 = page0.count(boolean0);
      assertEquals(1122, page1.getPageSize());
      assertEquals(1122, page1.getEndRow());
      assertEquals(1, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      Page<Object> page0 = new Page<Object>(intArray0, false);
      assertFalse(page0.isCount());
      
      Page<Object> page1 = page0.count(boolean0);
      assertEquals(125, page1.getEndRow());
      assertEquals(0, page1.getPageNum());
      assertEquals(0, page1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1), false);
      Boolean boolean0 = Boolean.TRUE;
      page0.reasonable(boolean0);
      assertFalse(page0.isCount());
      
      page0.count(boolean0);
      assertEquals(0, page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), 0, false);
      page0.setPages((-1));
      // Undeclared exception!
      try { 
        page0.toPageInfo();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      // Undeclared exception!
      try { 
        page0.doSelectPageSerializable((ISelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      // Undeclared exception!
      try { 
        page0.doSelectPageInfo((ISelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>((-2113), (-1094));
      page0.setPages((-2113));
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        page0.doSelectPageInfo(iSelect0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(2806, 2806, true);
      // Undeclared exception!
      try { 
        page0.doSelectPage((ISelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(5, 5, false);
      // Undeclared exception!
      try { 
        page0.doCount((ISelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-2137), (-2137), false);
      // Undeclared exception!
      try { 
        page0.count((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Page<Object> page0 = null;
      try {
        page0 = new Page<Object>((int[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[1];
      Page<Integer> page0 = null;
      try {
        page0 = new Page<Integer>(intArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.github.pagehelper.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1318), 144, false);
      page0.getTotal();
      assertEquals(144, page0.getPageSize());
      assertEquals(0, page0.getEndRow());
      assertEquals((-1318), page0.getPageNum());
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      int int0 = page0.getPageSize();
      assertEquals(0, int0);
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(315, Integer.MAX_VALUE);
      int int0 = page0.getPageNum();
      assertEquals(315, int0);
      assertTrue(page0.isCount());
      assertEquals(2147483333, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<String> page0 = new Page<String>(intArray0, true);
      int int0 = page0.getPages();
      assertEquals(0, int0);
      assertEquals(0, page0.getEndRow());
      assertTrue(page0.isCount());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      assertEquals(0, page0.getPageNum());
      
      Boolean boolean0 = Boolean.TRUE;
      page0.setReasonable(boolean0);
      page0.pageNum(1);
      assertEquals(1, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Page<String> page0 = new Page<String>(1, (-1932));
      Boolean boolean0 = new Boolean(true);
      page0.setReasonable(boolean0);
      Page<String> page1 = page0.pageNum((-626));
      assertEquals((-1932), page0.getEndRow());
      assertTrue(page1.isCount());
      assertEquals(1, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      int[] intArray0 = new int[6];
      Page<Object> page0 = new Page<Object>(intArray0, false);
      page0.reasonable(boolean0);
      page0.pageNum((-3869));
      assertEquals((-3869), page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page1 = page0.reasonable(boolean0);
      page1.setPageSize(125);
      page1.setTotal((-261));
      assertEquals((-261L), page1.getTotal());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      Boolean boolean0 = Boolean.TRUE;
      Page<Object> page1 = page0.reasonable(boolean0);
      Page<Object> page2 = page1.setPageSize(125);
      page2.setTotal(125);
      assertEquals(125, page1.getPageSize());
      assertEquals((-1), page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Page<Integer> page0 = new Page<Integer>(0, (-1));
      Page<Integer> page1 = page0.setReasonable(boolean0);
      page1.setTotal(2537);
      assertEquals(2537L, page1.getTotal());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      Boolean boolean0 = Boolean.TRUE;
      page0.reasonable(boolean0);
      page0.setTotal(125);
      assertEquals(125L, page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      page0.setTotal((-1));
      page0.countColumn(", pageNum=");
      assertEquals((-1L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1), (-1));
      page0.setTotal((-261));
      page0.setStartRow(125);
      assertEquals((-261L), page0.getTotal());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Page<String> page0 = new Page<String>(1, (-1932));
      Boolean boolean0 = new Boolean(true);
      page0.setReasonable(boolean0);
      page0.setPageNum(125);
      assertEquals(125, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Page<String> page0 = new Page<String>(2366, (-3067), true);
      Boolean boolean0 = new Boolean("");
      Page<String> page1 = page0.setReasonable(boolean0);
      page1.setPageNum(125);
      assertEquals(125, page1.getPageNum());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Page<Integer> page0 = new Page<Integer>();
      Page<Integer> page1 = page0.setReasonable(boolean0);
      page1.setPageNum(0);
      assertEquals(1, page0.getPageNum());
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-1561);
      Page<String> page0 = new Page<String>(intArray0, true);
      Page<String> page1 = page0.setCount(true);
      assertEquals((-1561), page1.getPageSize());
      assertTrue(page0.isCount());
      assertEquals(1, page1.getPageNum());
      assertEquals((-1561), page1.getEndRow());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = Integer.MAX_VALUE;
      Page<Integer> page0 = new Page<Integer>(intArray0, false);
      assertEquals(0, page0.getPageSize());
      assertEquals(Integer.MAX_VALUE, page0.getEndRow());
      assertFalse(page0.isCount());
      assertTrue(page0.getPageSizeZero());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[9];
      Page<Object> page0 = new Page<Object>(intArray0, true);
      page0.isOrderByOnly();
      assertTrue(page0.isCount());
      assertEquals(0, page0.getEndRow());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1, Integer.MAX_VALUE);
      assertTrue(page0.isCount());
      
      page0.setCount(false);
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[9];
      Page<Object> page0 = new Page<Object>(intArray0, true);
      int int0 = page0.getStartRow();
      assertTrue(page0.isCount());
      assertEquals(0, int0);
      assertEquals(0, page0.getEndRow());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(2893, (-1155), false);
      page0.getCountColumn();
      assertEquals((-3341415), page0.getEndRow());
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      Page<String> page1 = page0.setOrderBy((String) null);
      assertEquals(0, page1.getEndRow());
      assertEquals((-1), page1.getPageNum());
      assertEquals((-1), page1.getPageSize());
      assertFalse(page1.isCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      boolean boolean0 = page0.isCount();
      assertEquals(0, page0.getPageNum());
      assertEquals(0, page0.getPageSize());
      assertTrue(boolean0);
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      page0.getPageSizeZero();
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doCount(iSelect0);
      assertTrue(page0.isCount());
      assertEquals(0, page0.getEndRow());
      assertEquals(0, page0.getPageNum());
      assertEquals(0, page0.getPageSize());
      assertTrue(page0.getPageSizeZero());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<String> page0 = new Page<String>(intArray0, true);
      page0.setCountColumn("'O%G`;DaTtbq)l");
      assertEquals(0, page0.getPageNum());
      assertTrue(page0.isCount());
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0);
      page0.getReasonable();
      assertEquals(0, page0.getPageNum());
      assertEquals(0, page0.getPageSize());
      assertTrue(page0.isCount());
      assertEquals(0, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Page<Object> page0 = new Page<Object>();
      int int0 = page0.getEndRow();
      assertTrue(page0.isCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(781, 0, false);
      page0.setEndRow(443);
      page0.setStartRow(0);
      assertEquals(443, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[4];
      Page<String> page0 = new Page<String>(intArray0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      page0.doSelectPageSerializable(iSelect0);
      assertEquals(0, page0.getPageNum());
      assertEquals(0, page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>();
      String string0 = page0.toString();
      assertEquals("Page{count=true, pageNum=0, pageSize=0, startRow=0, endRow=0, total=0, pages=0, reasonable=null, pageSizeZero=null}[]", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.getResult();
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.close();
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(781, 0, false);
      page0.toPageSerializable();
      assertFalse(page0.isCount());
      assertEquals(0, page0.getEndRow());
      assertEquals(781, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1), (-1), false);
      page0.getOrderBy();
      assertEquals(0, page0.getEndRow());
      assertFalse(page0.isCount());
      assertEquals((-1), page0.getPageSize());
      assertEquals((-1), page0.getPageNum());
  }
}
