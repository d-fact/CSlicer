/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:26:40 GMT 2019
 */

package com.github.pagehelper.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.page.PageParams;
import java.io.Reader;
import java.io.StringReader;
import java.util.Properties;
import org.apache.ibatis.session.RowBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageParams_ESTest extends PageParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isPageSizeZero());
      
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("supportMethodsArguments");
      properties0.load((Reader) stringReader0);
      pageParams0.setProperties(properties0);
      assertEquals("0", pageParams0.getCountColumn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isRowBoundsWithCount());
      
      Properties properties0 = new Properties();
      properties0.setProperty("reasonable", "HB@|dSb4-'");
      pageParams0.setProperties(properties0);
      assertEquals("0", pageParams0.getCountColumn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(pageParams0.isOffsetAsPageNum());
      
      Properties properties0 = new Properties();
      properties0.put("offsetAsPageNum", "offsetAsPageNum");
      pageParams0.setProperties(properties0);
      assertEquals("0", pageParams0.getCountColumn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isSupportMethodsArguments());
      
      pageParams0.supportMethodsArguments = true;
      boolean boolean0 = pageParams0.isSupportMethodsArguments();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isRowBoundsWithCount());
      
      pageParams0.rowBoundsWithCount = true;
      boolean boolean0 = pageParams0.isRowBoundsWithCount();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isReasonable());
      
      pageParams0.reasonable = true;
      boolean boolean0 = pageParams0.isReasonable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isPageSizeZero());
      
      pageParams0.pageSizeZero = true;
      boolean boolean0 = pageParams0.isPageSizeZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertFalse(pageParams0.isOffsetAsPageNum());
      
      pageParams0.offsetAsPageNum = true;
      boolean boolean0 = pageParams0.isOffsetAsPageNum();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertEquals("0", pageParams0.getCountColumn());
      
      pageParams0.countColumn = null;
      pageParams0.getCountColumn();
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isPageSizeZero());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      assertEquals("0", pageParams0.getCountColumn());
      
      pageParams0.countColumn = "";
      pageParams0.getCountColumn();
      assertFalse(pageParams0.isPageSizeZero());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      // Undeclared exception!
      try { 
        pageParams0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.page.PageParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      RowBounds rowBounds0 = new RowBounds((-2783), (-2783));
      pageParams0.getPage((Object) null, rowBounds0);
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isReasonable());
      assertEquals("0", pageParams0.getCountColumn());
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isRowBoundsWithCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      boolean boolean0 = pageParams0.isReasonable();
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertEquals("0", pageParams0.getCountColumn());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      boolean boolean0 = pageParams0.isPageSizeZero();
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(boolean0);
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertEquals("0", pageParams0.getCountColumn());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      boolean boolean0 = pageParams0.isRowBoundsWithCount();
      assertEquals("0", pageParams0.getCountColumn());
      assertFalse(boolean0);
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isOffsetAsPageNum());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      boolean boolean0 = pageParams0.isSupportMethodsArguments();
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(boolean0);
      assertEquals("0", pageParams0.getCountColumn());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      String string0 = pageParams0.getCountColumn();
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(pageParams0.isOffsetAsPageNum());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isPageSizeZero());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PageParams pageParams0 = new PageParams();
      boolean boolean0 = pageParams0.isOffsetAsPageNum();
      assertFalse(pageParams0.isPageSizeZero());
      assertFalse(pageParams0.isRowBoundsWithCount());
      assertFalse(boolean0);
      assertFalse(pageParams0.isReasonable());
      assertFalse(pageParams0.isSupportMethodsArguments());
      assertEquals("0", pageParams0.getCountColumn());
  }
}
