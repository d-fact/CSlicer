/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:33:59 GMT 2019
 */

package com.github.pagehelper.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageRowBounds;
import com.github.pagehelper.dialect.helper.Db2Dialect;
import com.github.pagehelper.dialect.helper.HsqldbDialect;
import com.github.pagehelper.dialect.helper.InformixDialect;
import com.github.pagehelper.dialect.helper.MySqlDialect;
import com.github.pagehelper.dialect.helper.SqlServer2012Dialect;
import com.github.pagehelper.dialect.helper.SqlServerDialect;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractHelperDialect_ESTest extends AbstractHelperDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheKey cacheKey0 = new CacheKey();
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Page<String> page0 = new Page<String>();
      String string0 = sqlServer2012Dialect0.getPageSql("", page0, cacheKey0);
      assertFalse(page0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<ChronoLocalDate> page0 = new Page<ChronoLocalDate>(1549, (-1), false);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      String string0 = hsqldbDialect0.getPageSql("", (Page) page0, (CacheKey) nullCacheKey0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InformixDialect informixDialect0 = new InformixDialect();
      RowBounds rowBounds0 = new RowBounds();
      Object object0 = informixDialect0.afterPage((List) null, (Object) null, rowBounds0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      CacheKey cacheKey0 = new CacheKey();
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.processParameterObject((MappedStatement) null, hsqldbDialect0, (BoundSql) null, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<String> page0 = new Page<String>();
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, (BoundSql) null, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.HsqldbDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>((-660), (-1901), false);
      BoundSql boundSql0 = new BoundSql(configuration0, "71", page0, (Object) null);
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, (-1901));
      // Undeclared exception!
      try { 
        hsqldbDialect0.getPageSql((MappedStatement) null, boundSql0, (Object) page0, (RowBounds) pageRowBounds0, (CacheKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>((-2303), (-2303), true);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServerDialect0.getPageSql("1T4cjX=ph4>rXZ[Gs", (Page) page0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InformixDialect informixDialect0 = new InformixDialect();
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        informixDialect0.getPageSql("%tkdaf(D<:|Nb/K", (Page) null, (CacheKey) nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.InformixDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>((-660), (-1901), false);
      BoundSql boundSql0 = new BoundSql(configuration0, "Nb-uULP)}|ZA", page0, page0);
      RowBounds rowBounds0 = new RowBounds();
      // Undeclared exception!
      try { 
        hsqldbDialect0.getCountSql((MappedStatement) null, boundSql0, page0, rowBounds0, (CacheKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      // Undeclared exception!
      try { 
        hsqldbDialect0.beforePage((MappedStatement) null, (Object) null, (RowBounds) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      // Undeclared exception!
      try { 
        hsqldbDialect0.beforeCount((MappedStatement) null, (Object) null, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MySqlDialect mySqlDialect0 = new MySqlDialect();
      PageRowBounds pageRowBounds0 = new PageRowBounds(0, (-1530));
      // Undeclared exception!
      try { 
        mySqlDialect0.afterCount(0L, pageRowBounds0.NO_ROW_OFFSET, (RowBounds) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<ParameterMapping> page0 = new Page<ParameterMapping>();
      Boolean boolean0 = new Boolean("#fQv(MYUhV#3c");
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool();
      Environment environment0 = new Environment("X.I", transactionFactory0, jDBCPool0);
      Configuration configuration0 = new Configuration(environment0);
      BoundSql boundSql0 = new BoundSql(configuration0, "f6.e", page0, boolean0);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        sqlServer2012Dialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.AbstractHelperDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      RowBounds rowBounds0 = new RowBounds();
      LinkedList linkedList1 = (LinkedList)sqlServerDialect0.afterPage(linkedList0, linkedList0, rowBounds0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      boolean boolean0 = sqlServer2012Dialect0.skip((MappedStatement) null, "#fQv(MYUhV#3c", rowBounds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Page<ParameterMapping> page0 = sqlServer2012Dialect0.getLocalPage();
      assertNull(page0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Db2Dialect db2Dialect0 = new Db2Dialect();
      Properties properties0 = new Properties();
      db2Dialect0.setProperties(properties0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      sqlServerDialect0.afterAll();
  }
}
