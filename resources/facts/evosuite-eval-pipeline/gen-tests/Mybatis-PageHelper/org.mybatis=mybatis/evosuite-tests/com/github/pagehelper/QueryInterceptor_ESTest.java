/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 10:04:52 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.QueryInterceptor;
import java.lang.reflect.Method;
import java.util.Properties;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.session.RowBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryInterceptor_ESTest extends QueryInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      // Undeclared exception!
      try { 
        queryInterceptor0.plugin((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.plugin.Plugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      Object[] objectArray0 = new Object[6];
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      Invocation invocation0 = new Invocation(rowBounds0, (Method) null, objectArray0);
      try { 
        queryInterceptor0.intercept(invocation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.ibatis.session.RowBounds cannot be cast to org.apache.ibatis.executor.Executor
         //
         verifyException("com.github.pagehelper.QueryInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      Object[] objectArray0 = new Object[5];
      Invocation invocation0 = new Invocation(objectArray0[0], (Method) null, objectArray0);
      try { 
        queryInterceptor0.intercept(invocation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.github.pagehelper.QueryInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Invocation invocation0 = new Invocation(objectArray0[0], (Method) null, objectArray0);
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      try { 
        queryInterceptor0.intercept(invocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.QueryInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[13];
      Invocation invocation0 = new Invocation(objectArray0[0], (Method) null, objectArray0);
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      try { 
        queryInterceptor0.intercept(invocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.QueryInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      Properties properties0 = new Properties();
      queryInterceptor0.setProperties(properties0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QueryInterceptor queryInterceptor0 = new QueryInterceptor();
      Integer integer0 = new Integer(573);
      Object object0 = queryInterceptor0.plugin(integer0);
      assertEquals(573, object0);
  }
}
