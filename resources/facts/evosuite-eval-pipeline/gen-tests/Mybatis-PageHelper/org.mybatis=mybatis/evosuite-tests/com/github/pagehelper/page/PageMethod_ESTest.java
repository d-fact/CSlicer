/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:49:01 GMT 2019
 */

package com.github.pagehelper.page;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.ISelect;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.page.PageMethod;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.apache.ibatis.builder.MapperBuilderAssistant;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.ResultSetType;
import org.apache.ibatis.mapping.SqlCommandType;
import org.apache.ibatis.mapping.SqlSource;
import org.apache.ibatis.mapping.StatementType;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.apache.ibatis.type.TypeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.hsqldb.SessionInterface;
import org.hsqldb.jdbc.JDBCConnection;
import org.hsqldb.jdbc.JDBCPool;
import org.hsqldb.navigator.RowSetNavigatorClient;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageMethod_ESTest extends PageMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      PageMethod.setStaticProperties(properties0);
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Page<String> page0 = PageMethod.startPage((-1066), (-1066), false, boolean0, boolean0);
      assertEquals((-1066), page0.getPageNum());
      assertFalse(page0.isCount());
      assertEquals((-1066), page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Page<ParameterMapping> page0 = PageMethod.startPage(2282, 2282, true, (Boolean) null, boolean0);
      assertTrue(page0.isCount());
      assertEquals(5205242, page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Page<MockFileInputStream> page0 = PageMethod.startPage(2474, (-2019), false, boolean0, boolean0);
      assertFalse(page0.isCount());
      assertEquals((-4992987), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page<Object> page0 = PageMethod.startPage((-1005), (-1005), false);
      assertEquals((-1005), page0.getPageNum());
      assertEquals((-1005), page0.getPageSize());
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page<ParameterMapping> page0 = PageMethod.startPage(0, 0, true);
      assertEquals(0, page0.getPageNum());
      assertEquals(0, page0.getPageSize());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page<ForkJoinTask<Page<ParameterMapping>>> page0 = PageMethod.startPage(606, (-623), true);
      assertEquals((-377538), page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page<Object> page0 = PageMethod.startPage((-1296), (-1296), "TYPE_JAR_USAGE");
      assertEquals((-1296), page0.getPageSize());
      assertEquals((-1296), page0.getPageNum());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page<Integer> page0 = PageMethod.startPage(0, 0);
      assertTrue(page0.isCount());
      assertEquals(0, page0.getPageSize());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page<Object> page0 = PageMethod.startPage((-1356), (-1356));
      assertEquals((-1356), page0.getPageNum());
      assertTrue(page0.isCount());
      assertEquals((-1356), page0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page<ParameterMapping> page0 = PageMethod.startPage(2033, 2);
      assertTrue(page0.isCount());
      assertEquals(4066, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page<Integer> page0 = PageMethod.startPage(1737, (-777));
      assertTrue(page0.isCount());
      assertEquals((-1348872), page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page<ForkJoinTask<MockFileInputStream>> page0 = PageMethod.offsetPage((-4078), 0, false);
      assertEquals((-4078), page0.getEndRow());
      assertFalse(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page<Cache> page0 = PageMethod.offsetPage(4657, (-1296), true);
      assertEquals((-2), page0.getPageNum());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page<Page<Object>> page0 = PageMethod.offsetPage(0, 0, true);
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page<Page<Delayed>> page0 = PageMethod.offsetPage(630, 1067, true);
      assertTrue(page0.isCount());
      assertEquals(1697, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page<Delayed> page0 = PageMethod.offsetPage((-2995), 418);
      assertEquals((-2577), page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page<Delayed> page0 = PageMethod.offsetPage(0, 0);
      assertEquals(0, page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      PageMethod.getLocalPage();
      RowSetNavigatorClient rowSetNavigatorClient0 = new RowSetNavigatorClient();
      rowSetNavigatorClient0.getSession();
      JDBCConnection jDBCConnection0 = new JDBCConnection((SessionInterface) null);
      jDBCConnection0.getClientInfo();
      // Undeclared exception!
      try { 
        pageHelper0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.page.PageParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Page<Integer> page0 = PageMethod.getLocalPage();
      PageMethod.startPage(0, 0, "");
      PageHelper pageHelper0 = new PageHelper();
      RowBounds rowBounds0 = new RowBounds();
      // Undeclared exception!
      try { 
        pageHelper0.beforeCount((MappedStatement) null, page0, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      long long0 = PageMethod.count(iSelect0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        PageMethod.startPage((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u65E0\u6CD5\u83B7\u53D6\u5206\u9875\u67E5\u8BE2\u53C2\u6570!
         //
         verifyException("com.github.pagehelper.util.PageObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Page<TypeHandler<Object>> page0 = PageMethod.startPage(5537, 5537, "=\"@vQ~;^XwT24");
      // Undeclared exception!
      try { 
        PageMethod.startPage((Object) page0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.reflection.wrapper.CollectionWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Page<Object> page0 = PageMethod.startPage(0, 170, false, boolean0, boolean0);
      assertFalse(page0.isCount());
      assertEquals(170, page0.getPageSize());
      assertEquals(0, page0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "true";
      PageMethod.orderBy("true");
      Page<InputStream> page0 = new Page<InputStream>();
      SqlSource sqlSource0 = mock(SqlSource.class, new ViolatedAssumptionAnswer());
      StatementType statementType0 = StatementType.STATEMENT;
      SqlCommandType sqlCommandType0 = SqlCommandType.SELECT;
      Integer integer0 = new Integer(0);
      Class<InputStream> class0 = InputStream.class;
      String string1 = "";
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool(0);
      Environment environment0 = new Environment("", transactionFactory0, jDBCPool0);
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      Boolean boolean0 = new Boolean(true);
      PageMethod.startPage(1074, 0, true, boolean0, boolean0);
      PageHelper pageHelper0 = new PageHelper();
      Configuration configuration0 = new Configuration(environment0);
      MapperBuilderAssistant mapperBuilderAssistant0 = new MapperBuilderAssistant(configuration0, "J' qZ");
      Integer integer1 = new Integer((-193));
      Integer integer2 = null;
      Class<Object> class1 = Object.class;
      ResultSetType resultSetType0 = ResultSetType.SCROLL_SENSITIVE;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        configuration0.getKeyGenerator("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key Generators collection does not contain value for 
         //
         verifyException("org.apache.ibatis.session.Configuration$StrictMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Page<Integer> page0 = PageMethod.startPage(2380, 20, false);
      assertFalse(page0.isCount());
      assertEquals(47580, page0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Page<TypeHandler<Integer>> page0 = PageMethod.offsetPage(1, (-1903), true);
      assertEquals((-1902), page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Page<Page<ParameterMapping>> page0 = PageMethod.offsetPage(382, 382);
      assertTrue(page0.isCount());
      assertEquals(764, page0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PageMethod.clearPage();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      Page<String> page0 = PageMethod.startPage(4543, (-980), "");
      String string0 = "g{nw*!&nVa?I";
      page0.add("g{nw*!&nVa?I");
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      // Undeclared exception!
      try { 
        pageHelper0.afterPage(page0, "", rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Page<Object> page0 = PageMethod.offsetPage((-1602), (-1602));
      assertEquals((-3204), page0.getEndRow());
      assertTrue(page0.isCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        PageMethod.count((ISelect) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.page.PageMethod", e);
      }
  }
}
