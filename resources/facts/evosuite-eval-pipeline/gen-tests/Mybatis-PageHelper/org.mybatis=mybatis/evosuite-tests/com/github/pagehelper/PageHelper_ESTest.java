/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:30:00 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.page.PageMethod;
import java.util.List;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageHelper_ESTest extends PageHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      MappedStatement mappedStatement0 = null;
      RowBounds rowBounds0 = new RowBounds(963, 0);
      // Undeclared exception!
      try { 
        pageHelper0.skip(mappedStatement0, pageHelper0, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool();
      Environment environment0 = new Environment("", transactionFactory0, jDBCPool0);
      Configuration configuration0 = new Configuration(environment0);
      Properties properties0 = configuration0.getVariables();
      pageHelper0.setProperties(properties0);
      Object object0 = pageHelper0.afterPage((List) null, environment0, (RowBounds) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      // Undeclared exception!
      try { 
        pageHelper0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.page.PageParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      Page<Object> page0 = PageMethod.startPage(2290, (-884), false);
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        pageHelper0.getPageSql("FALSE", (Page) page0, rowBounds0, (CacheKey) nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      RowBounds rowBounds0 = new RowBounds(585, 585);
      // Undeclared exception!
      try { 
        pageHelper0.afterPage((List) null, (Object) null, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      // Undeclared exception!
      try { 
        pageHelper0.afterAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool();
      Environment environment0 = new Environment("", transactionFactory0, jDBCPool0);
      Configuration configuration0 = new Configuration(environment0);
      Properties properties0 = configuration0.getVariables();
      pageHelper0.setProperties(properties0);
      Integer integer0 = new Integer(0);
      pageHelper0.afterAll();
      // Undeclared exception!
      try { 
        configuration0.getKeyGenerator("Boolean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key Generators collection does not contain value for Boolean
         //
         verifyException("org.apache.ibatis.session.Configuration$StrictMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      RowBounds rowBounds0 = new RowBounds(3226, 3226);
      Object[] objectArray0 = new Object[3];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      // Undeclared exception!
      try { 
        pageHelper0.getPageSql((MappedStatement) null, (BoundSql) null, (Object) null, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      RowBounds rowBounds0 = new RowBounds(55, 55);
      // Undeclared exception!
      try { 
        pageHelper0.beforePage((MappedStatement) null, (Object) null, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page0 = PageMethod.offsetPage((-3081), (-3081));
      Object object0 = new Object();
      BoundSql boundSql0 = new BoundSql(configuration0, "?b5dk", page0, object0);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        pageHelper0.processParameterObject((MappedStatement) null, (Object) null, boundSql0, nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      // Undeclared exception!
      try { 
        pageHelper0.beforeCount((MappedStatement) null, (Object) null, rowBounds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      Configuration configuration0 = new Configuration();
      Properties properties0 = configuration0.getVariables();
      pageHelper0.setProperties(properties0);
      Page<String> page0 = new Page<String>(6, 6);
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      Object object0 = pageHelper0.afterPage(page0, "\u5728\u7CFB\u7EDF\u4E2D\u53D1\u73B0\u4E86\u591A\u4E2A\u5206\u9875\u63D2\u4EF6\uFF0C\u8BF7\u68C0\u67E5\u7CFB\u7EDF\u914D\u7F6E!", rowBounds0);
      RowBounds rowBounds1 = new RowBounds(Integer.MAX_VALUE, 0);
      // Undeclared exception!
      try { 
        pageHelper0.afterCount((-3199L), object0, rowBounds1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageHelper pageHelper0 = new PageHelper();
      MappedStatement mappedStatement0 = null;
      RowBounds rowBounds0 = new RowBounds((-2620), (-2620));
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        pageHelper0.getCountSql((MappedStatement) null, (BoundSql) null, mappedStatement0, rowBounds0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }
}
