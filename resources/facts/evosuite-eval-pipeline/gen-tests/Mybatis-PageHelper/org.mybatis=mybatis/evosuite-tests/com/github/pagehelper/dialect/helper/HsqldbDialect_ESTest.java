/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:58:49 GMT 2019
 */

package com.github.pagehelper.dialect.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.HsqldbDialect;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Delayed;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.AutoMappingBehavior;
import org.apache.ibatis.session.Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HsqldbDialect_ESTest extends HsqldbDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<Delayed> page0 = new Page<Delayed>(303, 4045);
      Page<Delayed> page1 = page0.pageSize((-202));
      Object[] objectArray0 = new Object[3];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      String string0 = hsqldbDialect0.getPageSql("", page1, cacheKey0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<String> page0 = new Page<String>();
      page0.pageSize((-1153));
      CacheKey cacheKey0 = new CacheKey();
      String string0 = hsqldbDialect0.getPageSql("", page0, cacheKey0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<String> page0 = new Page<String>(1289, (-1145));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Configuration configuration0 = new Configuration();
      int[] intArray0 = new int[8];
      Page<ParameterMapping> page1 = new Page<ParameterMapping>(intArray0, true);
      Period period0 = Period.ofMonths((-15));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow();
      BoundSql boundSql0 = new BoundSql(configuration0, "p `^y6xlCg8zm+3", page1, chronoLocalDate0);
      CacheKey cacheKey0 = new CacheKey();
      HashMap hashMap1 = (HashMap)hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
      assertEquals(2, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.pageSize((-1153));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Configuration configuration0 = new Configuration();
      int[] intArray0 = new int[7];
      Page<ParameterMapping> page2 = new Page<ParameterMapping>(intArray0, true);
      Period period0 = Period.ofDays((-15));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow();
      BoundSql boundSql0 = new BoundSql(configuration0, "", page2, chronoLocalDate0);
      CacheKey cacheKey0 = new CacheKey();
      HashMap hashMap1 = (HashMap)hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page1, boundSql0, cacheKey0);
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<AutoMappingBehavior> page0 = new Page<AutoMappingBehavior>(0, 2800);
      // Undeclared exception!
      try { 
        hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, (BoundSql) null, nullCacheKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed to update a NullCacheKey instance.
         //
         verifyException("org.apache.ibatis.cache.NullCacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        hsqldbDialect0.getPageSql(");[=U>Yb&_Vo#", (Page) null, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.HsqldbDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<String> page0 = new Page<String>(79, 79, true);
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      String string0 = hsqldbDialect0.getPageSql("DOIz\u0001", (Page) page0, (CacheKey) nullCacheKey0);
      assertEquals("DOIz\u0001 LIMIT ?  OFFSET ? ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      Page<String> page0 = new Page<String>();
      CacheKey cacheKey0 = new CacheKey();
      String string0 = hsqldbDialect0.getPageSql("", page0, cacheKey0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Object> page0 = new Page<Object>();
      Page<Object> page1 = page0.setStartRow(1498);
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page2 = new Page<ParameterMapping>();
      BoundSql boundSql0 = new BoundSql(configuration0, "_9sIvf:xl=", page2, (Object) null);
      CacheKey cacheKey0 = new CacheKey();
      // Undeclared exception!
      try { 
        hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page1, boundSql0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.HsqldbDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheKey cacheKey0 = new CacheKey();
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Object> page0 = new Page<Object>(3292, 3292, false);
      Configuration configuration0 = new Configuration();
      Page<ParameterMapping> page1 = new Page<ParameterMapping>(3292, 3292);
      BoundSql boundSql0 = new BoundSql(configuration0, "org.hsqldb.persist.RowStoreAVLHybrid", page1, page0);
      // Undeclared exception!
      try { 
        hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.HsqldbDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HsqldbDialect hsqldbDialect0 = new HsqldbDialect();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Page<Object> page0 = new Page<Object>();
      Configuration configuration0 = new Configuration();
      BoundSql boundSql0 = new BoundSql(configuration0, (String) null, (List<ParameterMapping>) null, (Object) null);
      CacheKey cacheKey0 = new CacheKey();
      HashMap hashMap1 = (HashMap)hsqldbDialect0.processPageParameter((MappedStatement) null, hashMap0, page0, boundSql0, cacheKey0);
      assertEquals(2, hashMap1.size());
  }
}
