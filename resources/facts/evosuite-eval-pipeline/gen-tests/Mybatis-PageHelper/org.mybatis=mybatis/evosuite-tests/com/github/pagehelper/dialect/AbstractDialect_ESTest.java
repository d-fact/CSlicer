/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:53:57 GMT 2019
 */

package com.github.pagehelper.dialect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.dialect.helper.SqlServer2012Dialect;
import com.github.pagehelper.dialect.helper.SqlServerDialect;
import java.util.List;
import java.util.Properties;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.cache.NullCacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.transaction.TransactionFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDialect_ESTest extends AbstractDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlServer2012Dialect sqlServer2012Dialect0 = new SqlServer2012Dialect();
      Properties properties0 = new Properties();
      sqlServer2012Dialect0.setProperties(properties0);
      TransactionFactory transactionFactory0 = mock(TransactionFactory.class, new ViolatedAssumptionAnswer());
      JDBCPool jDBCPool0 = new JDBCPool();
      Environment environment0 = new Environment("org.hsqldb.lib.LongKeyIntValueHashMap$Values", transactionFactory0, jDBCPool0);
      Configuration configuration0 = new Configuration(environment0);
      BoundSql boundSql0 = new BoundSql(configuration0, "org.hsqldb.lib.LongKeyIntValueHashMap$Values", (List<ParameterMapping>) null, "org.hsqldb.lib.LongKeyIntValueHashMap$Values");
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      Object[] objectArray0 = new Object[0];
      CacheKey cacheKey0 = new CacheKey(objectArray0);
      String string0 = sqlServer2012Dialect0.getCountSql((MappedStatement) null, boundSql0, boundSql0, rowBounds0, cacheKey0);
      assertEquals("select count(0) from (org.hsqldb.lib.LongKeyIntValueHashMap$Values) tmp_count", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlServerDialect sqlServerDialect0 = new SqlServerDialect();
      Configuration configuration0 = new Configuration((Environment) null);
      Page<ParameterMapping> page0 = new Page<ParameterMapping>();
      BoundSql boundSql0 = new BoundSql(configuration0, "", page0, "");
      RowBounds rowBounds0 = RowBounds.DEFAULT;
      NullCacheKey nullCacheKey0 = (NullCacheKey)CacheKey.NULL_CACHE_KEY;
      // Undeclared exception!
      try { 
        sqlServerDialect0.getCountSql((MappedStatement) null, boundSql0, configuration0, rowBounds0, nullCacheKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.dialect.helper.SqlServerDialect", e);
      }
  }
}
