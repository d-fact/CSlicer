/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:50:31 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.ISelect;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageInfo_ESTest extends PageInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1160, 0);
      page0.setPages(125);
      PageInfo<Integer> pageInfo0 = page0.toPageInfo();
      assertFalse(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(118, pageInfo0.getNavigateFirstPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(1159, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getNextPage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) linkedList0, 0);
      assertEquals(1, pageInfo0.getPages());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add(linkedList1);
      PageInfo<LinkedList<String>> pageInfo0 = PageInfo.of((List<LinkedList<String>>) linkedList0, 91);
      assertEquals(0, pageInfo0.getNextPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(91, pageInfo0.getNavigatePages());
      assertEquals(1, pageInfo0.getNavigateLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page<String> page0 = new Page<String>((-1707), (-1707));
      page0.setTotal((-838L));
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0, 103);
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(103, pageInfo0.getNavigatePages());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getStartRow());
      assertTrue(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(348, (-2113), true);
      page0.setPages(981);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) page0, 450);
      assertFalse(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(572, pageInfo0.getNavigateLastPage());
      assertEquals(349, pageInfo0.getNextPage());
      assertEquals(347, pageInfo0.getPrePage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      Page<Page<Object>> page0 = new Page<Page<Object>>(intArray0, true);
      Page<Page<Object>> page1 = page0.setPageNum((-3474));
      page1.setPages(15);
      PageInfo<Page<Object>> pageInfo0 = PageInfo.of((List<Page<Object>>) page0, 2577);
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(2577, pageInfo0.getNavigatePages());
      assertEquals(15, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals((-3473), pageInfo0.getNextPage());
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(1, pageInfo0.getNavigateFirstPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1135, 1135);
      page0.setPages(1135);
      PageInfo<Integer> pageInfo0 = PageInfo.of((List<Integer>) page0, 1135);
      assertEquals(0, pageInfo0.getNextPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(1135, pageInfo0.getNavigatePages());
      assertEquals(1, pageInfo0.getNavigateFirstPage());
      assertEquals(1134, pageInfo0.getPrePage());
      assertEquals(1135, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<Object> page1 = new Page<Object>();
      page1.add((Object) page0);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) page1, 0);
      assertEquals(1, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNavigatePages());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1160, 0);
      Page<Integer> page1 = page0.setStartRow((-3557));
      page1.add((Integer) null);
      PageInfo<Integer> pageInfo0 = PageInfo.of((List<Integer>) page0, 0);
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals((-3556), pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getNavigatePages());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.setTotal((-88));
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(255, 0, true);
      Page<Object> page1 = page0.setPages(255);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) page1);
      assertEquals(254, pageInfo0.getPrePage());
      assertEquals(255, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getNextPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(248, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2004);
      Page<LinkedList<String>> page0 = new Page<LinkedList<String>>(intArray0, true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.add(linkedList0);
      PageInfo<LinkedList<String>> pageInfo0 = PageInfo.of((List<LinkedList<String>>) page0);
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertEquals((-2003), pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      boolean boolean0 = pageInfo0.isIsLastPage();
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-849);
      Page<String> page0 = new Page<String>(intArray0, false);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<LinkedList<Integer>> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      boolean boolean0 = pageInfo0.isIsFirstPage();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page<String> page0 = new Page<String>((-430), 3076, true);
      page0.pageNum(125);
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      boolean boolean0 = pageInfo0.isHasPreviousPage();
      assertEquals(0, pageInfo0.getStartRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(boolean0);
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getPrePage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page<Object> page0 = new Page<Object>((-1087), (-1087), false);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Object> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      boolean boolean0 = pageInfo0.isHasNextPage();
      assertEquals(0, pageInfo0.getNextPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 557, true);
      Object object0 = new Object();
      page0.add(object0);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) page0);
      int int0 = pageInfo0.getStartRow();
      assertEquals(1, int0);
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(1, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page<LinkedList<Object>> page0 = new Page<LinkedList<Object>>(Integer.MAX_VALUE, (-1), false);
      page0.add((LinkedList<Object>) null);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<LinkedList<Object>> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      int int0 = pageInfo0.getStartRow();
      assertEquals((-2147483645), pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getPrePage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals((-2147483645), int0);
      assertTrue(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Page<LinkedList<Object>> page0 = new Page<LinkedList<Object>>(Integer.MAX_VALUE, (-1), false);
      int[] intArray0 = new int[8];
      Page<Object> page1 = new Page<Object>(intArray0, false);
      page1.add((Object) page0);
      PageInfo<Object> pageInfo0 = new PageInfo<Object>(page1);
      int int0 = pageInfo0.getSize();
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(1, int0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(1, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(348, (-2113), true);
      page0.setPages(981);
      PageInfo<Object> pageInfo0 = new PageInfo<Object>(page0);
      int int0 = pageInfo0.getPrePage();
      assertEquals(347, int0);
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(351, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(349, pageInfo0.getNextPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      pageInfo0.setPrePage((-7));
      int int0 = pageInfo0.getPrePage();
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(348, (-2113), true);
      page0.setPages(981);
      PageInfo<Object> pageInfo0 = new PageInfo<Object>(page0);
      int int0 = pageInfo0.getPages();
      assertEquals(347, pageInfo0.getPrePage());
      assertEquals(349, pageInfo0.getNextPage());
      assertEquals(981, int0);
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(351, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      pageInfo0.setPages((-2113));
      int int0 = pageInfo0.getPages();
      assertEquals((-2113), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(0, 689, true);
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>(page0, 416);
      int int0 = pageInfo0.getPageSize();
      assertEquals(689, int0);
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-2621);
      Page<Object> page0 = new Page<Object>(intArray0, false);
      PageInfo<Object> pageInfo0 = PageInfo.of((List<Object>) page0, 0);
      int int0 = pageInfo0.getPageSize();
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals((-2621), int0);
      assertEquals(0, pageInfo0.getNavigatePages());
      assertTrue(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      int int0 = pageInfo0.getPageNum();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, int0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Page<Page<Object>> page0 = new Page<Page<Object>>((-1), (-1));
      PageInfo<Page<Object>> pageInfo0 = new PageInfo<Page<Object>>(page0);
      int int0 = pageInfo0.getPageNum();
      assertEquals((-1), int0);
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Page<String> page0 = new Page<String>(1, 1, false);
      Page<String> page1 = page0.setPages(76);
      PageInfo<String> pageInfo0 = new PageInfo<String>(page1);
      int int0 = pageInfo0.getNextPage();
      assertEquals(2, int0);
      assertFalse(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(8, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(2, 2);
      page0.setPages(2);
      Page<Object> page1 = page0.setPageNum((-2001));
      PageInfo<Object> pageInfo0 = new PageInfo<Object>(page1);
      int int0 = pageInfo0.getNextPage();
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals((-2000), int0);
      assertEquals(2, pageInfo0.getNavigateLastPage());
      assertFalse(pageInfo0.isIsLastPage());
      assertEquals(1, pageInfo0.getNavigateFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getPrePage());
      assertTrue(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PageInfo<String> pageInfo0 = new PageInfo<String>();
      pageInfo0.getNavigatepageNums();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 0);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      int[] intArray0 = new int[5];
      pageInfo0.setNavigatepageNums(intArray0);
      pageInfo0.getNavigatepageNums();
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[3];
      Page<String> page0 = new Page<String>(intArray0, false);
      page0.setPages(93);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      int int0 = pageInfo0.getNavigateLastPage();
      assertEquals(1, pageInfo0.getNextPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(8, int0);
      assertTrue(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      Page<String> page1 = page0.setPages(1);
      PageInfo<String> pageInfo0 = page1.toPageInfo();
      int int0 = pageInfo0.getNavigateFirstPage();
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(1, int0);
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(1, pageInfo0.getNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(1, pageInfo0.getNavigateLastPage());
      assertFalse(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PageInfo<Object> pageInfo0 = new PageInfo<Object>();
      pageInfo0.setNavigateFirstPage((-491));
      int int0 = pageInfo0.getNavigateFirstPage();
      assertEquals((-491), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Page<String> page0 = new Page<String>(1, 1, false);
      page0.add("");
      PageInfo<String> pageInfo0 = new PageInfo<String>(page0);
      int int0 = pageInfo0.getEndRow();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(1, int0);
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(9, 9, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Object> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      pageInfo0.setEndRow((-158));
      int int0 = pageInfo0.getEndRow();
      assertEquals((-158), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        PageInfo.of((List<String>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        PageInfo.of((List<LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(91, 91);
      Page<Integer> page1 = page0.setPages((-1));
      // Undeclared exception!
      try { 
        PageInfo.of((List<Integer>) page1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PageInfo<LinkedList<Object>> pageInfo0 = null;
      try {
        pageInfo0 = new PageInfo<LinkedList<Object>>((List<LinkedList<Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      PageInfo<String> pageInfo0 = null;
      try {
        pageInfo0 = new PageInfo<String>(page0, (-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PageInfo<Object> pageInfo0 = null;
      try {
        pageInfo0 = new PageInfo<Object>((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageSerializable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(348, (-2113), true);
      Page<Object> page1 = page0.setPages((-2113));
      PageInfo<Object> pageInfo0 = null;
      try {
        pageInfo0 = new PageInfo<Object>(page1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-616));
      linkedList0.add(integer0);
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>(linkedList0, 375);
      assertEquals(1, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNextPage());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      page0.add(" ?){C<XKjO7Y]Y:9");
      PageInfo<String> pageInfo0 = new PageInfo<String>(page0, 3816);
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(1, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PageInfo<Object> pageInfo0 = new PageInfo<Object>();
      String string0 = pageInfo0.toString();
      assertEquals("PageInfo{pageNum=0, pageSize=0, size=0, startRow=0, endRow=0, total=0, pages=0, list=null, prePage=0, nextPage=0, isFirstPage=false, isLastPage=false, hasPreviousPage=false, hasNextPage=false, navigatePages=0, navigateFirstPage=0, navigateLastPage=0, navigatepageNums=null}", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 0);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      String string0 = pageInfo0.toString();
      assertEquals("PageInfo{pageNum=0, pageSize=0, size=0, startRow=0, endRow=0, total=0, pages=0, list=Page{count=true, pageNum=0, pageSize=0, startRow=0, endRow=0, total=0, pages=0, reasonable=null, pageSizeZero=null}[], prePage=0, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=0, navigateLastPage=0, navigatepageNums=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[5];
      Page<Integer> page0 = new Page<Integer>(intArray0, true);
      // Undeclared exception!
      try { 
        PageInfo.of((List<Integer>) page0, (-1631));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      PageInfo<LinkedList<Object>> pageInfo0 = PageInfo.of((List<LinkedList<Object>>) linkedList0);
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(1, pageInfo0.getNavigateLastPage());
      assertEquals(0, pageInfo0.getNextPage());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 0);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      int[] intArray0 = new int[5];
      pageInfo0.setNavigatepageNums(intArray0);
      String string0 = pageInfo0.toString();
      assertEquals("PageInfo{pageNum=0, pageSize=0, size=0, startRow=0, endRow=0, total=0, pages=0, list=Page{count=true, pageNum=0, pageSize=0, startRow=0, endRow=0, total=0, pages=0, reasonable=null, pageSizeZero=null}[], prePage=0, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=0, navigateLastPage=0, navigatepageNums=[0, 0, 0, 0, 0]}", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      int int0 = pageInfo0.getSize();
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, int0);
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      assertFalse(pageInfo0.isHasPreviousPage());
      
      pageInfo0.setHasPreviousPage(true);
      assertTrue(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 0);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      pageInfo0.setNavigateLastPage(0);
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertFalse(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Page<String> page0 = new Page<String>((-430), 3076, true);
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      int int0 = pageInfo0.getNavigateFirstPage();
      assertTrue(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, int0);
      assertEquals(0, pageInfo0.getStartRow());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getNextPage());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PageInfo<Object> pageInfo0 = new PageInfo<Object>();
      int int0 = pageInfo0.getEndRow();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, int0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Object> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      int int0 = pageInfo0.getPageSize();
      assertEquals(0, int0);
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Page<String> page0 = new Page<String>(0, 0);
      PageInfo<String> pageInfo0 = PageInfo.of((List<String>) page0);
      assertFalse(pageInfo0.isHasNextPage());
      
      pageInfo0.setHasNextPage(true);
      assertTrue(pageInfo0.isHasNextPage());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PageInfo<String> pageInfo0 = new PageInfo<String>();
      pageInfo0.setNextPage(0);
      assertEquals(0, pageInfo0.getNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Page<LinkedList<Object>> page0 = new Page<LinkedList<Object>>();
      PageInfo<LinkedList<Object>> pageInfo0 = PageInfo.of((List<LinkedList<Object>>) page0);
      int int0 = pageInfo0.getStartRow();
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, int0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      PageInfo<LinkedList<Object>> pageInfo0 = PageInfo.of((List<LinkedList<Object>>) linkedList0);
      int int0 = pageInfo0.getNavigatePages();
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(8, int0);
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Page<String> page0 = new Page<String>((-430), 3076, true);
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      int int0 = pageInfo0.getNavigateLastPage();
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getNextPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, int0);
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isIsLastPage());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      boolean boolean0 = pageInfo0.isHasNextPage();
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(boolean0);
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Page<Page<Object>> page0 = new Page<Page<Object>>();
      PageInfo<Page<Object>> pageInfo0 = PageInfo.of((List<Page<Object>>) page0, 0);
      assertFalse(pageInfo0.isIsFirstPage());
      
      pageInfo0.setIsFirstPage(true);
      assertTrue(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(0, 0, true);
      ISelect iSelect0 = mock(ISelect.class, new ViolatedAssumptionAnswer());
      PageInfo<Object> pageInfo0 = page0.doSelectPageInfo(iSelect0);
      pageInfo0.setPageNum((-108));
      assertEquals((-108), pageInfo0.getPageNum());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Page<String> page0 = new Page<String>(3032, 3032, true);
      PageInfo<String> pageInfo0 = new PageInfo<String>(page0, 0);
      boolean boolean0 = pageInfo0.isIsLastPage();
      assertEquals(0, pageInfo0.getPrePage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertTrue(boolean0);
      assertEquals(0, pageInfo0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      PageInfo<LinkedList<Object>> pageInfo0 = PageInfo.of((List<LinkedList<Object>>) linkedList0);
      pageInfo0.setNavigatePages(0);
      int int0 = pageInfo0.getNavigatePages();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>(linkedList0, 375);
      int int0 = pageInfo0.getNextPage();
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertEquals(0, int0);
      assertTrue(pageInfo0.isIsFirstPage());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getNavigateFirstPage());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Page<String> page0 = new Page<String>((-430), 3076, true);
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      boolean boolean0 = pageInfo0.isHasPreviousPage();
      assertTrue(pageInfo0.isIsLastPage());
      assertFalse(boolean0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNextPage());
      assertEquals(0, pageInfo0.getStartRow());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1135, 1135);
      PageInfo<Integer> pageInfo0 = page0.toPageInfo();
      boolean boolean0 = pageInfo0.isIsFirstPage();
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(boolean0);
      assertTrue(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Page<Object> page0 = new Page<Object>(8, 8, true);
      PageInfo<Object> pageInfo0 = new PageInfo<Object>(page0, 0);
      pageInfo0.setIsLastPage(true);
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PageInfo<Integer> pageInfo0 = new PageInfo<Integer>();
      pageInfo0.setStartRow(0);
      assertFalse(pageInfo0.isIsFirstPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isHasPreviousPage());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Page<Integer> page0 = new Page<Integer>(1135, 1135);
      PageInfo<Integer> pageInfo0 = page0.toPageInfo();
      int int0 = pageInfo0.getPageNum();
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(1135, int0);
      assertTrue(pageInfo0.isHasPreviousPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getPrePage());
      assertEquals(0, pageInfo0.getEndRow());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Page<String> page0 = new Page<String>((-430), 3076, true);
      PageInfo<String> pageInfo0 = page0.toPageInfo();
      int int0 = pageInfo0.getPrePage();
      assertFalse(pageInfo0.isHasPreviousPage());
      assertTrue(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getStartRow());
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, int0);
      assertEquals(0, pageInfo0.getNextPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PageInfo<String> pageInfo0 = new PageInfo<String>(linkedList0, 512);
      int int0 = pageInfo0.getPages();
      assertTrue(pageInfo0.isIsLastPage());
      assertTrue(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, pageInfo0.getNavigateLastPage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PageInfo<Object> pageInfo0 = new PageInfo<Object>();
      pageInfo0.setPageSize(0);
      assertEquals(0, pageInfo0.getPageSize());
      assertFalse(pageInfo0.isIsLastPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertFalse(pageInfo0.isIsFirstPage());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Page<String> page0 = new Page<String>();
      PageInfo<String> pageInfo0 = new PageInfo<String>(page0, 3816);
      int[] intArray0 = pageInfo0.getNavigatepageNums();
      assertTrue(pageInfo0.isIsLastPage());
      assertEquals(0, pageInfo0.getEndRow());
      assertEquals(0, pageInfo0.getStartRow());
      assertFalse(pageInfo0.isIsFirstPage());
      assertFalse(pageInfo0.isHasPreviousPage());
      assertFalse(pageInfo0.isHasNextPage());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PageInfo<Page<String>> pageInfo0 = new PageInfo<Page<String>>();
      pageInfo0.setSize((-430));
      assertEquals((-430), pageInfo0.getSize());
  }
}
