/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Aug 20 09:39:49 GMT 2019
 */

package com.github.pagehelper.util;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class MSUtils_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.github.pagehelper.util.MSUtils"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/gen-tests/Mybatis-PageHelper/org.mybatis=mybatis"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MSUtils_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.ibatis.binding.MapperRegistry",
      "org.apache.ibatis.mapping.ParameterMap$1",
      "org.apache.ibatis.executor.BatchExecutor",
      "com.github.pagehelper.util.MSUtils",
      "org.apache.ibatis.builder.ResultMapResolver",
      "org.apache.ibatis.mapping.ParameterMap$Builder",
      "org.apache.ibatis.transaction.Transaction",
      "org.apache.ibatis.binding.BindingException",
      "org.apache.ibatis.io.JBoss6VFS$VFS",
      "org.apache.ibatis.type.TypeAliasRegistry",
      "org.apache.ibatis.executor.ExecutorException",
      "org.apache.ibatis.executor.resultset.ResultSetHandler",
      "org.apache.ibatis.session.ResultHandler",
      "org.apache.ibatis.builder.annotation.MethodResolver",
      "org.apache.ibatis.exceptions.IbatisException",
      "org.apache.ibatis.io.ResolverUtil$Test",
      "org.apache.ibatis.type.JdbcType",
      "org.apache.ibatis.type.TypeHandlerRegistry",
      "org.apache.ibatis.mapping.SqlSource",
      "org.apache.ibatis.session.AutoMappingUnknownColumnBehavior",
      "org.apache.ibatis.mapping.ParameterMode",
      "org.apache.ibatis.mapping.StatementType",
      "org.apache.ibatis.io.DefaultVFS",
      "org.apache.ibatis.executor.SimpleExecutor",
      "org.apache.ibatis.mapping.MappedStatement$Builder",
      "org.apache.ibatis.logging.Log",
      "org.apache.ibatis.session.Configuration",
      "org.apache.ibatis.cursor.Cursor",
      "org.apache.ibatis.type.TypeException",
      "org.apache.ibatis.session.SqlSession",
      "org.apache.ibatis.mapping.ResultMap$Builder",
      "org.apache.ibatis.session.ResultContext",
      "org.apache.ibatis.mapping.ParameterMap",
      "org.apache.ibatis.reflection.Reflector",
      "org.apache.ibatis.executor.BaseExecutor",
      "org.apache.ibatis.cache.Cache",
      "org.apache.ibatis.transaction.TransactionFactory",
      "org.apache.ibatis.builder.xml.XMLStatementBuilder",
      "org.apache.ibatis.io.JBoss6VFS$VirtualFile",
      "org.apache.ibatis.session.AutoMappingBehavior",
      "org.apache.ibatis.reflection.factory.ObjectFactory",
      "org.apache.ibatis.reflection.wrapper.ObjectWrapper",
      "org.apache.ibatis.scripting.LanguageDriverRegistry",
      "org.apache.ibatis.mapping.SqlCommandType",
      "org.apache.ibatis.executor.loader.ResultLoader",
      "org.apache.ibatis.reflection.ReflectorFactory",
      "org.apache.ibatis.executor.loader.ProxyFactory",
      "org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory",
      "org.apache.ibatis.cache.CacheException",
      "org.apache.ibatis.executor.ReuseExecutor",
      "org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator",
      "org.apache.ibatis.io.VFS",
      "org.apache.ibatis.cache.NullCacheKey",
      "org.apache.ibatis.mapping.ParameterMapping",
      "org.apache.ibatis.io.JBoss6VFS",
      "org.apache.ibatis.mapping.Environment",
      "org.apache.ibatis.builder.BaseBuilder",
      "org.apache.ibatis.logging.LogException",
      "org.apache.ibatis.type.TypeReference",
      "org.apache.ibatis.plugin.Interceptor",
      "org.apache.ibatis.scripting.LanguageDriver",
      "org.apache.ibatis.executor.keygen.NoKeyGenerator",
      "org.apache.ibatis.session.LocalCacheScope",
      "org.apache.ibatis.plugin.Invocation",
      "org.apache.ibatis.mapping.ResultMapping",
      "org.apache.ibatis.parsing.XNode",
      "org.apache.ibatis.executor.loader.ResultLoaderMap",
      "org.apache.ibatis.exceptions.PersistenceException",
      "org.apache.ibatis.logging.slf4j.Slf4jImpl",
      "org.apache.ibatis.logging.slf4j.Slf4jLocationAwareLoggerImpl",
      "org.apache.ibatis.scripting.ScriptingException",
      "org.apache.ibatis.session.RowBounds",
      "org.apache.ibatis.session.TransactionIsolationLevel",
      "org.apache.ibatis.executor.keygen.KeyGenerator",
      "org.apache.ibatis.mapping.BoundSql",
      "org.apache.ibatis.session.SqlSessionException",
      "org.apache.ibatis.type.TypeHandler",
      "org.apache.ibatis.mapping.Discriminator",
      "org.apache.ibatis.reflection.ReflectionException",
      "org.apache.ibatis.executor.Executor",
      "org.apache.ibatis.executor.parameter.ParameterHandler",
      "org.apache.ibatis.mapping.ResultSetType",
      "org.apache.ibatis.logging.LogFactory",
      "org.apache.ibatis.reflection.invoker.Invoker",
      "org.apache.ibatis.reflection.property.PropertyTokenizer",
      "org.apache.ibatis.builder.BuilderException",
      "org.apache.ibatis.mapping.ResultMap",
      "org.apache.ibatis.session.ExecutorType",
      "org.apache.ibatis.executor.statement.StatementHandler",
      "org.apache.ibatis.logging.LogFactory$5",
      "org.apache.ibatis.session.AutoMappingUnknownColumnBehavior$3",
      "org.apache.ibatis.logging.LogFactory$6",
      "org.apache.ibatis.session.AutoMappingUnknownColumnBehavior$1",
      "org.apache.ibatis.session.AutoMappingUnknownColumnBehavior$2",
      "org.apache.ibatis.cache.CacheKey",
      "org.apache.ibatis.mapping.MappedStatement",
      "org.apache.ibatis.builder.CacheRefResolver",
      "org.apache.ibatis.logging.LogFactory$3",
      "org.apache.ibatis.reflection.MetaObject",
      "org.apache.ibatis.logging.LogFactory$4",
      "org.apache.ibatis.logging.LogFactory$1",
      "org.apache.ibatis.logging.LogFactory$2",
      "org.apache.ibatis.executor.BatchExecutorException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.ibatis.cache.Cache", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.executor.keygen.KeyGenerator", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.mapping.MappedStatement", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.mapping.ParameterMap", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.mapping.SqlSource", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.scripting.LanguageDriver", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.ibatis.session.Configuration", false, MSUtils_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MSUtils_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.github.pagehelper.util.MSUtils",
      "org.apache.ibatis.mapping.MappedStatement",
      "org.apache.ibatis.mapping.MappedStatement$Builder",
      "org.apache.ibatis.mapping.StatementType",
      "org.apache.ibatis.mapping.ParameterMap$Builder",
      "org.apache.ibatis.mapping.ParameterMap",
      "org.apache.ibatis.session.Configuration",
      "org.apache.ibatis.executor.keygen.NoKeyGenerator",
      "org.apache.ibatis.logging.LogFactory$1",
      "org.apache.ibatis.logging.slf4j.Slf4jImpl",
      "org.apache.ibatis.logging.slf4j.Slf4jLocationAwareLoggerImpl",
      "org.apache.ibatis.logging.LogFactory$2",
      "org.apache.ibatis.logging.LogFactory$3",
      "org.apache.ibatis.logging.LogFactory$4",
      "org.apache.ibatis.logging.LogFactory$5",
      "org.apache.ibatis.logging.LogFactory$6",
      "org.apache.ibatis.logging.LogFactory",
      "org.apache.ibatis.mapping.ResultMap$Builder",
      "org.apache.ibatis.mapping.ResultMap",
      "org.apache.ibatis.exceptions.IbatisException",
      "org.apache.ibatis.exceptions.PersistenceException",
      "org.apache.ibatis.logging.LogException",
      "org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator",
      "org.apache.ibatis.mapping.BoundSql"
    );
  }
}
