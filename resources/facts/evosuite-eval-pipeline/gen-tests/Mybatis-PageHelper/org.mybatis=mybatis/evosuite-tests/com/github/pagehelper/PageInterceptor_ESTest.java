/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 09:38:40 GMT 2019
 */

package com.github.pagehelper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.pagehelper.PageInterceptor;
import java.lang.reflect.Method;
import java.util.Properties;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.session.Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PageInterceptor_ESTest extends PageInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      // Undeclared exception!
      try { 
        pageInterceptor0.setProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      // Undeclared exception!
      try { 
        pageInterceptor0.plugin((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.plugin.Plugin", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      Properties properties0 = new Properties();
      pageInterceptor0.setProperties(properties0);
      Object[] objectArray0 = new Object[9];
      Invocation invocation0 = new Invocation(properties0, (Method) null, objectArray0);
      try { 
        pageInterceptor0.intercept(invocation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Properties cannot be cast to org.apache.ibatis.executor.Executor
         //
         verifyException("com.github.pagehelper.PageInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      Configuration configuration0 = new Configuration();
      Properties properties0 = configuration0.getVariables();
      pageInterceptor0.setProperties(properties0);
      Object[] objectArray0 = new Object[0];
      Invocation invocation0 = new Invocation(pageInterceptor0, (Method) null, objectArray0);
      try { 
        pageInterceptor0.intercept(invocation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.pagehelper.PageInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      pageInterceptor0.msCountMap = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) null;
      Configuration configuration0 = new Configuration();
      Properties properties0 = configuration0.getVariables();
      pageInterceptor0.setProperties(properties0);
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0).when(invocation0).getArgs();
      doReturn(objectArray0[5]).when(invocation0).getTarget();
      try { 
        pageInterceptor0.intercept(invocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PageInterceptor pageInterceptor0 = new PageInterceptor();
      pageInterceptor0.plugin("]]tttv9a}tB+gSKl");
      Object[] objectArray0 = new Object[6];
      Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0).when(invocation0).getArgs();
      doReturn(objectArray0[5]).when(invocation0).getTarget();
      try { 
        pageInterceptor0.intercept(invocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.pagehelper.PageHelper", e);
      }
  }
}
