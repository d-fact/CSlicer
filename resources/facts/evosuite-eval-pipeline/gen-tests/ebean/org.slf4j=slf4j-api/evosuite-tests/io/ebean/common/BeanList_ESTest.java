/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:09:55 GMT 2019
 */

package io.ebean.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.annotation.Platform;
import io.ebean.annotation.TxIsolation;
import io.ebean.bean.BeanCollection;
import io.ebean.bean.BeanCollectionLoader;
import io.ebean.bean.EntityBean;
import io.ebean.common.BeanList;
import io.ebean.common.BeanSet;
import io.ebeaninternal.server.deploy.DbMigrationInfo;
import io.ebeaninternal.server.transaction.RemoteTransactionEvent;
import java.lang.annotation.Annotation;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanList_ESTest extends BeanList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      BeanList<Object> beanList1 = new BeanList<Object>();
      beanList1.registeredWithLoadContext = true;
      // Undeclared exception!
      try { 
        beanList1.set(2057, beanList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      BeanList<Object> beanList1 = new BeanList<Object>();
      beanList1.registeredWithLoadContext = true;
      boolean boolean0 = beanList1.retainAll(beanList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      beanList0.registeredWithLoadContext = true;
      // Undeclared exception!
      try { 
        beanList0.remove(502);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 502, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      beanList0.registeredWithLoadContext = true;
      Integer integer0 = new Integer(90106);
      boolean boolean0 = beanList0.add(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>();
      List<TxIsolation> list0 = beanList0.subList(0, 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>(hashSet0);
      beanList0.loadFrom(beanSet0);
      assertTrue(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.add(0, "Cannot set Data Source properties after DataSource has been used");
      assertFalse(beanList0.isReference());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      TxIsolation[] txIsolationArray0 = new TxIsolation[7];
      TxIsolation[] txIsolationArray1 = beanList0.toArray(txIsolationArray0);
      assertEquals(7, txIsolationArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      Stream<Integer> stream0 = beanList0.parallelStream();
      beanList0.internalAddWithCheck(stream0);
      beanList0.toArray();
      assertFalse(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      Iterator<Object> iterator0 = beanList0.iterator();
      BeanList<String> beanList1 = new BeanList<String>();
      beanList1.internalAddWithCheck(iterator0);
      beanList1.getShallowCopy();
      assertFalse(beanList1.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.add("size[");
      List<String> list0 = beanList0.getActualList();
      assertTrue(list0.contains("size["));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>((List<TxIsolation>) null);
      Collection<?> collection0 = beanList0.getActualEntries();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      Collection<Object> collection0 = beanList0.getActualDetails();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.add("size[");
      String string0 = beanList0.get(0);
      assertEquals("size[", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      Integer integer0 = new Integer(1);
      boolean boolean0 = beanList0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>();
      Stack<TxIsolation> stack0 = new Stack<TxIsolation>();
      TxIsolation txIsolation0 = TxIsolation.READ_COMMITED;
      stack0.add(txIsolation0);
      boolean boolean0 = beanList0.addAll((Collection<? extends TxIsolation>) stack0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanList<ChronoLocalDate> beanList0 = new BeanList<ChronoLocalDate>((List<ChronoLocalDate>) null);
      // Undeclared exception!
      try { 
        beanList0.toArray();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.subList((-1439), 583);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.subList(90042, (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(90042) > toIndex(-475)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.size();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      // Undeclared exception!
      try { 
        beanList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Platform[] platformArray0 = new Platform[1];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPostAlter();
      BeanList<String> beanList0 = new BeanList<String>(list0);
      // Undeclared exception!
      try { 
        beanList0.removeBean("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      beanList0.readOnly = true;
      // Undeclared exception!
      try { 
        beanList0.remove((-2506));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This collection is in ReadOnly mode
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      // Undeclared exception!
      try { 
        beanList0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.loadFrom((BeanCollection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.BeanList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      // Undeclared exception!
      try { 
        beanList0.listIterator((-1868));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1868
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.listIterator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.iterator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanList<Callable<ChronoLocalDate>> beanList0 = new BeanList<Callable<ChronoLocalDate>>((List<Callable<ChronoLocalDate>>) null);
      // Undeclared exception!
      try { 
        beanList0.isEmpty();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Platform[] platformArray0 = new Platform[0];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPostAdd();
      BeanList<String> beanList0 = new BeanList<String>(list0);
      // Undeclared exception!
      try { 
        beanList0.internalAdd("p\"D:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      TxIsolation txIsolation0 = TxIsolation.NONE;
      // Undeclared exception!
      try { 
        beanList0.indexOf(txIsolation0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>((List<String>) null);
      // Undeclared exception!
      try { 
        beanList0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.get(1154);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      // Undeclared exception!
      try { 
        beanList0.get(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.addAll(0, (Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>((List<TxIsolation>) null);
      // Undeclared exception!
      try { 
        beanList0.addAll(0, (Collection<? extends TxIsolation>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>((List<Object>) null);
      // Undeclared exception!
      try { 
        beanList0.add(0, (Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Platform[] platformArray0 = new Platform[4];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPreAlter();
      BeanList<String> beanList0 = new BeanList<String>(list0);
      ListIterator<String> listIterator0 = beanList0.listIterator();
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      Collection<Integer> collection0 = beanList0.getActualDetails();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanList<ForkJoinTask<String>> beanList0 = new BeanList<ForkJoinTask<String>>();
      int int0 = beanList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanList<Comparable<String>> beanList0 = new BeanList<Comparable<String>>();
      // Undeclared exception!
      try { 
        beanList0.subList((-102), (-2019));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -102
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      BeanList<Object> beanList1 = new BeanList<Object>();
      // Undeclared exception!
      try { 
        beanList1.set((-1), beanList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      BeanList<Integer> beanList1 = new BeanList<Integer>();
      boolean boolean0 = beanList0.removeAll(beanList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanList<Comparable<MinguoDate>> beanList0 = new BeanList<Comparable<MinguoDate>>();
      boolean boolean0 = beanList0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      RemoteTransactionEvent remoteTransactionEvent0 = new RemoteTransactionEvent((String) null);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) remoteTransactionEvent0, (long) 0, timeUnit0);
      beanList0.addBean(scheduledFuture0);
      beanList0.removeBean(scheduledFuture0);
      assertFalse(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.removeBean("-sC+]");
      assertTrue(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      ListIterator<String> listIterator0 = beanList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanList<MinguoDate> beanList0 = new BeanList<MinguoDate>();
      beanList0.modifyListening = true;
      ListIterator<MinguoDate> listIterator0 = beanList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      beanList0.readOnly = true;
      ListIterator<Object> listIterator0 = beanList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanList<MinguoDate> beanList0 = new BeanList<MinguoDate>();
      beanList0.modifyListening = true;
      Consumer<MinguoDate> consumer0 = (Consumer<MinguoDate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanList0.forEach(consumer0);
      assertFalse(beanList0.isReference());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      boolean boolean0 = beanList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.internalAdd("IndexHints{allowedIndexes=[]}");
      boolean boolean0 = beanList0.isEmpty();
      assertFalse(beanList0.isSkipSave());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      Stream<Integer> stream0 = beanList0.parallelStream();
      beanList0.internalAddWithCheck(stream0);
      boolean boolean0 = beanList0.contains(stream0);
      assertFalse(beanList0.isSkipSave());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      boolean boolean0 = beanList0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      String[] stringArray0 = new String[1];
      Platform[] platformArray0 = new Platform[8];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPostAlter();
      // Undeclared exception!
      try { 
        beanList0.addAll(323, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 323, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      LinkedList<Delayed> linkedList0 = new LinkedList<Delayed>();
      boolean boolean0 = beanList0.addAll((Collection<? extends Delayed>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<TxIsolation> linkedList0 = new LinkedList<TxIsolation>();
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>(linkedList0);
      TxIsolation txIsolation0 = TxIsolation.READ_UNCOMMITTED;
      // Undeclared exception!
      try { 
        beanList0.add((-1380), txIsolation0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1380, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      String string0 = beanList0.toString();
      assertEquals("BeanList size[0] list[]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>((List<TxIsolation>) null);
      boolean boolean0 = beanList0.isReference();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>();
      boolean boolean0 = beanList0.isReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      boolean boolean0 = beanList0.isPopulated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>((List<String>) null);
      // Undeclared exception!
      try { 
        beanList0.listIterator(0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BeanList<Annotation> beanList0 = new BeanList<Annotation>((List<Annotation>) null);
      beanList0.clear();
      assertTrue(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>();
      beanList0.clear();
      assertTrue(beanList0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = new BeanList<TxIsolation>((List<TxIsolation>) null);
      boolean boolean0 = beanList0.checkEmptyLazyLoad();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      boolean boolean0 = beanList0.checkEmptyLazyLoad();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      Integer integer0 = new Integer(90106);
      beanList0.add(integer0);
      beanList0.internalAddWithCheck("FROM ");
      assertTrue(beanList0.contains(90106));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BeanList<Comparable<Integer>> beanList0 = new BeanList<Comparable<Integer>>();
      beanList0.internalAddWithCheck((Object) null);
      assertTrue(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      BeanList<String> beanList1 = new BeanList<String>((List<String>) null);
      beanList1.internalAdd(beanList0);
      assertFalse(beanList1.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BeanList<Annotation> beanList0 = new BeanList<Annotation>();
      boolean boolean0 = beanList0.isSkipSave();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>((List<Integer>) null);
      boolean boolean0 = beanList0.isSkipSave();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      BeanList<ForkJoinTask<TxIsolation>> beanList1 = new BeanList<ForkJoinTask<TxIsolation>>();
      boolean boolean0 = beanList0.containsAll(beanList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      Object[] objectArray0 = beanList0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BeanList<TxIsolation> beanList0 = null;
      try {
        beanList0 = new BeanList<TxIsolation>((BeanCollectionLoader) null, (EntityBean) null, "}%I![^30V*Fx&)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ArrayList<Delayed> arrayList0 = new ArrayList<Delayed>();
      BeanList<Delayed> beanList0 = new BeanList<Delayed>(arrayList0);
      // Undeclared exception!
      try { 
        beanList0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      BeanList<Object> beanList1 = new BeanList<Object>();
      int int0 = beanList0.indexOf(beanList1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      // Undeclared exception!
      try { 
        beanList0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      String[] stringArray0 = new String[1];
      Platform[] platformArray0 = new Platform[8];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPostAlter();
      beanList0.setActualList(list0);
      // Undeclared exception!
      try { 
        beanList0.addAll(323, (Collection<?>) list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      TxIsolation txIsolation0 = TxIsolation.DEFAULT;
      int int0 = beanList0.lastIndexOf(txIsolation0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      BeanCollection<Object> beanCollection0 = beanList0.getShallowCopy();
      assertFalse(beanCollection0.holdsModifications());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BeanList<Callable<ChronoLocalDate>> beanList0 = new BeanList<Callable<ChronoLocalDate>>();
      List<Callable<ChronoLocalDate>> list0 = beanList0.getActualList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      BeanList<ForkJoinTask<String>> beanList1 = new BeanList<ForkJoinTask<String>>();
      boolean boolean0 = beanList0.equals(beanList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      Collection<?> collection0 = beanList0.getActualEntries();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      beanList0.addEntityBean((EntityBean) null);
      assertFalse(beanList0.isReference());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      beanList0.reset((EntityBean) null, "sql.syntax_pgs");
      assertTrue(beanList0.isReference());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      String[] stringArray0 = new String[1];
      Platform[] platformArray0 = new Platform[4];
      DbMigrationInfo dbMigrationInfo0 = new DbMigrationInfo(stringArray0, stringArray0, stringArray0, stringArray0, platformArray0);
      List<String> list0 = dbMigrationInfo0.getPreAlter();
      BeanList<String> beanList1 = new BeanList<String>(list0);
      // Undeclared exception!
      try { 
        beanList1.loadFrom(beanList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      beanList0.readOnly = true;
      Consumer<Delayed> consumer0 = (Consumer<Delayed>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanList0.forEach(consumer0);
      assertFalse(beanList0.isReference());
  }
}
