/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:51:40 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.MatchingNamingConvention;
import io.ebean.config.TableName;
import io.ebean.config.dbplatform.DatabasePlatform;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatchingNamingConvention_ESTest extends MatchingNamingConvention_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("y17EH7>`28_'8");
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      matchingNamingConvention0.setDatabasePlatform(databasePlatform0);
      String string0 = matchingNamingConvention0.getForeignKey("]021[y?m%@HU)vrf", "y17EH7>`28_'8");
      assertEquals("]021[y?m%@HU)vrfY17EH7>`28_'8", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention((String) null);
      Class<String> class0 = String.class;
      String string0 = matchingNamingConvention0.getPropertyFromColumn(class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      Class<Object> class0 = Object.class;
      String string0 = matchingNamingConvention0.getPropertyFromColumn(class0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("y17EH7>`28_'8");
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      matchingNamingConvention0.setDatabasePlatform(databasePlatform0);
      Class<Object> class0 = Object.class;
      String string0 = matchingNamingConvention0.getColumnFromProperty(class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      Class<Object> class0 = Object.class;
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      matchingNamingConvention0.setDatabasePlatform(databasePlatform0);
      String string0 = matchingNamingConvention0.getColumnFromProperty(class0, "N(-:[H\"du-HN(-:[H\"du-H");
      assertEquals("N(-:[H\"du-HN(-:[H\"du-H", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("y17EH7>`28_'8");
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      matchingNamingConvention0.setDatabasePlatform(databasePlatform0);
      Class<Properties> class0 = Properties.class;
      String string0 = matchingNamingConvention0.getColumnFromProperty(class0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("y17EH7>`28_'8");
      // Undeclared exception!
      try { 
        matchingNamingConvention0.getTableNameByConvention((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.MatchingNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      matchingNamingConvention0.setDatabasePlatform(databasePlatform0);
      // Undeclared exception!
      try { 
        matchingNamingConvention0.getForeignKey("minutes", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        matchingNamingConvention0.getColumnFromProperty(class0, "N(-:[H\"du-HN(-:[H\"du-H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.AbstractNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("`zv@b");
      Class<Object> class0 = Object.class;
      String string0 = matchingNamingConvention0.getPropertyFromColumn(class0, "{table}_seq");
      assertEquals("{table}_seq", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("`zv@b");
      // Undeclared exception!
      try { 
        matchingNamingConvention0.getForeignKey("{table}_seq", "`zv@b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.MatchingNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("`zv@b");
      Class<Object> class0 = Object.class;
      TableName tableName0 = matchingNamingConvention0.getTableNameByConvention(class0);
      assertEquals("Object", tableName0.getName());
  }
}
