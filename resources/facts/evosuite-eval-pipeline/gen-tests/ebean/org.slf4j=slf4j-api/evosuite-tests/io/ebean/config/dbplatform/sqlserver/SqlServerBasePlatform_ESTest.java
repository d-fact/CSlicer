/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:18:37 GMT 2019
 */

package io.ebean.config.dbplatform.sqlserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Query;
import io.ebean.annotation.PersistBatch;
import io.ebean.config.PlatformConfig;
import io.ebean.config.dbplatform.sqlserver.SqlServer16Platform;
import io.ebean.config.dbplatform.sqlserver.SqlServer17Platform;
import io.ebean.config.dbplatform.sqlserver.SqlServer2005Platform;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SqlServerBasePlatform_ESTest extends SqlServerBasePlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      StringBuilder stringBuilder0 = new StringBuilder();
      sqlServer17Platform0.escapeLikeCharacter('U', stringBuilder0);
      assertEquals("[U]", stringBuilder0.toString());
      assertTrue(sqlServer17Platform0.isIdInExpandedForm());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SqlServer16Platform sqlServer16Platform0 = new SqlServer16Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      sqlServer16Platform0.withForUpdate((String) null, query_ForUpdate0);
      assertTrue(sqlServer16Platform0.isIdInExpandedForm());
      assertTrue(sqlServer16Platform0.isSelectCountWithAlias());
      assertFalse(sqlServer16Platform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SqlServer2005Platform sqlServer2005Platform0 = new SqlServer2005Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      sqlServer2005Platform0.withForUpdate("", query_ForUpdate0);
      assertTrue(sqlServer2005Platform0.isSelectCountWithAlias());
      assertFalse(sqlServer2005Platform0.isSequenceBatchMode());
      assertTrue(sqlServer2005Platform0.isIdInExpandedForm());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SqlServer16Platform sqlServer16Platform0 = new SqlServer16Platform();
      // Undeclared exception!
      try { 
        sqlServer16Platform0.fromForUpdate((Query.ForUpdate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.sqlserver.SqlServerBasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SqlServer16Platform sqlServer16Platform0 = new SqlServer16Platform();
      // Undeclared exception!
      try { 
        sqlServer16Platform0.configure((PlatformConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      String string0 = sqlServer17Platform0.fromForUpdate(query_ForUpdate0);
      assertTrue(sqlServer17Platform0.isSelectCountWithAlias());
      assertEquals("with (updlock,nowait)", string0);
      assertFalse(sqlServer17Platform0.isSequenceBatchMode());
      assertTrue(sqlServer17Platform0.isIdInExpandedForm());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      String string0 = sqlServer17Platform0.fromForUpdate(query_ForUpdate0);
      assertTrue(sqlServer17Platform0.isSelectCountWithAlias());
      assertEquals("with (updlock)", string0);
      assertFalse(sqlServer17Platform0.isSequenceBatchMode());
      assertTrue(sqlServer17Platform0.isIdInExpandedForm());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.SKIPLOCKED;
      String string0 = sqlServer17Platform0.fromForUpdate(query_ForUpdate0);
      assertEquals("with (updlock,readpast)", string0);
      assertTrue(sqlServer17Platform0.isIdInExpandedForm());
      assertTrue(sqlServer17Platform0.isSelectCountWithAlias());
      assertFalse(sqlServer17Platform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      PlatformConfig platformConfig0 = new PlatformConfig();
      sqlServer17Platform0.configure(platformConfig0);
      assertEquals(PersistBatch.ALL, sqlServer17Platform0.getPersistBatchOnCascade());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      SqlServer2005Platform sqlServer2005Platform0 = new SqlServer2005Platform();
      sqlServer2005Platform0.configure(platformConfig0);
      assertFalse(sqlServer2005Platform0.isSequenceBatchMode());
      assertTrue(sqlServer2005Platform0.isIdInExpandedForm());
      assertEquals(PersistBatch.NONE, sqlServer2005Platform0.getPersistBatchOnCascade());
      assertTrue(sqlServer2005Platform0.isSelectCountWithAlias());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SqlServer2005Platform sqlServer2005Platform0 = new SqlServer2005Platform();
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor('D', 'D', "with (updlock,readpast)");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      sqlServer2005Platform0.createSequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, 'D', "with (updlock,readpast)");
      assertTrue(sqlServer2005Platform0.isIdInExpandedForm());
      assertTrue(sqlServer2005Platform0.isSelectCountWithAlias());
      assertFalse(sqlServer2005Platform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      sqlServer17Platform0.withForUpdate("a}_1y`t~9bwZ", query_ForUpdate0);
      assertTrue(sqlServer17Platform0.isIdInExpandedForm());
      assertFalse(sqlServer17Platform0.isSequenceBatchMode());
      assertTrue(sqlServer17Platform0.isSelectCountWithAlias());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SqlServer17Platform sqlServer17Platform0 = new SqlServer17Platform();
      // Undeclared exception!
      try { 
        sqlServer17Platform0.escapeLikeCharacter('Q', (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.sqlserver.SqlServerBasePlatform", e);
      }
  }
}
