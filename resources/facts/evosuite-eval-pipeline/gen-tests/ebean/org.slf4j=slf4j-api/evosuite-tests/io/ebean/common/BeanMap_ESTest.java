/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:22:02 GMT 2019
 */

package io.ebean.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import io.ebean.bean.BeanCollection;
import io.ebean.bean.BeanCollectionLoader;
import io.ebean.bean.EntityBean;
import io.ebean.common.BeanList;
import io.ebean.common.BeanMap;
import io.ebeaninternal.server.core.bootup.BootupClasses;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.format.ResolverStyle;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanMap_ESTest extends BeanMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>> beanMap0 = new BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>>();
      beanMap0.registeredWithLoadContext = true;
      beanMap0.values();
      HashMap<Delayed, Object> hashMap0 = new HashMap<Delayed, Object>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanMap<BeanMap<ResolverStyle, ResolverStyle>, ResolverStyle> beanMap0 = new BeanMap<BeanMap<ResolverStyle, ResolverStyle>, ResolverStyle>();
      beanMap0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> beanMap0 = new BeanMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Integer>, Integer>>)beanMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>> beanMap0 = new BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>>();
      int int0 = beanMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanMap<ForkJoinTask<String>, ResolverStyle> beanMap0 = new BeanMap<ForkJoinTask<String>, ResolverStyle>();
      Integer integer0 = Integer.valueOf(2615625);
      beanMap0.internalPutWithCheck(integer0, integer0);
      int int0 = beanMap0.size();
      assertFalse(beanMap0.isSkipSave());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, ResolverStyle> hashMap0 = new HashMap<Integer, ResolverStyle>();
      BeanMap<Integer, ResolverStyle> beanMap0 = new BeanMap<Integer, ResolverStyle>(hashMap0);
      beanMap0.remove((Object) hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanMap<String, ResolverStyle> beanMap0 = new BeanMap<String, ResolverStyle>();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      beanMap0.put("o<PP", resolverStyle0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<ForkJoinTask<Object>, Object> hashMap0 = new HashMap<ForkJoinTask<Object>, Object>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Object> forkJoinTask0 = ForkJoinTask.adapt((Callable<?>) callable0);
      hashMap0.put(forkJoinTask0, (Object) null);
      BeanMap<ForkJoinTask<Object>, Object> beanMap0 = new BeanMap<ForkJoinTask<Object>, Object>(hashMap0);
      BeanCollection<Object> beanCollection0 = beanMap0.getShallowCopy();
      assertNull(beanCollection0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanMap<Integer, String> beanMap0 = new BeanMap<Integer, String>();
      boolean boolean0 = beanMap0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanMap<String, Integer> beanMap0 = new BeanMap<String, Integer>((Map<String, Integer>) null);
      // Undeclared exception!
      try { 
        beanMap0.values();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanMap<ChronoLocalDate, String> beanMap0 = new BeanMap<ChronoLocalDate, String>();
      Vector<String> vector0 = new Vector<String>();
      BeanList<String> beanList0 = new BeanList<String>(vector0);
      // Undeclared exception!
      try { 
        beanMap0.loadFrom(beanList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // io.ebean.common.BeanList cannot be cast to io.ebean.common.BeanMap
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanMap<Integer, Integer> beanMap0 = new BeanMap<Integer, Integer>((Map<Integer, Integer>) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        beanMap0.keySet();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<Object, Integer> map0 = null;
      BeanMap<Object, Integer> beanMap0 = new BeanMap<Object, Integer>((Map<Object, Integer>) null);
      Integer.getInteger(")ygQJzpf", 0);
      // Undeclared exception!
      try { 
        beanMap0.isEmpty();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanMap<Object, String> beanMap0 = new BeanMap<Object, String>();
      beanMap0.containsKey((Object) null);
      // Undeclared exception!
      try { 
        beanMap0.internalAddWithCheck("BeanMap size[0] map{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed for map
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanMap<ChronoLocalDate, ChronoLocalDate> beanMap0 = new BeanMap<ChronoLocalDate, ChronoLocalDate>((Map<ChronoLocalDate, ChronoLocalDate>) null);
      // Undeclared exception!
      try { 
        beanMap0.get((Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanMap<Object, Integer> beanMap0 = new BeanMap<Object, Integer>((Map<Object, Integer>) null);
      // Undeclared exception!
      try { 
        beanMap0.equals((Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanMap<ResolverStyle, AbstractMap.SimpleImmutableEntry<Integer, Object>> beanMap0 = new BeanMap<ResolverStyle, AbstractMap.SimpleImmutableEntry<Integer, Object>>((Map<ResolverStyle, AbstractMap.SimpleImmutableEntry<Integer, Object>>) null);
      // Undeclared exception!
      try { 
        beanMap0.entrySet();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanMap<String, BeanMap<ResolverStyle, Integer>> beanMap0 = new BeanMap<String, BeanMap<ResolverStyle, Integer>>((Map<String, BeanMap<ResolverStyle, Integer>>) null);
      // Undeclared exception!
      try { 
        beanMap0.entrySet();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanMap<ResolverStyle, String> beanMap0 = new BeanMap<ResolverStyle, String>();
      beanMap0.readOnly = true;
      // Undeclared exception!
      try { 
        beanMap0.clear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This collection is in ReadOnly mode
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanMap<Delayed, Object> beanMap0 = new BeanMap<Delayed, Object>();
      BeanMap<Delayed, Object> beanMap1 = new BeanMap<Delayed, Object>(beanMap0);
      beanMap1.putAll(beanMap0);
      BeanMap<String, ResolverStyle> beanMap2 = new BeanMap<String, ResolverStyle>((Map<String, ResolverStyle>) null);
      assertTrue(beanMap2.isReference());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanMap<BeanMap<ChronoLocalDate, String>, Object> beanMap0 = new BeanMap<BeanMap<ChronoLocalDate, String>, Object>();
      BeanMap<ForkJoinTask<ChronoLocalDate>, String> beanMap1 = new BeanMap<ForkJoinTask<ChronoLocalDate>, String>();
      Set<ForkJoinTask<ChronoLocalDate>> set0 = beanMap1.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanMap<Integer, String> beanMap0 = new BeanMap<Integer, String>();
      boolean boolean0 = beanMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanMap<Integer, Delayed> beanMap0 = new BeanMap<Integer, Delayed>();
      beanMap0.isSkipSave();
      BeanMap<ChronoLocalDate, ResolverStyle> beanMap1 = new BeanMap<ChronoLocalDate, ResolverStyle>();
      beanMap1.internalPut(beanMap0, "92{*|4uM?Lp^Ak7-");
      beanMap1.isEmpty();
      BootupClasses bootupClasses0 = new BootupClasses();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BeanMap<String, Object> beanMap0 = new BeanMap<String, Object>();
      beanMap0.internalPut((Object) null, (Object) null);
      HashMap<Comparable<String>, Callable<String>> hashMap0 = new HashMap<Comparable<String>, Callable<String>>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>> beanMap0 = new BeanMap<AbstractMap.SimpleEntry<Integer, Integer>, ForkJoinTask<Object>>();
      beanMap0.values();
      beanMap0.internalPutNull();
      HashMap<Delayed, Object> hashMap0 = new HashMap<Delayed, Object>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanMap<Object, Integer> beanMap0 = new BeanMap<Object, Integer>();
      beanMap0.getActualMap();
      BootupClasses bootupClasses0 = new BootupClasses();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanMap<Delayed, Object> beanMap0 = new BeanMap<Delayed, Object>();
      boolean boolean0 = beanMap0.equals(beanMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>>();
      BeanMap<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>> beanMap0 = new BeanMap<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>>(hashMap0);
      beanMap0.readOnly = true;
      Set<Map.Entry<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<ResolverStyle, Integer>>>)beanMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanMap<Object, String> beanMap0 = new BeanMap<Object, String>();
      BeanMap<AbstractMap.SimpleEntry<Integer, String>, Object> beanMap1 = new BeanMap<AbstractMap.SimpleEntry<Integer, String>, Object>();
      beanMap1.containsValue(beanMap0);
      Object object0 = beanMap1.get(beanMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanMap<Integer, Integer> beanMap0 = new BeanMap<Integer, Integer>();
      Integer integer0 = new Integer(1825);
      Integer.compareUnsigned(1825, 1825);
      beanMap0.putIfAbsent(integer0, (Integer) null);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      beanMap0.compute(integer0, biFunction0);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<String, ChronoLocalDate>, Object> map0 = null;
      BeanMap<AbstractMap.SimpleImmutableEntry<String, ChronoLocalDate>, Object> beanMap0 = new BeanMap<AbstractMap.SimpleImmutableEntry<String, ChronoLocalDate>, Object>((Map<AbstractMap.SimpleImmutableEntry<String, ChronoLocalDate>, Object>) null);
      beanMap0.checkReadOnly();
      beanMap0.toString();
      BeanMap<Integer, Delayed> beanMap1 = new BeanMap<Integer, Delayed>();
      assertTrue(beanMap1.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanMap<String, Object> beanMap0 = new BeanMap<String, Object>();
      beanMap0.checkEmptyLazyLoad();
      BeanMap<ResolverStyle, Integer> beanMap1 = new BeanMap<ResolverStyle, Integer>();
      assertFalse(beanMap1.isReference());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<BeanMap<Object, Integer>, String> hashMap0 = new HashMap<BeanMap<Object, Integer>, String>();
      BeanMap<ResolverStyle, Integer> beanMap0 = new BeanMap<ResolverStyle, Integer>();
      boolean boolean0 = beanMap0.isReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanMap<ResolverStyle, String> beanMap0 = new BeanMap<ResolverStyle, String>((Map<ResolverStyle, String>) null);
      beanMap0.internalPutNull();
      boolean boolean0 = beanMap0.isPopulated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanMap<Integer, ChronoLocalDate> beanMap0 = new BeanMap<Integer, ChronoLocalDate>();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(beanMap0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      beanMap0.putIfAbsent(integer0, japaneseDate0);
      BeanMap<Integer, ChronoLocalDate> beanMap1 = new BeanMap<Integer, ChronoLocalDate>(beanMap0);
      beanMap1.isSkipSave();
      String string0 = "7t3|LPy= ";
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanMap<Object, Delayed> beanMap0 = new BeanMap<Object, Delayed>();
      BeanMap<Object, Delayed> beanMap1 = new BeanMap<Object, Delayed>(beanMap0);
      String string0 = beanMap1.toString();
      assertEquals("BeanMap size[0] mapBeanMap size[0] map{}", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanMap<ResolverStyle, Integer> beanMap0 = new BeanMap<ResolverStyle, Integer>();
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        beanMap0.addBean((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Method not allowed on Map. Please use List instead.
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanMap<String, Object> beanMap0 = new BeanMap<String, Object>();
      beanMap0.putIfAbsent("vsoZ-?", "vsoZ-?");
      beanMap0.getActualDetails();
      HashMap<Comparable<String>, Callable<String>> hashMap0 = new HashMap<Comparable<String>, Callable<String>>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<BeanMap<Object, Integer>, String> hashMap0 = new HashMap<BeanMap<Object, Integer>, String>();
      BeanMap<BeanMap<Object, Integer>, String> beanMap0 = new BeanMap<BeanMap<Object, Integer>, String>(hashMap0);
      beanMap0.clear();
      BeanMap<String, Object> beanMap1 = new BeanMap<String, Object>();
      BeanMap<String, Object> beanMap2 = new BeanMap<String, Object>(beanMap1);
      beanMap2.loadFrom(beanMap0);
      BeanMap<ResolverStyle, Integer> beanMap3 = new BeanMap<ResolverStyle, Integer>();
      assertTrue(beanMap3.isPopulated());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanMap<Object, String> beanMap0 = null;
      try {
        beanMap0 = new BeanMap<Object, String>((BeanCollectionLoader) null, (EntityBean) null, "4t_o(51G+fWmAu(O^z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanMap<Integer, ResolverStyle> beanMap0 = new BeanMap<Integer, ResolverStyle>();
      BeanMap<Integer, Object> beanMap1 = new BeanMap<Integer, Object>();
      Integer integer0 = null;
      // Undeclared exception!
      try { 
        beanMap1.internalAdd((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not allowed for map
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      HashMap<ForkJoinTask<Object>, Object> hashMap0 = new HashMap<ForkJoinTask<Object>, Object>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      BeanMap<ForkJoinTask<Object>, Object> beanMap0 = new BeanMap<ForkJoinTask<Object>, Object>(hashMap0);
      beanMap0.readOnly = false;
      beanMap0.getShallowCopy();
      BeanMap<Integer, Integer> beanMap1 = new BeanMap<Integer, Integer>();
      assertTrue(beanMap1.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanMap<BeanMap<Object, String>, Integer> beanMap0 = new BeanMap<BeanMap<Object, String>, Integer>();
      Collection<?> collection0 = beanMap0.getActualEntries();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> beanMap0 = new BeanMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      Integer integer0 = new Integer(3885);
      // Undeclared exception!
      try { 
        beanMap0.removeBean(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Method not allowed on Map. Please use List instead.
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanMap<ResolverStyle, ForkJoinTask<Object>> beanMap0 = new BeanMap<ResolverStyle, ForkJoinTask<Object>>();
      beanMap0.internalPutWithCheck((Object) null, "");
      BeanMap<String, Object> beanMap1 = new BeanMap<String, Object>();
      beanMap1.internalPutWithCheck(beanMap0, "");
      beanMap1.internalPutWithCheck((Object) null, (Object) null);
      BeanMap<ForkJoinTask<Object>, Object> beanMap2 = new BeanMap<ForkJoinTask<Object>, Object>();
      assertFalse(beanMap2.isReference());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanMap<Object, BeanMap<String, Integer>> beanMap0 = new BeanMap<Object, BeanMap<String, Integer>>();
      BeanMap<Comparable<Object>, Object> beanMap1 = new BeanMap<Comparable<Object>, Object>();
      beanMap1.values();
      beanMap1.setActualMap(beanMap0);
      assertFalse(beanMap0.isReference());
  }
}
