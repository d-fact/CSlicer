/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:45:05 GMT 2019
 */

package io.ebean.config.dbplatform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Transaction;
import io.ebean.config.dbplatform.db2.DB2SequenceIdGenerator;
import io.ebean.config.dbplatform.h2.H2SequenceIdGenerator;
import io.ebean.config.dbplatform.postgres.PostgresSequenceIdGenerator;
import io.ebean.config.dbplatform.sqlserver.SqlServerStepSequence;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.persistence.PersistenceException;
import javax.sql.ConnectionPoolDataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConfig;
import org.sqlite.SQLiteDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SequenceIdGenerator_ESTest extends SequenceIdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      DB2SequenceIdGenerator dB2SequenceIdGenerator0 = new DB2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "", 3);
      dB2SequenceIdGenerator0.getSql(0);
      assertEquals("", dB2SequenceIdGenerator0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(0, 0, (String) null);
      JDBCPool jDBCPool0 = new JDBCPool();
      PostgresSequenceIdGenerator postgresSequenceIdGenerator0 = new PostgresSequenceIdGenerator(defaultBackgroundExecutor0, jDBCPool0, (String) null, (-2751));
      String string0 = postgresSequenceIdGenerator0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(0, 0, "}z!f`y!UL$Wi&5^");
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) null);
      PostgresSequenceIdGenerator postgresSequenceIdGenerator0 = new PostgresSequenceIdGenerator(defaultBackgroundExecutor0, jdbcConnectionPool0, "Kxo}gyx\"g;]", 0);
      String string0 = postgresSequenceIdGenerator0.getName();
      assertNotNull(string0);
      assertEquals("Kxo}gyx\"g;]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(326565, 326565, (String) null);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "SQLite only supports CONCUR_READ_ONLY cursors", "hsqldb.lockfile_poll_retries");
      DB2SequenceIdGenerator dB2SequenceIdGenerator0 = new DB2SequenceIdGenerator(defaultBackgroundExecutor0, jdbcConnectionPool0, "O3", 326565);
      // Undeclared exception!
      dB2SequenceIdGenerator0.nextId((Transaction) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
          SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/sqlite-3.15.1-00000000-0100-4000-8200-000003000000-libsqlitejdbc.so");
          FileSystemHandling.createFolder(evoSuiteFile0);
          SqlServerStepSequence sqlServerStepSequence0 = new SqlServerStepSequence(defaultBackgroundExecutor0, sQLiteDataSource0, "values nextval for  union values nextval for  union values nextval for ", 962);
          // Undeclared exception!
          try { 
            sqlServerStepSequence0.nextId((Transaction) null);
            fail("Expecting exception: UnsatisfiedLinkError");
          
          } catch(UnsatisfiedLinkError e) {
             //
             // org.sqlite.core.NativeDB._open_utf8([BI)V
             //
             verifyException("org.sqlite.core.NativeDB", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(0, 2298, "");
      JDBCPool jDBCPool0 = new JDBCPool();
      PostgresSequenceIdGenerator postgresSequenceIdGenerator0 = new PostgresSequenceIdGenerator(defaultBackgroundExecutor0, jDBCPool0, "", 0);
      // Undeclared exception!
      try { 
        postgresSequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.DatabaseURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2, 2, (String) null);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create(";wip/byOfQ)4oECu", "SQLite only supports CONCUR_READ_ONLY cursors", "hsqldb.lockfile_poll_retries");
      DB2SequenceIdGenerator dB2SequenceIdGenerator0 = new DB2SequenceIdGenerator(defaultBackgroundExecutor0, jdbcConnectionPool0, "O3", 2);
      jdbcConnectionPool0.dispose();
      // Undeclared exception!
      try { 
        dB2SequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Connection pool has been disposed.
         //
         verifyException("org.h2.jdbcx.JdbcConnectionPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "DYu$9O@0p");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "DYu$9O@0p", 2533);
      h2SequenceIdGenerator0.getSql(2533);
      h2SequenceIdGenerator0.getSql(2533);
      h2SequenceIdGenerator0.getSql(2533);
      // Undeclared exception!
      h2SequenceIdGenerator0.getSql(2533);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2, 2, "j}dy\"qs;+$fi$oFT");
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource(sQLiteConfig0);
      DB2SequenceIdGenerator dB2SequenceIdGenerator0 = new DB2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "j}dy\"qs;+$fi$oFT", 534);
      dB2SequenceIdGenerator0.preAllocateIds(262144);
      dB2SequenceIdGenerator0.preAllocateIds(3000);
      assertEquals("j}dy\"qs;+$fi$oFT", dB2SequenceIdGenerator0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "", 3);
      h2SequenceIdGenerator0.preAllocateIds(2533);
      assertEquals("", h2SequenceIdGenerator0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      SqlServerStepSequence sqlServerStepSequence0 = new SqlServerStepSequence(defaultBackgroundExecutor0, sQLiteDataSource0, "values nextval for  union values nextval for  union values nextval for ", 962);
      sqlServerStepSequence0.preAllocateIds(1048);
      assertEquals("values nextval for  union values nextval for  union values nextval for ", sqlServerStepSequence0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "", 3);
      boolean boolean0 = h2SequenceIdGenerator0.isDbSequence();
      assertEquals("", h2SequenceIdGenerator0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      DB2SequenceIdGenerator dB2SequenceIdGenerator0 = new DB2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteDataSource0, "", 3);
      String string0 = dB2SequenceIdGenerator0.getName();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2533, 2533, "");
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      SqlServerStepSequence sqlServerStepSequence0 = new SqlServerStepSequence(defaultBackgroundExecutor0, sQLiteDataSource0, "values nextval for  union values nextval for  union values nextval for ", 962);
      // Undeclared exception!
      try { 
        sqlServerStepSequence0.nextId((Transaction) null);
        fail("Expecting exception: PersistenceException");
      
      } catch(PersistenceException e) {
         //
         // Error getting sequence nextval
         //
         verifyException("io.ebean.config.dbplatform.SequenceIdGenerator", e);
      }
  }
}
