/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:29:38 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.jdbc.JDBC4ReplicationMySQLConnection;
import com.mysql.jdbc.ReplicationConnectionProxy;
import io.ebean.PersistenceContextScope;
import io.ebean.annotation.PersistBatch;
import io.ebean.annotation.Platform;
import io.ebean.common.BeanList;
import io.ebean.config.AutoTuneConfig;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.ContainerConfig;
import io.ebean.config.CurrentTenantProvider;
import io.ebean.config.CurrentUserProvider;
import io.ebean.config.DbConstraintNaming;
import io.ebean.config.DbMigrationConfig;
import io.ebean.config.DocStoreConfig;
import io.ebean.config.EncryptDeployManager;
import io.ebean.config.EncryptKeyManager;
import io.ebean.config.Encryptor;
import io.ebean.config.ExternalTransactionManager;
import io.ebean.config.IdGenerator;
import io.ebean.config.JsonConfig;
import io.ebean.config.MatchingNamingConvention;
import io.ebean.config.PlatformConfig;
import io.ebean.config.ProfilingConfig;
import io.ebean.config.PropertiesWrapper;
import io.ebean.config.ServerConfig;
import io.ebean.config.SlowQueryListener;
import io.ebean.config.TenantCatalogProvider;
import io.ebean.config.TenantDataSourceProvider;
import io.ebean.config.TenantMode;
import io.ebean.config.TenantSchemaProvider;
import io.ebean.config.dbplatform.DatabasePlatform;
import io.ebean.config.dbplatform.DbType;
import io.ebean.config.dbplatform.IdType;
import io.ebean.config.dbplatform.mysql.MySqlDbEncrypt;
import io.ebean.config.dbplatform.oracle.OracleDbEncrypt;
import io.ebean.config.dbplatform.postgres.PostgresDbEncrypt;
import io.ebean.event.BeanFindController;
import io.ebean.event.BeanPersistController;
import io.ebean.event.BeanPersistListener;
import io.ebean.event.BeanPostConstructListener;
import io.ebean.event.BeanPostLoad;
import io.ebean.event.BeanQueryAdapter;
import io.ebean.event.BulkTableEventListener;
import io.ebean.event.ServerConfigStartup;
import io.ebean.event.readaudit.ReadAuditLogger;
import io.ebean.event.readaudit.ReadAuditPrepare;
import io.ebeaninternal.server.cache.DefaultServerCachePlugin;
import io.ebeaninternal.server.changelog.DefaultChangeLogListener;
import io.ebeaninternal.server.changelog.DefaultChangeLogPrepare;
import io.ebeaninternal.server.changelog.DefaultChangeLogRegister;
import io.ebeaninternal.server.core.bootup.BootupClasses;
import io.ebeaninternal.server.deploy.ChainedBeanPostConstructListener;
import io.ebeaninternal.server.type.SimpleAesEncryptor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Stack;
import javax.sql.ConnectionPoolDataSource;
import javax.sql.DataSource;
import org.avaje.datasource.DataSourceConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.ds.PGPoolingDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServerConfig_ESTest extends ServerConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      // Undeclared exception!
      try { 
        serverConfig0.newPlatformConfig("", "ddl.initSql");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ReplicationConnectionProxy replicationConnectionProxy0 = mock(ReplicationConnectionProxy.class, new ViolatedAssumptionAnswer());
      JDBC4ReplicationMySQLConnection jDBC4ReplicationMySQLConnection0 = new JDBC4ReplicationMySQLConnection(replicationConnectionProxy0);
      Properties properties0 = jDBC4ReplicationMySQLConnection0.getProperties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("aD*QpYrf:P<<jS", "aD*QpYrf:P<<jS", properties0, classLoadConfig0);
      serverConfig0.loadSettings(propertiesWrapper0);
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(300, serverConfig0.getQueryPlanTTLSeconds());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ReplicationConnectionProxy replicationConnectionProxy0 = mock(ReplicationConnectionProxy.class, new ViolatedAssumptionAnswer());
      JDBC4ReplicationMySQLConnection jDBC4ReplicationMySQLConnection0 = new JDBC4ReplicationMySQLConnection(replicationConnectionProxy0);
      Properties properties0 = jDBC4ReplicationMySQLConnection0.getProperties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      serverConfig0.loadDataSourceSettings(propertiesWrapper0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ReplicationConnectionProxy replicationConnectionProxy0 = mock(ReplicationConnectionProxy.class, new ViolatedAssumptionAnswer());
      JDBC4ReplicationMySQLConnection jDBC4ReplicationMySQLConnection0 = new JDBC4ReplicationMySQLConnection(replicationConnectionProxy0);
      Properties properties0 = jDBC4ReplicationMySQLConnection0.getProperties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      serverConfig0.loadAutoTuneSettings(propertiesWrapper0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ReplicationConnectionProxy replicationConnectionProxy0 = mock(ReplicationConnectionProxy.class, new ViolatedAssumptionAnswer());
      JDBC4ReplicationMySQLConnection jDBC4ReplicationMySQLConnection0 = new JDBC4ReplicationMySQLConnection(replicationConnectionProxy0);
      Properties properties0 = jDBC4ReplicationMySQLConnection0.getProperties();
      serverConfig0.loadFromProperties(properties0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(300, serverConfig0.getQueryPlanTTLSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      serverConfig0.runDbMigration(jdbcConnectionPool0);
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setResourceDirectory("");
      serverConfig0.getResourceDirectory();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ArrayList<ChainedBeanPostConstructListener> arrayList0 = new ArrayList<ChainedBeanPostConstructListener>();
      BootupClasses bootupClasses0 = new BootupClasses();
      List<BeanPostConstructListener> list0 = bootupClasses0.getBeanPostConstructoListeners();
      ChainedBeanPostConstructListener chainedBeanPostConstructListener0 = new ChainedBeanPostConstructListener(list0);
      arrayList0.add(chainedBeanPostConstructListener0);
      LinkedList<BeanPostConstructListener> linkedList0 = new LinkedList<BeanPostConstructListener>(arrayList0);
      serverConfig0.setPostConstructListeners(linkedList0);
      serverConfig0.getPostConstructListeners();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PersistBatch persistBatch0 = PersistBatch.ALL;
      serverConfig0.setPersistBatchOnCascade(persistBatch0);
      serverConfig0.getPersistBatchOnCascade();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PersistBatch persistBatch0 = PersistBatch.INSERT;
      serverConfig0.setPersistBatch(persistBatch0);
      serverConfig0.getPersistBatch();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setMaxCallStack(0);
      int int0 = serverConfig0.getMaxCallStack();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setGeometrySRID((-2423));
      int int0 = serverConfig0.getGeometrySRID();
      assertEquals((-2423), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDdlSeedSql("'fa");
      serverConfig0.getDdlSeedSql();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      BulkTableEventListener bulkTableEventListener0 = mock(BulkTableEventListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bulkTableEventListener0).toString();
      serverConfig0.add(bulkTableEventListener0);
      serverConfig0.getBulkTableEventListeners();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setPlatformConfig((PlatformConfig) null);
      // Undeclared exception!
      try { 
        serverConfig0.setDatabaseBooleanTrue("667mu*>Go}[V+SB/Dc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.ServerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        serverConfig0.loadSettings(propertiesWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("application.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        serverConfig0.loadFromProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("io.ebean.config.properties.LoadContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      Class<MySqlDbEncrypt> class0 = MySqlDbEncrypt.class;
      serverConfig0.service(class0);
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getJsonFactory();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      String string0 = serverConfig0.getName();
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("db", string0);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setObjectMapper((Object) null);
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isExpressionEqualsWithNullAsNoop();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getCurrentTenantProvider();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getJsonDateTime();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ClassLoadConfig classLoadConfig0 = serverConfig0.getClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        serverConfig0.loadDocStoreSettings(propertiesWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDatabasePlatform();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isExpressionNativeIlike();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      Class<PostgresDbEncrypt> class0 = PostgresDbEncrypt.class;
      serverConfig0.serviceLoad(class0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getObjectMapper();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.addMappingLocation("");
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.runDbMigration((DataSource) null);
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      // Undeclared exception!
      try { 
        serverConfig0.appliedPersistBatchOnCascade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.ServerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PersistBatch persistBatch0 = PersistBatch.ALL;
      serverConfig0.setPersistBatchOnCascade(persistBatch0);
      serverConfig0.appliedPersistBatchOnCascade();
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPersistenceContextScope();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.addPackage("");
      serverConfig0.getPackages();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      Class<SimpleAesEncryptor> class0 = SimpleAesEncryptor.class;
      serverConfig0.addClass(class0);
      serverConfig0.getClasses();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setAllQuotedIdentifiers(true);
      boolean boolean0 = serverConfig0.isAllQuotedIdentifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setAllQuotedIdentifiers(false);
      assertFalse(serverConfig0.isAllQuotedIdentifiers());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setPersistBatching(true);
      assertEquals(PersistBatch.ALL, serverConfig0.getPersistBatch());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setPersistBatching(false);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(PersistBatch.NONE, serverConfig0.getPersistBatch());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDisableL2Cache();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getQueryCacheMaxSize();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(1000, int0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDdlCreateOnly(false);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertFalse(serverConfig0.isDdlCreateOnly());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setNotifyL2CacheInForeground(true);
      assertTrue(serverConfig0.isNotifyL2CacheInForeground());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryCacheMaxIdleTime((-1798));
      int int0 = serverConfig0.getQueryCacheMaxIdleTime();
      assertEquals((-1798), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isCollectQueryStatsByNode();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getServerCachePlugin();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      TenantMode tenantMode0 = TenantMode.CATALOG;
      serverConfig0.setTenantMode(tenantMode0);
      serverConfig0.getTenantMode();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setContainerConfig((ContainerConfig) null);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DbType dbType0 = DbType.BIGINT;
      Platform platform0 = Platform.ORACLE;
      serverConfig0.addCustomMapping(dbType0, "arwdDxt", platform0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DbConstraintNaming dbConstraintNaming0 = new DbConstraintNaming();
      serverConfig0.setConstraintNaming(dbConstraintNaming0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDdlRun(false);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertFalse(serverConfig0.isDdlRun());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDdlGenerate(false);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertFalse(serverConfig0.isDdlGenerate());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      Stack<BeanFindController> stack0 = new Stack<BeanFindController>();
      serverConfig0.setFindControllers(stack0);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getBackgroundExecutorShutdownSecs();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(30, int0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.VARCHAR;
      serverConfig0.setDbUuid(platformConfig_DbUuid0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setPersistBatchSize((-776));
      int int0 = serverConfig0.getPersistBatchSize();
      assertEquals((-776), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPersistListeners();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPlatformConfig();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
      serverConfig0.setReadOnlyDataSource(pGPoolingDataSource0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setChangeLogAsync(false);
      assertFalse(serverConfig0.isChangeLogAsync());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setEncryptKeyManager((EncryptKeyManager) null);
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setEagerFetchLobs(false);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertFalse(serverConfig0.isEagerFetchLobs());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setResourceDirectory("Method not allowed on Map. Please use List instead.");
      serverConfig0.getResourceDirectory();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention("w_NzV%Q h`n");
      serverConfig0.setNamingConvention(matchingNamingConvention0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDataSourceConfig();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      BeanList<BeanPersistListener> beanList0 = new BeanList<BeanPersistListener>();
      serverConfig0.setPersistListeners(beanList0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setJodaLocalTimeMode("");
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setEncryptor((Encryptor) null);
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getServiceObject("");
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      
      serverConfig0.setAsOfViewSuffix("9jo7qDg]3ARk.xJ_Q_^");
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      LinkedList<BeanPersistController> linkedList0 = new LinkedList<BeanPersistController>();
      serverConfig0.setPersistControllers(linkedList0);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getJdbcFetchSizeFindEach();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, int0);
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setLocalTimeWithNanos(false);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertFalse(serverConfig0.isLocalTimeWithNanos());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryCacheMaxSize(74);
      assertEquals(74, serverConfig0.getQueryCacheMaxSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      boolean boolean0 = serverConfig0.isDefaultServer();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(boolean0);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPostConstructListeners();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setJdbcFetchSizeFindEach(21600);
      assertEquals(21600, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      PersistenceContextScope persistenceContextScope0 = PersistenceContextScope.QUERY;
      serverConfig0.setPersistenceContextScope(persistenceContextScope0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getServerConfigStartupListeners();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isSkipCacheAfterWrite();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      IdGenerator idGenerator0 = mock(IdGenerator.class, new ViolatedAssumptionAnswer());
      serverConfig0.add(idGenerator0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isLocalTimeWithNanos();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setJdbcFetchSizeFindList(10000);
      int int0 = serverConfig0.getJdbcFetchSizeFindList();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getPersistBatchSize();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, int0);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryAdapters((List<BeanQueryAdapter>) null);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      String string0 = serverConfig0.getAsOfSysPeriod();
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", string0);
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getCacheMaxSize();
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10000, int0);
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getEncryptDeployManager();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCollectQueryOrigins(false);
      assertFalse(serverConfig0.isCollectQueryOrigins());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isUpdateChangesOnly();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DefaultChangeLogRegister defaultChangeLogRegister0 = new DefaultChangeLogRegister(false);
      serverConfig0.setChangeLogRegister(defaultChangeLogRegister0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getCurrentUserProvider();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUpdatesDeleteMissingChildren(true);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isUpdatesDeleteMissingChildren());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isNotifyL2CacheInForeground();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabasePlatformName("arwdDxt");
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getLazyLoadBatchSize();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, int0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      String string0 = serverConfig0.getHistoryTableSuffix();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setLazyLoadBatchSize((-756));
      assertEquals((-756), serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDurationWithNanos(true);
      assertTrue(serverConfig0.isDurationWithNanos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getProperties();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      OracleDbEncrypt oracleDbEncrypt0 = new OracleDbEncrypt();
      serverConfig0.setDbEncrypt(oracleDbEncrypt0);
      serverConfig0.getDbEncrypt();
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUpdateChangesOnly(false);
      assertFalse(serverConfig0.isUpdateChangesOnly());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDatabasePlatformName();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabaseSequenceBatchSize(0);
      assertEquals(0, serverConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPersistControllers();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getSlowQueryListener();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDataSource();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getIdGenerators();
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isTransactionRollbackOnChecked();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setExpressionEqualsWithNullAsNoop(false);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertFalse(serverConfig0.isExpressionEqualsWithNullAsNoop());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDataSourceJndiName();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setChangeLogIncludeInserts(true);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isChangeLogIncludeInserts());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setExplicitTransactionBeginMode(false);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertFalse(serverConfig0.isExplicitTransactionBeginMode());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getTenantMode();
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setMappingLocations((List<String>) null);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setPlatformConfig((PlatformConfig) null);
      // Undeclared exception!
      try { 
        serverConfig0.getDatabaseBooleanTrue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      // Undeclared exception!
      try { 
        serverConfig0.loadFromProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.properties.PropertiesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ProfilingConfig profilingConfig0 = serverConfig0.getProfilingConfig();
      serverConfig0.setProfilingConfig(profilingConfig0);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPackages();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setEncryptDeployManager((EncryptDeployManager) null);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      JsonConfig.Include jsonConfig_Include0 = JsonConfig.Include.NON_EMPTY;
      serverConfig0.setJsonInclude(jsonConfig_Include0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      boolean boolean0 = serverConfig0.isRegister();
      assertTrue(boolean0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getQueryCacheMaxTimeToLive();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(21600, int0);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      String string0 = serverConfig0.getTenantPartitionColumn();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.add((BeanPersistController) null);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCacheMaxIdleTime((-2093));
      assertEquals((-2093), serverConfig0.getCacheMaxIdleTime());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setAutoCommitMode(false);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertFalse(serverConfig0.isAutoCommitMode());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setTenantSchemaProvider((TenantSchemaProvider) null);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.add((BeanPostLoad) null);
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "com.fasterxml.jackson.databind.deser.impl.PropertyValue", "");
      serverConfig0.setDataSource(jdbcConnectionPool0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getJsonInclude();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDisableClasspathSearch(false);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertFalse(serverConfig0.isDisableClasspathSearch());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getQueryBatchSize();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, int0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUuidStateFile("");
      serverConfig0.getUuidStateFile();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getClasses();
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDocStoreOnly();
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDdlInitSql((String) null);
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getIdType();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DefaultChangeLogListener defaultChangeLogListener0 = new DefaultChangeLogListener();
      serverConfig0.setChangeLogListener(defaultChangeLogListener0);
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDisableClasspathSearch();
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getAutoTuneConfig();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ServerConfigStartup serverConfigStartup0 = mock(ServerConfigStartup.class, new ViolatedAssumptionAnswer());
      serverConfig0.addServerConfigStartup(serverConfigStartup0);
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DocStoreConfig docStoreConfig0 = serverConfig0.getDocStoreConfig();
      serverConfig0.setDocStoreConfig(docStoreConfig0);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getMappingLocations();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getUuidStateFile();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isChangeLogIncludeInserts();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isChangeLogAsync();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDataSourceJndiName("FkD<<`DvU`61i\"?mUl");
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDataTimeZone();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getChangeLogListener();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getResourceDirectory();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      AutoTuneConfig autoTuneConfig0 = new AutoTuneConfig();
      serverConfig0.setAutoTuneConfig(autoTuneConfig0);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      
      serverConfig0.setAsOfSysPeriod("/XbjAewf");
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDbOffline();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      IdType idType0 = IdType.GENERATOR;
      serverConfig0.setIdType(idType0);
      serverConfig0.getIdType();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDatabaseBooleanTrue();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryBatchSize(2236);
      assertEquals(2236, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDurationWithNanos();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      serverConfig0.setPackages(linkedList0);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertTrue(serverConfig0.isDefaultServer());
      
      serverConfig0.setDefaultServer(false);
      assertFalse(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDdlRun();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getEncryptor();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getChangeLogPrepare();
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getReadOnlyDataSource();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getTenantSchemaProvider();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DbType dbType0 = DbType.DATE;
      serverConfig0.addCustomMapping(dbType0, "-=Pw6xJH?LN");
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertTrue(serverConfig0.isRegister());
      
      serverConfig0.setRegister(false);
      assertFalse(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ArrayList<BeanPostLoad> arrayList0 = new ArrayList<BeanPostLoad>();
      serverConfig0.setPostLoaders(arrayList0);
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isUpdateAllPropertiesInBatch();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getExternalTransactionManager();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getCacheMaxTimeToLive();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(21600, int0);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUseJavaxValidationNotNull(true);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isUseJavaxValidationNotNull());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isAllQuotedIdentifiers();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getGeometrySRID();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setExternalTransactionManager((ExternalTransactionManager) null);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDatabaseSequenceBatchSize();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUseJtaTransactionManager(false);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertFalse(serverConfig0.isUseJtaTransactionManager());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCurrentUserProvider((CurrentUserProvider) null);
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getQueryCacheMaxIdleTime();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(600, int0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCacheMaxTimeToLive((-1798));
      assertEquals((-1798), serverConfig0.getCacheMaxTimeToLive());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isUseJtaTransactionManager();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPersistBatchOnCascade();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getMaxCallStack();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(5, int0);
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getReadAuditPrepare();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ServerConfig.UuidVersion serverConfig_UuidVersion0 = ServerConfig.UuidVersion.VERSION4;
      serverConfig0.setUuidVersion(serverConfig_UuidVersion0);
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.add((BeanQueryAdapter) null);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setReadAuditLogger((ReadAuditLogger) null);
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setReadAuditPrepare((ReadAuditPrepare) null);
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabaseBooleanFalse("");
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDocStoreOnly(false);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertFalse(serverConfig0.isDocStoreOnly());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getCacheMaxIdleTime();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(600, int0);
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setSlowQueryListener((SlowQueryListener) null);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setExpressionNativeIlike(false);
      assertFalse(serverConfig0.isExpressionNativeIlike());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      String string0 = serverConfig0.getAsOfViewSuffix();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", string0);
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setBackgroundExecutorShutdownSecs(0);
      assertEquals(0, serverConfig0.getBackgroundExecutorShutdownSecs());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDefaultOrderById(true);
      boolean boolean0 = serverConfig0.isDefaultOrderById();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDdlCreateOnly();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.loadTestProperties();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isAutoReadOnlyDataSource();
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isUpdatesDeleteMissingChildren();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DefaultServerCachePlugin defaultServerCachePlugin0 = new DefaultServerCachePlugin();
      serverConfig0.setServerCachePlugin(defaultServerCachePlugin0);
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPostLoaders();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      
      serverConfig0.setTenantPartitionColumn("2~b6z5");
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isEagerFetchLobs();
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getTenantCatalogProvider();
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DataSourceConfig dataSourceConfig0 = new DataSourceConfig();
      serverConfig0.setDataSourceConfig(dataSourceConfig0);
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabasePlatform((DatabasePlatform) null);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setSlowQueryMillis(1L);
      long long0 = serverConfig0.getSlowQueryMillis();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getEncryptKeyManager();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabaseBooleanTrue("latin1_german1_ci");
      serverConfig0.getDatabaseBooleanTrue();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryPlanTTLSeconds(0);
      assertEquals(0, serverConfig0.getQueryPlanTTLSeconds());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDisableL2Cache(false);
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertFalse(serverConfig0.isDisableL2Cache());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getQueryPlanTTLSeconds();
      assertTrue(serverConfig0.isRegister());
      assertEquals(300, int0);
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDdlGenerate();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.putServiceObject("Hss?:>", "Hss?:>");
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setAutoReadOnlyDataSource(true);
      boolean boolean0 = serverConfig0.isAutoReadOnlyDataSource();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      
      serverConfig0.setHistoryTableSuffix("L7tR%");
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getReadAuditLogger();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DbMigrationConfig dbMigrationConfig0 = serverConfig0.getMigrationConfig();
      serverConfig0.setMigrationConfig(dbMigrationConfig0);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getNamingConvention();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isUseJavaxValidationNotNull();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getBackgroundExecutorSchedulePoolSize();
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(1, int0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDbOffline(false);
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertFalse(serverConfig0.isDbOffline());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      JsonConfig.DateTime jsonConfig_DateTime0 = JsonConfig.DateTime.MILLIS;
      serverConfig0.setJsonDateTime(jsonConfig_DateTime0);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getUuidVersion();
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isExplicitTransactionBeginMode();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      serverConfig0.setClassLoadConfig(classLoadConfig0);
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDdlInitSql();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isDefaultOrderById();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getSlowQueryMillis();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      assertEquals("db", serverConfig0.getName());
      
      serverConfig0.setName((String) null);
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCacheMaxSize((-859));
      assertEquals((-859), serverConfig0.getCacheMaxSize());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getChangeLogRegister();
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.loadFromProperties();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(300, serverConfig0.getQueryPlanTTLSeconds());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getFindControllers();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCollectQueryStatsByNode(true);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isCollectQueryStatsByNode());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setSkipCacheAfterWrite(true);
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isSkipCacheAfterWrite());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getConstraintNaming();
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setTransactionRollbackOnChecked(false);
      boolean boolean0 = serverConfig0.isTransactionRollbackOnChecked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getBulkTableEventListeners();
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getJodaLocalTimeMode();
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      serverConfig0.setJsonFactory(jsonFactory0);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("db", serverConfig0.getName());
      assertEquals(20, serverConfig0.getPersistBatchSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setTenantCatalogProvider((TenantCatalogProvider) null);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setRunMigration(false);
      assertEquals("db", serverConfig0.getName());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DefaultChangeLogPrepare defaultChangeLogPrepare0 = new DefaultChangeLogPrepare();
      serverConfig0.setChangeLogPrepare(defaultChangeLogPrepare0);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getTenantDataSourceProvider();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.add((BeanPostConstructListener) null);
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getContainerConfig();
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setCurrentTenantProvider((CurrentTenantProvider) null);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setTenantDataSourceProvider((TenantDataSourceProvider) null);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      DataSourceConfig dataSourceConfig0 = serverConfig0.getReadOnlyDataSourceConfig();
      serverConfig0.setReadOnlyDataSourceConfig(dataSourceConfig0);
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("db", serverConfig0.getName());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getPersistBatch();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setBackgroundExecutorSchedulePoolSize(0);
      assertEquals(0, serverConfig0.getBackgroundExecutorSchedulePoolSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isAutoCommitMode();
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDbEncrypt();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDdlSeedSql();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      int int0 = serverConfig0.getJdbcFetchSizeFindList();
      assertTrue(serverConfig0.isDefaultServer());
      assertTrue(serverConfig0.isRegister());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals(0, int0);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setUpdateAllPropertiesInBatch(true);
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isUpdateAllPropertiesInBatch());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getQueryAdapters();
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("db", serverConfig0.getName());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setQueryCacheMaxTimeToLive(1);
      assertEquals(1, serverConfig0.getQueryCacheMaxTimeToLive());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDatabaseSequenceBatch((-3525));
      assertEquals((-3525), serverConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.getDatabaseBooleanFalse();
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertTrue(serverConfig0.isRegister());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.isCollectQueryOrigins();
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("db", serverConfig0.getName());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertTrue(serverConfig0.isRegister());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ServerConfig serverConfig0 = new ServerConfig();
      serverConfig0.setDataTimeZone("ISoq");
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals("db", serverConfig0.getName());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertTrue(serverConfig0.isRegister());
  }
}
