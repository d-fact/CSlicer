/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:07:40 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.ClassLoadConfig;
import java.net.URL;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.LocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassLoadConfig_ESTest extends ClassLoadConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = new ClassLoadConfig.ClassLoaderContext(classLoader0);
      Class<?> class0 = classLoadConfig_ClassLoaderContext0.forName("java.nio.file.Path");
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = classLoadConfig0.context;
      Enumeration<URL> enumeration0 = classLoadConfig_ClassLoaderContext0.getResources("javax.validation.constraints.NotNull");
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = classLoadConfig0.context;
      ClassLoader classLoader0 = classLoadConfig_ClassLoaderContext0.getClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = classLoadConfig0.context;
      try { 
        classLoadConfig_ClassLoaderContext0.forName("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = classLoadConfig0.context;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        classLoadConfig_ClassLoaderContext0.classForName("", classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = new ClassLoadConfig.ClassLoaderContext(classLoader0);
      ClassLoader classLoader1 = classLoadConfig_ClassLoaderContext0.contextLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      LocalDateTime localDateTime0 = (LocalDateTime)classLoadConfig0.newInstance("org.joda.time.LocalDateTime");
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isPresent("javax.validation.constraints.NotNull");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader1);
      boolean boolean0 = classLoadConfig0.isJodaTimePresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader1);
      boolean boolean0 = classLoadConfig0.isJavaxValidationAnnotationsPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader1);
      boolean boolean0 = classLoadConfig0.isJacksonObjectMapperPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader1);
      boolean boolean0 = classLoadConfig0.isJacksonAnnotationsPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      Class<?> class0 = classLoadConfig0.forName("org.joda.time.chrono.BasicDayOfMonthDateTimeField");
      assertEquals(0, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      Class<?> class0 = classLoadConfig0.forName("javax.validation.constraints.NotNull");
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      // Undeclared exception!
      try { 
        classLoadConfig0.forName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      try { 
        classLoadConfig0.forName(":a8k)]WZ .Xi91");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isPresent("uHu+_UbahtlZ'V7d^:T]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      ClassLoader classLoader0 = classLoadConfig0.getClassLoader();
      ClassLoadConfig.ClassLoaderContext classLoadConfig_ClassLoaderContext0 = classLoadConfig0.context;
      Class<?> class0 = classLoadConfig_ClassLoaderContext0.classForName("javax.validation.constraints.NotNull", classLoader0);
      assertEquals("interface javax.validation.constraints.NotNull", class0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      Enumeration<URL> enumeration0 = classLoadConfig0.getResources("PCX8={pX7no");
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      boolean boolean0 = classLoadConfig0.isJodaTimePresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      boolean boolean0 = classLoadConfig0.isJava7Present();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isJavaTimePresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isJavaxPostConstructPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      ClassLoader classLoader1 = classLoadConfig0.getClassLoader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isJacksonObjectMapperPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      // Undeclared exception!
      try { 
        classLoadConfig0.newInstance("uHu+_UbahtlZ'V7d^:T]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error constructing uHu+_UbahtlZ'V7d^:T]
         //
         verifyException("io.ebean.config.ClassLoadConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      boolean boolean0 = classLoadConfig0.isJavaxValidationAnnotationsPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      boolean boolean0 = classLoadConfig0.isJacksonAnnotationsPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      boolean boolean0 = classLoadConfig0.isJavaxJAXBPresent();
      assertTrue(boolean0);
  }
}
