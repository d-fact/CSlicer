/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:47:48 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.spi.LoggingEvent;
import io.ebean.annotation.Platform;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.DbMigrationConfig;
import io.ebean.config.PropertiesWrapper;
import io.ebean.migration.MigrationConfig;
import java.util.Hashtable;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DbMigrationConfig_ESTest extends DbMigrationConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.readEnvironment("migration.patchResetChecksumOn");
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertNull(string0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setStrictMode(false);
      boolean boolean0 = dbMigrationConfig0.isStrictMode();
      assertFalse(boolean0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setVersion("1aGl]Zbf{T`");
      String string0 = dbMigrationConfig0.getVersion();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNotNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("1aGl]Zbf{T`", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.runnerConfig = null;
      dbMigrationConfig0.getRunnerConfig();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      MigrationConfig migrationConfig0 = dbMigrationConfig0.runnerConfig;
      migrationConfig0.setSkipChecksum(true);
      dbMigrationConfig0.getRunnerConfig();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      MigrationConfig migrationConfig0 = dbMigrationConfig0.getRunnerConfig();
      migrationConfig0.setCreateSchemaIfNotExists(true);
      dbMigrationConfig0.getRunnerConfig();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.runPlaceholders = "model";
      String string0 = dbMigrationConfig0.getRunPlaceholders();
      assertEquals("model", string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.runPlaceholders = "";
      String string0 = dbMigrationConfig0.getRunPlaceholders();
      assertNotNull(string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("", string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      LoggingEvent loggingEvent0 = new LoggingEvent();
      Map<String, String> map0 = loggingEvent0.getMdc();
      dbMigrationConfig0.runPlaceholderMap = map0;
      dbMigrationConfig0.getRunPlaceholderMap();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("migration.patchInsertOn", "uLBJ:PCY1");
      dbMigrationConfig0.setRunPlaceholderMap(hashtable0);
      Map<String, String> map0 = dbMigrationConfig0.getRunPlaceholderMap();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertNotNull(map0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.patchResetChecksumOn = "EWrz`w\"1P>RndHiIQ";
      String string0 = dbMigrationConfig0.getPatchResetChecksumOn();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertNotNull(string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("EWrz`w\"1P>RndHiIQ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.patchResetChecksumOn = "";
      String string0 = dbMigrationConfig0.getPatchResetChecksumOn();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setPatchInsertOn("=DeWq%*");
      String string0 = dbMigrationConfig0.getPatchInsertOn();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertNotNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("=DeWq%*", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setPatchInsertOn("");
      String string0 = dbMigrationConfig0.getPatchInsertOn();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setName("_w+^L");
      String string0 = dbMigrationConfig0.getName();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNotNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("_w+^L", string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.name = "";
      String string0 = dbMigrationConfig0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      
      dbMigrationConfig0.setModelSuffix((String) null);
      String string0 = dbMigrationConfig0.getModelSuffix();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      
      dbMigrationConfig0.setModelPath((String) null);
      String string0 = dbMigrationConfig0.getModelPath();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      
      dbMigrationConfig0.modelPath = "";
      String string0 = dbMigrationConfig0.getModelPath();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      
      dbMigrationConfig0.setMigrationPath((String) null);
      String string0 = dbMigrationConfig0.getMigrationPath();
      assertNull(string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      
      dbMigrationConfig0.setMigrationPath("");
      String string0 = dbMigrationConfig0.getMigrationPath();
      assertNotNull(string0);
      assertEquals("", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      
      dbMigrationConfig0.metaTable = "";
      String string0 = dbMigrationConfig0.getMetaTable();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setGeneratePendingDrop("migration.applyPrefix");
      String string0 = dbMigrationConfig0.getGeneratePendingDrop();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("migration.applyPrefix", string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setGeneratePendingDrop("");
      String string0 = dbMigrationConfig0.getGeneratePendingDrop();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("", string0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.ddlHeader = "9EsisXfsra1r&[p#";
      String string0 = dbMigrationConfig0.getDdlHeader();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("9EsisXfsra1r&[p#", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.ddlHeader = "";
      String string0 = dbMigrationConfig0.getDdlHeader();
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("", string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.dbUsername = "7{N";
      String string0 = dbMigrationConfig0.getDbUsername();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("7{N", string0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setDbUsername("");
      String string0 = dbMigrationConfig0.getDbUsername();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.dbPassword = "5m+$[ab|tMh%1,^k70";
      String string0 = dbMigrationConfig0.getDbPassword();
      assertEquals("5m+$[ab|tMh%1,^k70", string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertNotNull(string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setDbPassword("");
      String string0 = dbMigrationConfig0.getDbPassword();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      
      dbMigrationConfig0.applySuffix = null;
      dbMigrationConfig0.getApplySuffix();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      
      dbMigrationConfig0.applySuffix = "";
      String string0 = dbMigrationConfig0.getApplySuffix();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.applyPrefix = null;
      String string0 = dbMigrationConfig0.getApplyPrefix();
      assertNull(string0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setApplyPrefix("S7");
      String string0 = dbMigrationConfig0.getApplyPrefix();
      assertNotNull(string0);
      assertEquals("S7", dbMigrationConfig0.getApplyPrefix());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      // Undeclared exception!
      try { 
        dbMigrationConfig0.readEnvironment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      // Undeclared exception!
      try { 
        dbMigrationConfig0.readEnvironment("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      // Undeclared exception!
      try { 
        dbMigrationConfig0.loadSettings((PropertiesWrapper) null, ".sql");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.DbMigrationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.runnerConfig = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        dbMigrationConfig0.createRunner(classLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.DbMigrationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getDbPassword();
      assertNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getDbUsername();
      assertNull(string0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      Properties properties0 = new Properties();
      MigrationConfig migrationConfig0 = dbMigrationConfig0.getRunnerConfig();
      dbMigrationConfig0.setPatchResetChecksumOn("?@]m ?xR");
      ClassLoader classLoader0 = migrationConfig0.getClassLoader();
      dbMigrationConfig0.createRunner(classLoader0, properties0);
      assertEquals(".sql", migrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("?@]m ?xR", dbMigrationConfig0.getPatchResetChecksumOn());
      assertEquals("dbmigration", migrationConfig0.getMigrationPath());
      assertEquals("db_migration", migrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      boolean boolean0 = dbMigrationConfig0.isEmpty("");
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertTrue(boolean0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      boolean boolean0 = dbMigrationConfig0.isEmpty("rMgJn]e/< ZZT");
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getName();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getVersion();
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, classLoadConfig0);
      dbMigrationConfig0.ddlHeader = "";
      dbMigrationConfig0.loadSettings(propertiesWrapper0, "");
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertFalse(dbMigrationConfig0.isIncludeGeneratedFileComment());
      assertEquals("", dbMigrationConfig0.getApplyPrefix());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.ddlHeader = "\"M[-pTKu*hI2U3E)";
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      dbMigrationConfig0.loadSettings(propertiesWrapper0, (String) null);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("", dbMigrationConfig0.getApplyPrefix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertFalse(dbMigrationConfig0.isIncludeGeneratedFileComment());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, classLoadConfig0);
      dbMigrationConfig0.loadSettings(propertiesWrapper0, "org.joda.time.LocalDateTime");
      assertEquals("", dbMigrationConfig0.getApplyPrefix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertFalse(dbMigrationConfig0.isIncludeGeneratedFileComment());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      boolean boolean0 = dbMigrationConfig0.isStrictMode();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      boolean boolean0 = dbMigrationConfig0.isRunMigration();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertFalse(boolean0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getRunPlaceholders();
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getApplySuffix();
      assertNotNull(string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".sql", string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setVersion("");
      String string0 = dbMigrationConfig0.getVersion();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("", string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertNotNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getGeneratePendingDrop();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      
      dbMigrationConfig0.setModelSuffix("");
      String string0 = dbMigrationConfig0.getModelSuffix();
      assertEquals("", dbMigrationConfig0.getModelSuffix());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setRunPlaceholders("/m/t%~bGo'<");
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setRunMigration(true);
      boolean boolean0 = dbMigrationConfig0.isRunMigration();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertTrue(boolean0);
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getPatchResetChecksumOn();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      
      dbMigrationConfig0.setMetaTable((String) null);
      String string0 = dbMigrationConfig0.getMetaTable();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertNull(string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      MigrationConfig migrationConfig0 = dbMigrationConfig0.getRunnerConfig();
      ClassLoader classLoader0 = migrationConfig0.getClassLoader();
      Properties properties0 = new Properties();
      dbMigrationConfig0.createRunner(classLoader0, properties0);
      assertEquals("dbmigration", migrationConfig0.getMigrationPath());
      assertEquals("db_migration", migrationConfig0.getMetaTable());
      assertEquals(".sql", migrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      Platform platform0 = Platform.SQLSERVER;
      dbMigrationConfig0.setPlatform(platform0);
      dbMigrationConfig0.getPlatform();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.getRunPlaceholderMap();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertFalse(dbMigrationConfig0.isIncludeGeneratedFileComment());
      
      dbMigrationConfig0.setIncludeGeneratedFileComment(true);
      boolean boolean0 = dbMigrationConfig0.isIncludeGeneratedFileComment();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getModelSuffix();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getMigrationPath();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", string0);
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getApplyPrefix();
      assertNotNull(string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      
      dbMigrationConfig0.setApplySuffix((String) null);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getModelPath();
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("model", string0);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.setPatchInsertOn("=DeWq%*");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      dbMigrationConfig0.createRunner(classLoader0, (Properties) null);
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("=DeWq%*", dbMigrationConfig0.getPatchInsertOn());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getPatchInsertOn();
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNull(string0);
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getMetaTable();
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertNotNull(string0);
      assertEquals("db_migration", string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      String string0 = dbMigrationConfig0.getDdlHeader();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertNull(string0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      boolean boolean0 = dbMigrationConfig0.isIncludeGeneratedFileComment();
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals("model", dbMigrationConfig0.getModelPath());
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertFalse(boolean0);
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DbMigrationConfig dbMigrationConfig0 = new DbMigrationConfig();
      dbMigrationConfig0.getPlatform();
      assertEquals(".sql", dbMigrationConfig0.getApplySuffix());
      assertEquals("db_migration", dbMigrationConfig0.getMetaTable());
      assertEquals("dbmigration", dbMigrationConfig0.getMigrationPath());
      assertEquals(".model.xml", dbMigrationConfig0.getModelSuffix());
      assertEquals("model", dbMigrationConfig0.getModelPath());
  }
}
