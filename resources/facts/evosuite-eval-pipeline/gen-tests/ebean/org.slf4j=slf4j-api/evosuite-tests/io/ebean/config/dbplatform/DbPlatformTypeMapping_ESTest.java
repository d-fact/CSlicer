/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:57:09 GMT 2019
 */

package io.ebean.config.dbplatform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.PlatformConfig;
import io.ebean.config.dbplatform.DbPlatformType;
import io.ebean.config.dbplatform.DbPlatformTypeMapping;
import io.ebean.config.dbplatform.DbType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DbPlatformTypeMapping_ESTest extends DbPlatformTypeMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("HSTORE", false);
      assertNull(dbPlatformType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbType dbType0 = DbType.BINARY;
      DbPlatformType dbPlatformType0 = new DbPlatformType("JSON", 16, 16);
      dbPlatformTypeMapping0.put(dbType0, dbPlatformType0);
      DbPlatformType dbPlatformType1 = dbPlatformTypeMapping0.lookup("binary", false);
      assertSame(dbPlatformType1, dbPlatformType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbType dbType0 = DbType.VARCHAR;
      DbPlatformType dbPlatformType0 = new DbPlatformType("INTEGER", (-2812), (-2812));
      dbPlatformTypeMapping0.put(dbType0, dbPlatformType0);
      DbPlatformType dbPlatformType1 = dbPlatformTypeMapping0.lookup("jsonvarchar", false);
      assertEquals("INTEGER", dbPlatformType1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbType dbType0 = DbType.LINESTRING;
      dbPlatformTypeMapping0.put(dbType0, (DbPlatformType) null);
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(dbType0);
      assertNull(dbPlatformType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbType dbType0 = DbType.JSONVARCHAR;
      DbPlatformType dbPlatformType0 = new DbPlatformType((String) null, 1281, 1281);
      dbPlatformTypeMapping0.put(dbType0, dbPlatformType0);
      DbPlatformType dbPlatformType1 = dbPlatformTypeMapping0.get(dbType0);
      assertEquals(1281, dbPlatformType1.getDefaultScale());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbType dbType0 = DbType.BOOLEAN;
      DbPlatformType dbPlatformType0 = dbType0.createPlatformType();
      DbPlatformType dbPlatformType1 = dbPlatformType0.withLength(5);
      dbPlatformTypeMapping0.put(dbType0, dbPlatformType1);
      DbPlatformType dbPlatformType2 = dbPlatformTypeMapping0.get(dbType0);
      assertEquals(5, dbPlatformType2.getDefaultLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbType dbType0 = DbType.BIT;
      DbPlatformType dbPlatformType0 = new DbPlatformType("s3A)|zYpnZCq;Zt\"e<", (-800), (-800));
      dbPlatformTypeMapping0.put(dbType0, dbPlatformType0);
      DbPlatformType dbPlatformType1 = dbPlatformTypeMapping0.get(dbType0);
      assertEquals((-800), dbPlatformType1.getDefaultLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(3);
      assertEquals(38, dbPlatformType0.getDefaultLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(2004);
      // Undeclared exception!
      try { 
        dbPlatformTypeMapping0.put((DbType) null, dbPlatformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      // Undeclared exception!
      try { 
        dbPlatformTypeMapping0.lookup((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DbPlatformTypeLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbType dbType0 = DbType.BINARY;
      dbPlatformTypeMapping0.put(dbType0, (DbPlatformType) null);
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.BINARY;
      // Undeclared exception!
      try { 
        dbPlatformTypeMapping0.config(false, platformConfig_DbUuid0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DbPlatformTypeMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbType dbType0 = DbType.INTEGER;
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(dbType0);
      assertEquals("integer", dbPlatformType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.VARCHAR;
      dbPlatformTypeMapping0.config(true, platformConfig_DbUuid0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.AUTO_BINARY;
      dbPlatformTypeMapping0.config(true, platformConfig_DbUuid0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("JSON", false);
      assertEquals("clob", dbPlatformType0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("jsonb", true);
      assertEquals("varchar", dbPlatformType0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("jsonblob", false);
      assertEquals(0, dbPlatformType0.getDefaultLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      // Undeclared exception!
      try { 
        dbPlatformTypeMapping0.lookup("xv)`3EHF", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown type [xv)`3EHF] - not standard sql type
         //
         verifyException("io.ebean.config.dbplatform.DbPlatformTypeMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("JSON", false);
      assertEquals("json", dbPlatformType0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(16);
      String string0 = dbPlatformType0.renderType(16, 16, false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = new DbPlatformTypeMapping();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.lookup("jsonclob", false);
      assertEquals(0, dbPlatformType0.getDefaultLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DbPlatformTypeMapping dbPlatformTypeMapping0 = DbPlatformTypeMapping.logicalTypes();
      DbPlatformType dbPlatformType0 = dbPlatformTypeMapping0.get(24);
      assertNull(dbPlatformType0);
  }
}
