/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:43:09 GMT 2019
 */

package io.ebean.config.dbplatform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.BackgroundExecutor;
import io.ebean.config.dbplatform.h2.H2SequenceIdGenerator;
import io.ebean.config.dbplatform.postgres.PostgresSequenceIdGenerator;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import java.util.concurrent.RejectedExecutionException;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGPoolingDataSource;
import org.sqlite.javax.SQLiteConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SequenceBatchIdGenerator_ESTest extends SequenceBatchIdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(1071, 28, "~X_5{8!?-F/k}r^`Xr@");
      SQLiteConnectionPoolDataSource sQLiteConnectionPoolDataSource0 = new SQLiteConnectionPoolDataSource();
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteConnectionPoolDataSource0, "", 28);
      h2SequenceIdGenerator0.preAllocateIds(88);
      assertEquals("", h2SequenceIdGenerator0.getName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(2927, 2927, ">5W+18`*=D9W-`7");
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, (DataSource) null, ">5W+18`*=D9W-`7", 2927);
      h2SequenceIdGenerator0.preAllocateIds((-4960));
      assertEquals(">5W+18`*=D9W-`7", h2SequenceIdGenerator0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(0, 0, "U{m}{x#Fy/l.$6Lfhc3");
      SQLiteConnectionPoolDataSource sQLiteConnectionPoolDataSource0 = new SQLiteConnectionPoolDataSource();
      defaultBackgroundExecutor0.shutdown();
      PostgresSequenceIdGenerator postgresSequenceIdGenerator0 = new PostgresSequenceIdGenerator(defaultBackgroundExecutor0, sQLiteConnectionPoolDataSource0, "#hNT.z,zzR`C1Q", 104);
      // Undeclared exception!
      try { 
        postgresSequenceIdGenerator0.preAllocateIds(281);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task io.ebean.config.dbplatform.SequenceIdGenerator$$Lambda$55/462385456@ffd6a0 rejected from java.util.concurrent.ThreadPoolExecutor@5a1b4c0b[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator((BackgroundExecutor) null, (DataSource) null, "", 28);
      // Undeclared exception!
      try { 
        h2SequenceIdGenerator0.preAllocateIds(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.SequenceIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(3, 3, (String) null);
      PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
      PostgresSequenceIdGenerator postgresSequenceIdGenerator0 = new PostgresSequenceIdGenerator(defaultBackgroundExecutor0, pGPoolingDataSource0, (String) null, 3);
      postgresSequenceIdGenerator0.preAllocateIds(3);
      assertTrue(postgresSequenceIdGenerator0.isDbSequence());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(0, 0, "U{m}{x#Fy/l.$6Lfhc3");
      SQLiteConnectionPoolDataSource sQLiteConnectionPoolDataSource0 = new SQLiteConnectionPoolDataSource();
      H2SequenceIdGenerator h2SequenceIdGenerator0 = new H2SequenceIdGenerator(defaultBackgroundExecutor0, sQLiteConnectionPoolDataSource0, "U{m}{x#Fy/l.$6Lfhc3", 0);
      h2SequenceIdGenerator0.preAllocateIds(0);
      assertEquals("U{m}{x#Fy/l.$6Lfhc3", h2SequenceIdGenerator0.getName());
  }
}
