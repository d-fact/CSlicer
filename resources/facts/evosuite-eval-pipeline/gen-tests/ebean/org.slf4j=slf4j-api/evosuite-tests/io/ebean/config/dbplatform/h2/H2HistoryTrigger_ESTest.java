/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:58:55 GMT 2019
 */

package io.ebean.config.dbplatform.h2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.jdbc.MultiHostConnectionProxy;
import com.mysql.jdbc.ReplicationMySQLConnection;
import io.ebean.config.dbplatform.h2.H2HistoryTrigger;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hsqldb.SessionInterface;
import org.hsqldb.jdbc.JDBCConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class H2HistoryTrigger_ESTest extends H2HistoryTrigger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[7];
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.fire((Connection) null, objectArray1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.h2.H2HistoryTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      JDBCConnection jDBCConnection0 = new JDBCConnection((SessionInterface) null);
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.init(jDBCConnection0, ";kX3(%.=", "DOCS", "getFetchDirection", true, 742);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.JDBCStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.init(replicationMySQLConnection0, "@F.;)n`AMho", "@F.;)n`AMho", "", true, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$1049518978 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.fire(replicationMySQLConnection0, objectArray0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$1049518978 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[0];
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.fire((Connection) null, objectArray1, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("io.ebean.config.dbplatform.h2.H2HistoryTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        h2HistoryTrigger0.fire((Connection) null, objectArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.h2.H2HistoryTrigger", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      h2HistoryTrigger0.fire((Connection) null, (Object[]) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      h2HistoryTrigger0.close();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      H2HistoryTrigger h2HistoryTrigger0 = new H2HistoryTrigger();
      h2HistoryTrigger0.remove();
  }
}
