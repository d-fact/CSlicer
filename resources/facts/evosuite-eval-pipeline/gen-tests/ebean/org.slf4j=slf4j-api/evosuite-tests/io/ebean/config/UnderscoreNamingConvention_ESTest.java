/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:55:58 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.TableName;
import io.ebean.config.UnderscoreNamingConvention;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.postgresql.core.TransactionState;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnderscoreNamingConvention_ESTest extends UnderscoreNamingConvention_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("TYPE_NAME");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      
      underscoreNamingConvention0.setDigitsCompressed(false);
      underscoreNamingConvention0.toUnderscoreFromCamel("_");
      assertFalse(underscoreNamingConvention0.isDigitsCompressed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      underscoreNamingConvention0.setForceUpperCase(false);
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("rollback");
      String string0 = underscoreNamingConvention0.toUnderscoreFromCamel("");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("rollback");
      String string0 = underscoreNamingConvention0.toCamelFromUnderscore("rollback");
      assertEquals("rollback", string0);
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("3@On]K F-3'iZg^<r");
      String string0 = underscoreNamingConvention0.toCamelFromUnderscore("");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("Oj~Q2O6bzO)JDu");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      
      underscoreNamingConvention0.setDigitsCompressed(false);
      boolean boolean0 = underscoreNamingConvention0.isDigitsCompressed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      Class<Object> class0 = Object.class;
      TableName tableName0 = underscoreNamingConvention0.getTableNameByConvention(class0);
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertEquals("object", tableName0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      Class<TransactionState> class0 = TransactionState.class;
      String string0 = underscoreNamingConvention0.getPropertyFromColumn(class0, "");
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      Class<TransactionState> class0 = TransactionState.class;
      String string0 = underscoreNamingConvention0.getColumnFromProperty(class0, "");
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("3@On]K F-3'iZg^<r");
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.toUnderscoreFromCamel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.CamelCaseHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.toCamelFromUnderscore("ResultSet.___in_column__268");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.toCamelFromUnderscore((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.CamelCaseHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("ResultSet.Unsupported_character_encoding____101");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getPropertyFromColumn(class0, "ResultSet.Unsupported_character_encoding____101");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("R_(|>r`RH:3");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getPropertyFromColumn(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.CamelCaseHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getForeignKey((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.CamelCaseHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("writeVariableHeader");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getColumnFromProperty(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.CamelCaseHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      boolean boolean0 = underscoreNamingConvention0.isForceUpperCase();
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      String string0 = underscoreNamingConvention0.getForeignKey("{table}_seq", "@Miu|G&e+vu");
      assertEquals("{table}_seq_@_miu|_g&e+vu", string0);
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      Class<String> class0 = String.class;
      String string0 = underscoreNamingConvention0.getPropertyFromColumn(class0, "@_Miu|_g&e+Vu");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertEquals("@Miu|G&e+vu", string0);
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("@_Miu|_g&e+Vu");
      Class<String> class0 = String.class;
      String string0 = underscoreNamingConvention0.getColumnFromProperty(class0, "{table}_seq_@_miu|_g&e+vu");
      assertTrue(underscoreNamingConvention0.isDigitsCompressed());
      assertEquals("{table}_seq_@_miu|_g&e+vu", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("rollback");
      boolean boolean0 = underscoreNamingConvention0.isDigitsCompressed();
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("rollback");
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getTableNameByConvention((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.UnderscoreNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("rollback");
      assertFalse(underscoreNamingConvention0.isForceUpperCase());
      
      underscoreNamingConvention0.setForceUpperCase(true);
      boolean boolean0 = underscoreNamingConvention0.isForceUpperCase();
      assertTrue(boolean0);
  }
}
