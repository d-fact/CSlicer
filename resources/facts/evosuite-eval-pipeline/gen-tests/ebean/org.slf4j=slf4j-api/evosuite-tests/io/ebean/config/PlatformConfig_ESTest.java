/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:15:28 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.annotation.Platform;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.PlatformConfig;
import io.ebean.config.PropertiesWrapper;
import io.ebean.config.dbplatform.DbType;
import io.ebean.config.dbplatform.IdType;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlatformConfig_ESTest extends PlatformConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.AUTO_BINARY_OPTIMIZED;
      boolean boolean0 = platformConfig_DbUuid0.useBinaryOptimized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.BINARY;
      boolean boolean0 = platformConfig_DbUuid0.useBinary();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      PlatformConfig platformConfig1 = new PlatformConfig(platformConfig0);
      assertEquals(4326, platformConfig1.getGeometrySRID());
      assertEquals(20, platformConfig1.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      IdType idType0 = IdType.EXTERNAL;
      platformConfig0.setIdType(idType0);
      platformConfig0.getIdType();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      assertEquals(4326, platformConfig0.getGeometrySRID());
      
      platformConfig0.setGeometrySRID(0);
      int int0 = platformConfig0.getGeometrySRID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setGeometrySRID((-254));
      int int0 = platformConfig0.getGeometrySRID();
      assertEquals((-254), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      
      platformConfig0.setDatabaseSequenceBatchSize(0);
      int int0 = platformConfig0.getDatabaseSequenceBatchSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setDatabaseSequenceBatchSize((-671));
      int int0 = platformConfig0.getDatabaseSequenceBatchSize();
      assertEquals((-671), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setDatabaseBooleanTrue("Uz^2xalPWEz");
      platformConfig0.getDatabaseBooleanTrue();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setDatabaseBooleanTrue("");
      platformConfig0.getDatabaseBooleanTrue();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setDatabaseBooleanFalse("CLOB");
      platformConfig0.getDatabaseBooleanFalse();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      DbType dbType0 = DbType.MULTIPOINT;
      Platform platform0 = Platform.SQLSERVER16;
      platformConfig0.addCustomMapping(dbType0, "38NSxj'Xx#=\"$", platform0);
      platformConfig0.getCustomTypeMappings();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((Properties) null, (ClassLoadConfig) null);
      // Undeclared exception!
      try { 
        platformConfig0.loadSettings(propertiesWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((String) null, (String) null, properties0, classLoadConfig0);
      platformConfig0.loadSettings(propertiesWrapper0);
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(PlatformConfig.DbUuid.AUTO_VARCHAR, platformConfig0.getDbUuid());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.getDatabaseBooleanFalse();
      assertEquals(4326, platformConfig0.getGeometrySRID());
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.isAllQuotedIdentifiers();
      assertEquals(4326, platformConfig0.getGeometrySRID());
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      int int0 = platformConfig0.getGeometrySRID();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setDatabaseBooleanFalse("");
      platformConfig0.getDatabaseBooleanFalse();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      int int0 = platformConfig0.getDatabaseSequenceBatchSize();
      assertEquals(4326, platformConfig0.getGeometrySRID());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.getCustomTypeMappings();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.BINARY;
      platformConfig0.setDbUuid(platformConfig_DbUuid0);
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.getIdType();
      assertEquals(4326, platformConfig0.getGeometrySRID());
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.getDbUuid();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.getDatabaseBooleanTrue();
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
      assertEquals(4326, platformConfig0.getGeometrySRID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      DbType dbType0 = DbType.BOOLEAN;
      platformConfig0.addCustomMapping(dbType0, "");
      assertEquals(4326, platformConfig0.getGeometrySRID());
      assertEquals(20, platformConfig0.getDatabaseSequenceBatchSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlatformConfig platformConfig0 = new PlatformConfig();
      platformConfig0.setAllQuotedIdentifiers(true);
      boolean boolean0 = platformConfig0.isAllQuotedIdentifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlatformConfig platformConfig0 = null;
      try {
        platformConfig0 = new PlatformConfig((PlatformConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PlatformConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlatformConfig.DbUuid platformConfig_DbUuid0 = PlatformConfig.DbUuid.BINARY;
      boolean boolean0 = platformConfig_DbUuid0.useNativeType();
      assertFalse(boolean0);
  }
}
