/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:53:50 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.MatchingNamingConvention;
import io.ebean.config.PropertiesWrapper;
import io.ebean.config.TableName;
import io.ebean.config.UnderscoreNamingConvention;
import io.ebean.config.dbplatform.DatabasePlatform;
import java.time.DayOfWeek;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractNamingConvention_ESTest extends AbstractNamingConvention_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      TableName tableName0 = new TableName("ix_", "{table}_seq", "{table}_seq");
      TableName tableName1 = underscoreNamingConvention0.getM2MJoinTableName(tableName0, tableName0);
      TableName tableName2 = underscoreNamingConvention0.getM2MJoinTableName(tableName1, tableName0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("{table}_seq_{table}_seq_{table}_seq", tableName2.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      TableName tableName0 = new TableName("{table}_seq_seq", "", "_Ys/7?[/Z.5eM%");
      TableName tableName1 = underscoreNamingConvention0.getM2MJoinTableName(tableName0, tableName0);
      TableName tableName2 = underscoreNamingConvention0.getM2MJoinTableName(tableName1, tableName1);
      assertEquals("_Ys/7?[/Z.5eM%_Ys/7?[/Z.5eM%_Ys/7?[/Z.5eM%_Ys/7?[/Z.5eM%", tableName2.getName());
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      TableName tableName0 = new TableName("{table}_seq_seq", "", "_Ys/7?[/Z.5eM%");
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getM2MJoinTableName(tableName0, tableName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.AbstractNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention(" of 4-char base64 unit: padding only legal as 3rd or 4th character");
      Class<DayOfWeek> class0 = DayOfWeek.class;
      TableName tableName0 = underscoreNamingConvention0.getTableNameByConvention(class0);
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getM2MJoinTableName(tableName0, tableName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.AbstractNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      assertTrue(matchingNamingConvention0.isUseForeignKeyPrefix());
      
      matchingNamingConvention0.setUseForeignKeyPrefix(false);
      assertFalse(matchingNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      underscoreNamingConvention0.loadFromProperties(propertiesWrapper0);
      assertEquals("", underscoreNamingConvention0.getSequenceFormat());
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      String string0 = underscoreNamingConvention0.quoteIdentifiers((String) null);
      assertNull(string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("l[ln9Hpnx");
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      String string0 = underscoreNamingConvention0.quoteIdentifiers("l[ln9Hpnx");
      assertEquals("l[ln9Hpnx", underscoreNamingConvention0.getSequenceFormat());
      assertEquals("l[ln9Hpnx", string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("l[ln9Hpnx");
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      String string0 = underscoreNamingConvention0.quoteIdentifiers("");
      assertEquals("l[ln9Hpnx", underscoreNamingConvention0.getSequenceFormat());
      assertEquals("", string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      
      underscoreNamingConvention0.useForeignKeyPrefix = false;
      underscoreNamingConvention0.isUseForeignKeyPrefix();
      assertEquals("", underscoreNamingConvention0.getSequenceFormat());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      boolean boolean0 = underscoreNamingConvention0.isEmpty("");
      assertTrue(boolean0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      boolean boolean0 = underscoreNamingConvention0.isEmpty("9");
      assertFalse(boolean0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      Class<Integer> class0 = Integer.class;
      matchingNamingConvention0.hasInheritance(class0);
      assertTrue(matchingNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention((String) null);
      Class<Object> class0 = Object.class;
      matchingNamingConvention0.getTableNameFromAnnotation(class0);
      assertTrue(matchingNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      String string0 = underscoreNamingConvention0.getSequenceName("", "");
      assertEquals("", string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      underscoreNamingConvention0.setSequenceFormat((String) null);
      String string0 = underscoreNamingConvention0.getSequenceFormat();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      String string0 = underscoreNamingConvention0.getSequenceFormat();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("n[&8tBya)");
      underscoreNamingConvention0.setSchema("k&");
      String string0 = underscoreNamingConvention0.getSchema();
      assertEquals("k&", string0);
      assertEquals("n[&8tBya)", underscoreNamingConvention0.getSequenceFormat());
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      underscoreNamingConvention0.setSchema("");
      String string0 = underscoreNamingConvention0.getSchema();
      assertEquals("", string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("UE");
      underscoreNamingConvention0.setCatalog("UE");
      String string0 = underscoreNamingConvention0.getCatalog();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("UE", string0);
      assertEquals("UE", underscoreNamingConvention0.getSequenceFormat());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("GI~'E/");
      underscoreNamingConvention0.setCatalog("");
      String string0 = underscoreNamingConvention0.getCatalog();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("", string0);
      assertEquals("GI~'E/", underscoreNamingConvention0.getSequenceFormat());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getTableName(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.util.AnnotationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      underscoreNamingConvention0.setSequenceFormat((String) null);
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.getSequenceName("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      String string0 = underscoreNamingConvention0.getSchema();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("", underscoreNamingConvention0.getSequenceFormat());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("");
      String string0 = underscoreNamingConvention0.getCatalog();
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertNull(string0);
      assertEquals("", underscoreNamingConvention0.getSequenceFormat());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("GI~'E/");
      underscoreNamingConvention0.setCatalog("");
      Class<String> class0 = String.class;
      TableName tableName0 = underscoreNamingConvention0.getTableName(class0);
      assertEquals("GI~'E/", underscoreNamingConvention0.getSequenceFormat());
      assertEquals("", tableName0.getCatalog());
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("string", tableName0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      underscoreNamingConvention0.setCatalog("{table}_seq");
      Class<Integer> class0 = Integer.class;
      TableName tableName0 = underscoreNamingConvention0.getTableName(class0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("integer", tableName0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      String string0 = underscoreNamingConvention0.getSequenceName("{table}_seq", (String) null);
      assertEquals("{table}_seq_seq", string0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      // Undeclared exception!
      try { 
        matchingNamingConvention0.quoteIdentifiers("{table}_seq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.AbstractNamingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      boolean boolean0 = underscoreNamingConvention0.isUseForeignKeyPrefix();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MatchingNamingConvention matchingNamingConvention0 = new MatchingNamingConvention();
      matchingNamingConvention0.getSequenceFormat();
      assertTrue(matchingNamingConvention0.isUseForeignKeyPrefix());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      underscoreNamingConvention0.setSchema("{table}_seq");
      Class<Integer> class0 = Integer.class;
      TableName tableName0 = underscoreNamingConvention0.getTableName(class0);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("integer", tableName0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention("GI~'E/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        underscoreNamingConvention0.loadFromProperties(propertiesWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnderscoreNamingConvention underscoreNamingConvention0 = new UnderscoreNamingConvention();
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      underscoreNamingConvention0.setDatabasePlatform(databasePlatform0);
      TableName tableName0 = new TableName("{table}_seq", "{table}_seq", "{table}_seq_seq");
      TableName tableName1 = underscoreNamingConvention0.getM2MJoinTableName(tableName0, tableName0);
      TableName tableName2 = underscoreNamingConvention0.getM2MJoinTableName(tableName1, tableName1);
      assertTrue(underscoreNamingConvention0.isUseForeignKeyPrefix());
      assertEquals("{table}_seq_seq_{table}_seq_seq_{table}_seq_seq_{table}_seq_", tableName2.getName());
  }
}
