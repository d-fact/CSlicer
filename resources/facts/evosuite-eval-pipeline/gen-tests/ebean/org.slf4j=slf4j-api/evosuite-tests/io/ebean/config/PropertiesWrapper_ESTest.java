/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:39:50 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.PropertiesWrapper;
import java.time.Month;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertiesWrapper_ESTest extends PropertiesWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("_1}E'M*E/u#0nx>&b", "_1}E'M*E/u#0nx>&b", properties0, classLoadConfig0);
      Class<String> class0 = String.class;
      String string0 = propertiesWrapper0.createInstance(class0, "=9#gI^", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties properties0 = new Properties();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "bSa", properties0, (ClassLoadConfig) null);
      String string0 = propertiesWrapper0.getServerName();
      assertEquals("bSa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, (ClassLoadConfig) null);
      String string0 = propertiesWrapper0.getServerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, classLoadConfig0);
      long long0 = propertiesWrapper0.getLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      long long0 = propertiesWrapper0.getLong("py!a.({Vq4", 757L);
      assertEquals(757L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("_1}E'M*E/u#0nx>&b", "_1}E'M*E/u#0nx>&b", properties0, classLoadConfig0);
      long long0 = propertiesWrapper0.getLong("_1}E'M*E/u#0nx>&b", (-1667L));
      assertEquals((-1667L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((String) null, "The list of suffixes must not be null", properties0, classLoadConfig0);
      int int0 = propertiesWrapper0.getInt("d+TB]:$9,|,u6:", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "io.ebean.config.PropertiesWrapper", properties0, classLoadConfig0);
      int int0 = propertiesWrapper0.getInt("", 2519);
      assertEquals(2519, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<Month> class0 = Month.class;
      propertiesWrapper0.getEnum(class0, "S?]tvK15(zAa$)77", (Month) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, classLoadConfig0);
      double double0 = propertiesWrapper0.getDouble("=~'vy]s5^y)jiG", 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "FqDe1]S4a", properties0, classLoadConfig0);
      double double0 = propertiesWrapper0.getDouble("", 4379.5056);
      assertEquals(4379.5056, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("_1}E'M*E/u#0nx>&b", "_1}E'M*E/u#0nx>&b", properties0, classLoadConfig0);
      boolean boolean0 = propertiesWrapper0.getBoolean("_1}E'M*E/u#0nx>&b", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("", "", properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      properties0.put("i%N=aQ)A4C~Q", "i%N=aQ)A4C~Q");
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("9k:a><0g3X,:1V K", "9k:a><0g3X,:1V K", properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("i%N=aQ)A4C~Q");
      assertEquals("i%N=aQ)A4C~Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("9k:a><0g3X,:1V K", "", properties0, classLoadConfig0);
      properties0.put("", "");
      String string0 = propertiesWrapper0.get("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("9k:a><0g3X,:1V K", "", properties0, classLoadConfig0);
      properties0.put("", "");
      // Undeclared exception!
      try { 
        propertiesWrapper0.getLong("", (-2250));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getInt((String) null, (-1153));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<Month> class0 = Month.class;
      Month month0 = Month.JUNE;
      // Undeclared exception!
      try { 
        propertiesWrapper0.getEnum(class0, (String) null, month0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      properties0.put("", "");
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getDouble("", (-2250));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((String) null, "The list of suffixes must not be null", properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getDouble((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("[>M#cW{<x/vG84Ys]", "{,iN<Ay%Y", (Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getBoolean("[>M#cW{<x/vG84Ys]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((String) null, "R`PbvIuRO", properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.get((String) null, "_T5X+NfI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        propertiesWrapper0.createInstance(class0, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, (ClassLoadConfig) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        propertiesWrapper0.createInstance(class0, "wVTM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<Integer> class0 = Integer.class;
      Integer integer0 = propertiesWrapper0.createInstance(class0, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      properties0.put("``}{ bohYdhcz]x6'", "``}{ bohYdhcz]x6'");
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("``}{ bohYdhcz]x6'", "``}{ bohYdhcz]x6'", properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("``}{ bohYdhcz]x6'", ".");
      assertEquals("``}{ bohYdhcz]x6'", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper((String) null, "-}w", properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("-}w", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("``}{ bohYdhcz]x6'", "``}{ bohYdhcz]x6'", properties0, classLoadConfig0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        propertiesWrapper0.createInstance(class0, "``}{ bohYdhcz]x6'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error constructing ``}{ bohYdhcz]x6'
         //
         verifyException("io.ebean.config.ClassLoadConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<String> class0 = String.class;
      String string0 = propertiesWrapper0.createInstance(class0, (String) null, "e[B.]nVmG-");
      assertEquals("e[B.]nVmG-", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      Class<Month> class0 = Month.class;
      Month month0 = Month.JUNE;
      Month month1 = propertiesWrapper0.getEnum(class0, "e[B.]nVmG-", month0);
      assertEquals(Month.JUNE, month1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      properties0.put("", "");
      Month month0 = Month.FEBRUARY;
      Class<Month> class0 = Month.class;
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("i%N=aQ)A4C~Q", "G4==0k}s", properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getEnum(class0, "", month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.Month.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("9k:a><0g3X,:1V K", "", properties0, classLoadConfig0);
      properties0.put("", "");
      // Undeclared exception!
      try { 
        propertiesWrapper0.getInt("", (-2250));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(",", ",", properties0, classLoadConfig0);
      boolean boolean0 = propertiesWrapper0.getBoolean(";@[y)H", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      double double0 = propertiesWrapper0.getDouble("e[B.]nVmG-", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.get("e[B.]nVmG-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      int int0 = propertiesWrapper0.getInt("xGbN", (-2250));
      assertEquals((-2250), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper(properties0, classLoadConfig0);
      String string0 = propertiesWrapper0.getServerName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig(classLoader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("E'", "E'", (Properties) null, classLoadConfig0);
      // Undeclared exception!
      try { 
        propertiesWrapper0.getLong("", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.PropertiesWrapper", e);
      }
  }
}
