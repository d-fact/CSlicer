/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:13:51 GMT 2019
 */

package io.ebean.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import io.ebean.EbeanServer;
import io.ebean.ExpressionList;
import io.ebean.PersistenceContextScope;
import io.ebean.Query;
import io.ebean.annotation.PersistBatch;
import io.ebean.bean.BeanCollection;
import io.ebean.bean.BeanCollectionLoader;
import io.ebean.bean.EntityBean;
import io.ebean.cache.ServerCacheManager;
import io.ebean.common.AbstractBeanCollection;
import io.ebean.common.BeanList;
import io.ebean.common.BeanMap;
import io.ebean.common.BeanSet;
import io.ebean.common.ModifyHolder;
import io.ebean.config.ContainerConfig;
import io.ebean.config.JsonConfig;
import io.ebean.config.ServerConfig;
import io.ebean.config.TenantMode;
import io.ebean.search.TextQueryString;
import io.ebeaninternal.api.SpiBackgroundExecutor;
import io.ebeaninternal.server.cache.CacheChangeSet;
import io.ebeaninternal.server.cache.SpiCacheManager;
import io.ebeaninternal.server.cluster.ClusterManager;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import io.ebeaninternal.server.core.DefaultServer;
import io.ebeaninternal.server.core.InternalConfiguration;
import io.ebeaninternal.server.core.bootup.BootupClasses;
import io.ebeaninternal.server.expression.DefaultExpressionFactory;
import io.ebeaninternal.server.expression.FilterExprPath;
import io.ebeaninternal.server.expression.FilterExpressionList;
import io.ebeaninternal.server.loadcontext.DLoadManyContext;
import io.ebeaninternal.server.query.CallableQueryCount;
import io.ebeaninternal.server.transaction.RemoteTransactionEvent;
import io.ebeaninternal.server.transaction.TransactionManager;
import io.ebeaninternal.server.transaction.TransactionManagerOptions;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistEra;
import java.time.temporal.ChronoField;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBeanCollection_ESTest extends AbstractBeanCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>> beanMap0 = new BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>((Map<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>) null);
      assertNotNull(beanMap0);
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.REMOVALS;
      beanMap0.modifyListenMode = beanCollection_ModifyListenMode0;
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      beanMap0.setReadOnly(true);
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      beanMap0.modifyReset();
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      BeanMap<DefaultServer, ChronoLocalDate> beanMap1 = new BeanMap<DefaultServer, ChronoLocalDate>();
      assertNotNull(beanMap1);
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isPopulated());
      assertTrue(beanMap1.isSkipSave());
      
      beanMap1.reset((EntityBean) null, ")QE.Xlecu");
      assertFalse(beanMap1.isPopulated());
      assertTrue(beanMap1.isReference());
      assertTrue(beanMap1.isSkipSave());
      
      // Undeclared exception!
      try { 
        beanMap1.values();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      beanSet0.removeBean("mI$`oN})-eS,!P_9XX");
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.contains("mI$`oN})-eS,!P_9XX"));
      
      BeanMap<Integer, DLoadManyContext.LoadBuffer> beanMap0 = new BeanMap<Integer, DLoadManyContext.LoadBuffer>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      
      ModifyHolder<DLoadManyContext.LoadBuffer> modifyHolder0 = beanMap0.getModifyHolder();
      assertNotNull(modifyHolder0);
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      
      ModifyHolder<DLoadManyContext.LoadBuffer> modifyHolder1 = beanMap0.getModifyHolder();
      assertNotNull(modifyHolder1);
      assertSame(modifyHolder1, modifyHolder0);
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanMap<DLoadManyContext.LoadBuffer, Object> beanMap0 = new BeanMap<DLoadManyContext.LoadBuffer, Object>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      int int0 = beanMap0.size();
      assertEquals(0, int0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      hashSet0.clear();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>(hashSet0);
      assertNotNull(beanSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      
      beanSet0.ebeanServerName = "";
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      
      BeanCollection<ChronoLocalDate> beanCollection0 = beanSet0.getShallowCopy();
      assertNotNull(beanCollection0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertNull(beanCollection0.getPropertyName());
      assertFalse(beanCollection0.isReadOnly());
      assertFalse(beanCollection0.isRegisteredWithLoadContext());
      assertTrue(beanCollection0.isSkipSave());
      assertFalse(beanCollection0.holdsModifications());
      assertFalse(beanCollection0.isReference());
      assertTrue(beanCollection0.isPopulated());
      assertFalse(beanCollection0.wasTouched());
      assertNull(beanCollection0.getModifyListening());
      
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.contains(int0));
      
      boolean boolean0 = beanList0.containsAll(beanSet0);
      assertTrue(boolean0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.contains(int0));
      
      boolean boolean1 = beanList0.retainAll(hashSet0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.contains(int0));
      
      BeanList<Comparable<Object>> beanList1 = new BeanList<Comparable<Object>>();
      assertNotNull(beanList1);
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      
      beanList1.setActualList(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertFalse(beanList0.contains(int0));
      
      BeanSet<String> beanSet1 = new BeanSet<String>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.contains(""));
      
      int int1 = beanSet1.size();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.contains(""));
      
      boolean boolean2 = beanSet1.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.contains(""));
      
      BeanList<Class<Object>> beanList2 = new BeanList<Class<Object>>();
      assertNotNull(beanList2);
      assertTrue(beanList2.isSkipSave());
      assertTrue(beanList2.isPopulated());
      assertFalse(beanList2.isReference());
      
      beanList2.loadFrom(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList2.isSkipSave());
      assertTrue(beanList2.isPopulated());
      assertFalse(beanList2.isReference());
      assertFalse(beanList0.contains(int1));
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        beanList2.set(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<ForkJoinTask<String>, Comparable<String>> hashMap0 = new HashMap<ForkJoinTask<String>, Comparable<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BeanMap<ForkJoinTask<String>, Comparable<String>> beanMap0 = new BeanMap<ForkJoinTask<String>, Comparable<String>>(hashMap0);
      assertNotNull(beanMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      
      int int0 = 1909;
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.ALL;
      beanMap0.setModifyListening(beanCollection_ModifyListenMode0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      
      Integer integer0 = new Integer(1909);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1909, (int)integer0);
      
      ContainerConfig containerConfig0 = new ContainerConfig();
      assertNotNull(containerConfig0);
      assertEquals(0, containerConfig0.getPort());
      assertNull(containerConfig0.getPodName());
      assertNull(containerConfig0.getNamespace());
      assertFalse(containerConfig0.isActive());
      assertNull(containerConfig0.getServiceName());
      
      ClusterManager clusterManager0 = new ClusterManager(containerConfig0);
      assertNotNull(clusterManager0);
      assertEquals(0, containerConfig0.getPort());
      assertNull(containerConfig0.getPodName());
      assertNull(containerConfig0.getNamespace());
      assertFalse(containerConfig0.isActive());
      assertNull(containerConfig0.getServiceName());
      assertFalse(clusterManager0.isClustering());
      
      SpiCacheManager spiCacheManager0 = null;
      String string0 = "%";
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = null;
      try {
        defaultBackgroundExecutor0 = new DefaultBackgroundExecutor((-2951), 1909, "%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanMap<ThaiBuddhistEra, ChronoLocalDate> beanMap0 = new BeanMap<ThaiBuddhistEra, ChronoLocalDate>();
      assertNotNull(beanMap0);
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1505L);
      assertNotNull(localDate0);
      
      ChronoLocalDate chronoLocalDate0 = beanMap0.put(thaiBuddhistEra0, localDate0);
      assertNull(chronoLocalDate0);
      assertFalse(beanMap0.isReference());
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      
      Collection<ChronoLocalDate> collection0 = beanMap0.getActualDetails();
      assertNotNull(collection0);
      assertFalse(beanMap0.isReference());
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      
      ArrayList<DefaultServer> arrayList0 = new ArrayList<DefaultServer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BeanList<DefaultServer> beanList0 = new BeanList<DefaultServer>(arrayList0);
      assertNotNull(beanList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      
      beanList0.setReadOnly(true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.compare(943, 943);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = beanList0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.contains(943));
      assertTrue(beanList0.contains(integer0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      boolean boolean1 = beanList0.add(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.contains(943));
      assertTrue(beanList0.contains(integer2));
      
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.NONE;
      beanList0.setModifyListening(beanCollection_ModifyListenMode0);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.contains(943));
      assertTrue(beanList0.contains(integer2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanList<DefaultServer> beanList0 = new BeanList<DefaultServer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.NONE;
      beanList0.setModifyListening(beanCollection_ModifyListenMode0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanMap<Class<Object>, ThaiBuddhistEra> beanMap0 = new BeanMap<Class<Object>, ThaiBuddhistEra>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      
      BeanMap<Integer, Object> beanMap1 = new BeanMap<Integer, Object>();
      assertNotNull(beanMap1);
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isSkipSave());
      
      String string0 = "P>DE#X'QuxeL";
      Integer integer0 = new Integer((-208));
      assertNotNull(integer0);
      assertEquals((-208), (int)integer0);
      
      Object object0 = beanMap1.put(integer0, integer0);
      assertNull(object0);
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertFalse(beanMap1.isSkipSave());
      
      Integer integer1 = new Integer(431);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(431, (int)integer1);
      
      BiFunction<Integer, Object, ChronoLocalDate> biFunction0 = (BiFunction<Integer, Object, ChronoLocalDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any());
      Object object1 = beanMap1.compute(integer1, biFunction0);
      assertNull(object1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertFalse(beanMap1.isSkipSave());
      
      // Undeclared exception!
      try { 
        beanMap1.setLoader((BeanCollectionLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanSet<Class<DLoadManyContext.LoadBuffer>> beanSet0 = new BeanSet<Class<DLoadManyContext.LoadBuffer>>((Set<Class<DLoadManyContext.LoadBuffer>>) null);
      assertNotNull(beanSet0);
      assertFalse(beanSet0.isPopulated());
      assertTrue(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      
      // Undeclared exception!
      try { 
        beanSet0.setLoader((BeanCollectionLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanMap<Object, String> beanMap0 = new BeanMap<Object, String>((Map<Object, String>) null);
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      
      EntityBean entityBean0 = beanMap0.getOwnerBean();
      assertNull(entityBean0);
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isReference());
      
      BeanSet<Class<DefaultServer>> beanSet0 = new BeanSet<Class<DefaultServer>>((Set<Class<DefaultServer>>) null);
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isReference());
      assertFalse(beanSet0.isPopulated());
      
      // Undeclared exception!
      try { 
        beanSet0.loadFrom(beanMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.BeanMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(beanList0);
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertFalse(beanList0.contains(integer0));
      
      beanList0.removeBean(integer0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertFalse(beanList0.contains(integer0));
      
      BeanSet<CallableQueryCount<ThaiBuddhistEra>> beanSet0 = new BeanSet<CallableQueryCount<ThaiBuddhistEra>>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      AbstractBeanCollection<CallableQueryCount<ThaiBuddhistEra>> abstractBeanCollection0 = null;
      boolean boolean0 = beanSet0.isEmpty();
      assertTrue(boolean0);
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      // Undeclared exception!
      try { 
        beanSet0.setFromOriginal((AbstractBeanCollection<CallableQueryCount<ThaiBuddhistEra>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanMap<Integer, Delayed> beanMap0 = new BeanMap<Integer, Delayed>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      boolean boolean0 = beanMap0.checkEmptyLazyLoad();
      assertFalse(boolean0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      BeanMap<Integer, Delayed> beanMap1 = new BeanMap<Integer, Delayed>(beanMap0);
      assertNotNull(beanMap1);
      assertTrue(beanMap1.equals((Object)beanMap0));
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertTrue(beanMap1.isSkipSave());
      assertFalse(beanMap1.isReference());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Delayed delayed0 = beanMap0.put(integer0, (Delayed) null);
      assertNull(delayed0);
      assertNotSame(beanMap0, beanMap1);
      assertTrue(beanMap0.equals((Object)beanMap1));
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      beanMap1.propertyName = "field \"";
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertFalse(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      
      boolean boolean1 = beanMap1.isRegisteredWithLoadContext();
      assertNotSame(beanMap0, beanMap1);
      assertNotSame(beanMap1, beanMap0);
      assertTrue(beanMap0.equals((Object)beanMap1));
      assertTrue(beanMap1.equals((Object)beanMap0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertFalse(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertFalse(beanList0.contains(integer0));
      
      int int0 = beanList0.indexOf(beanMap1);
      assertNotSame(beanMap0, beanMap1);
      assertNotSame(beanMap1, beanMap0);
      assertTrue(beanMap0.equals((Object)beanMap1));
      assertTrue(beanMap1.equals((Object)beanMap0));
      assertEquals((-1), int0);
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertFalse(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertFalse(beanList0.contains(int0));
      
      Set<Integer> set0 = beanList0.getModifyAdditions();
      assertNull(set0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertFalse(beanList0.contains(int0));
      
      BeanSet<DefaultServer> beanSet0 = new BeanSet<DefaultServer>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      BeanSet<DefaultServer> beanSet1 = new BeanSet<DefaultServer>(beanSet0);
      assertNotNull(beanSet1);
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      
      Set<DefaultServer> set1 = beanSet1.getActualSet();
      assertNotNull(set1);
      assertNotSame(beanSet0, beanSet1);
      assertNotSame(beanSet1, beanSet0);
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      ContainerConfig containerConfig0 = new ContainerConfig();
      assertNotNull(containerConfig0);
      assertEquals(0, containerConfig0.getPort());
      assertNull(containerConfig0.getPodName());
      assertFalse(containerConfig0.isActive());
      assertNull(containerConfig0.getNamespace());
      assertNull(containerConfig0.getServiceName());
      
      ClusterManager clusterManager0 = new ClusterManager(containerConfig0);
      assertNotNull(clusterManager0);
      assertEquals(0, containerConfig0.getPort());
      assertNull(containerConfig0.getPodName());
      assertFalse(containerConfig0.isActive());
      assertNull(containerConfig0.getNamespace());
      assertNull(containerConfig0.getServiceName());
      assertFalse(clusterManager0.isClustering());
      
      ServerConfig serverConfig0 = new ServerConfig();
      assertNotNull(serverConfig0);
      assertFalse(serverConfig0.isDisableL2Cache());
      assertFalse(serverConfig0.isExpressionEqualsWithNullAsNoop());
      assertEquals(4326, serverConfig0.getGeometrySRID());
      assertEquals(PersistenceContextScope.TRANSACTION, serverConfig0.getPersistenceContextScope());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(1000, serverConfig0.getQueryCacheMaxSize());
      assertEquals(PersistBatch.NONE, serverConfig0.getPersistBatch());
      assertTrue(serverConfig0.isUseJavaxValidationNotNull());
      assertNull(serverConfig0.getJodaLocalTimeMode());
      assertNull(serverConfig0.getDataSourceJndiName());
      assertFalse(serverConfig0.isUseJtaTransactionManager());
      assertTrue(serverConfig0.isCollectQueryStatsByNode());
      assertTrue(serverConfig0.isChangeLogAsync());
      assertTrue(serverConfig0.isUpdateChangesOnly());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertFalse(serverConfig0.isExplicitTransactionBeginMode());
      assertNull(serverConfig0.getDatabasePlatformName());
      assertFalse(serverConfig0.isAutoCommitMode());
      assertFalse(serverConfig0.isDefaultOrderById());
      assertEquals(JsonConfig.DateTime.MILLIS, serverConfig0.getJsonDateTime());
      assertFalse(serverConfig0.isEagerFetchLobs());
      assertFalse(serverConfig0.isDbOffline());
      assertFalse(serverConfig0.isDdlGenerate());
      assertEquals(600, serverConfig0.getCacheMaxIdleTime());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(1, serverConfig0.getBackgroundExecutorSchedulePoolSize());
      assertFalse(serverConfig0.isDdlRun());
      assertTrue(serverConfig0.isUpdateAllPropertiesInBatch());
      assertEquals(10000, serverConfig0.getCacheMaxSize());
      assertEquals("ebean-uuid.state", serverConfig0.getUuidStateFile());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(0, serverConfig0.getJdbcFetchSizeFindList());
      assertFalse(serverConfig0.isDdlCreateOnly());
      assertNull(serverConfig0.getDdlInitSql());
      assertEquals(21600, serverConfig0.getCacheMaxTimeToLive());
      assertNull(serverConfig0.getDataTimeZone());
      assertFalse(serverConfig0.isAutoReadOnlyDataSource());
      assertTrue(serverConfig0.isRegister());
      assertFalse(serverConfig0.isExpressionNativeIlike());
      assertFalse(serverConfig0.isDocStoreOnly());
      assertTrue(serverConfig0.isChangeLogIncludeInserts());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertTrue(serverConfig0.isSkipCacheAfterWrite());
      assertFalse(serverConfig0.isNotifyL2CacheInForeground());
      assertNull(serverConfig0.getDdlSeedSql());
      assertEquals(30, serverConfig0.getBackgroundExecutorShutdownSecs());
      assertEquals(ServerConfig.UuidVersion.VERSION4, serverConfig0.getUuidVersion());
      assertNull(serverConfig0.getIdType());
      assertNull(serverConfig0.getDatabaseBooleanTrue());
      assertEquals(PersistBatch.INHERIT, serverConfig0.getPersistBatchOnCascade());
      assertEquals(600, serverConfig0.getQueryCacheMaxIdleTime());
      assertEquals(JsonConfig.Include.ALL, serverConfig0.getJsonInclude());
      assertEquals(0L, serverConfig0.getSlowQueryMillis());
      assertFalse(serverConfig0.isDisableClasspathSearch());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isTransactionRollbackOnChecked());
      assertEquals(300, serverConfig0.getQueryPlanTTLSeconds());
      assertFalse(serverConfig0.isLocalTimeWithNanos());
      assertTrue(serverConfig0.isUpdatesDeleteMissingChildren());
      assertFalse(serverConfig0.isAllQuotedIdentifiers());
      assertFalse(serverConfig0.isDurationWithNanos());
      assertEquals("db", serverConfig0.getName());
      assertNull(serverConfig0.getDatabaseBooleanFalse());
      assertEquals(20, serverConfig0.getDatabaseSequenceBatchSize());
      assertEquals(21600, serverConfig0.getQueryCacheMaxTimeToLive());
      assertTrue(serverConfig0.isCollectQueryOrigins());
      assertEquals(5, serverConfig0.getMaxCallStack());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertNull(serverConfig0.getResourceDirectory());
      assertEquals(TenantMode.NONE, serverConfig0.getTenantMode());
      
      BootupClasses bootupClasses0 = new BootupClasses();
      assertNotNull(bootupClasses0);
      
      InternalConfiguration internalConfiguration0 = null;
      try {
        internalConfiguration0 = new InternalConfiguration(clusterManager0, (SpiCacheManager) null, (SpiBackgroundExecutor) null, serverConfig0, bootupClasses0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.DefaultTypeManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      
      BeanSet<String> beanSet0 = new BeanSet<String>(set0);
      assertNotNull(beanSet0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      
      boolean boolean0 = beanSet0.add((String) null);
      assertTrue(boolean0);
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      
      BeanList<Callable<Integer>> beanList0 = new BeanList<Callable<Integer>>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      
      beanSet0.propertyName = null;
      assertFalse(set0.isEmpty());
      assertEquals(601, set0.size());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      
      boolean boolean1 = beanList0.add((Callable<Integer>) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      boolean boolean2 = beanSet0.add("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(602, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(set0.contains(""));
      assertTrue(beanSet0.contains(""));
      
      beanList0.loadFrom(beanSet0);
      assertEquals(602, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(set0.contains(""));
      assertTrue(beanSet0.contains(""));
      
      beanList0.setDisableLazyLoad(true);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      BeanSet<Object> beanSet1 = new BeanSet<Object>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertFalse(beanSet1.contains(""));
      
      boolean boolean3 = beanSet1.isRegisteredWithLoadContext();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertFalse(beanSet1.contains(""));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanMap<Object, ThaiBuddhistEra> beanMap0 = new BeanMap<Object, ThaiBuddhistEra>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      
      Set<ThaiBuddhistEra> set0 = beanMap0.getModifyRemovals();
      assertNull(set0);
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      beanMap0.modifyAddition(thaiBuddhistEra0);
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      BeanSet<Object> beanSet0 = new BeanSet<Object>(hashSet0);
      assertNotNull(beanSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      boolean boolean0 = beanSet0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      BeanMap<Object, ChronoLocalDate> beanMap1 = new BeanMap<Object, ChronoLocalDate>();
      assertNotNull(beanMap1);
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      
      BeanMap<Object, ChronoLocalDate> beanMap2 = new BeanMap<Object, ChronoLocalDate>(beanMap1);
      assertNotNull(beanMap2);
      assertTrue(beanMap2.equals((Object)beanMap1));
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertTrue(beanMap2.isSkipSave());
      assertTrue(beanMap2.isPopulated());
      assertFalse(beanMap2.isReference());
      
      boolean boolean1 = beanMap2.containsKey((Object) null);
      assertNotSame(beanMap1, beanMap2);
      assertNotSame(beanMap2, beanMap1);
      assertTrue(beanMap1.equals((Object)beanMap2));
      assertTrue(beanMap2.equals((Object)beanMap1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertTrue(beanMap2.isSkipSave());
      assertTrue(beanMap2.isPopulated());
      assertFalse(beanMap2.isReference());
      
      BeanList<Integer> beanList0 = new BeanList<Integer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      
      // Undeclared exception!
      try { 
        Period.between((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanSet<Class<Object>> beanSet0 = new BeanSet<Class<Object>>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = beanSet0.add(class0);
      assertTrue(boolean0);
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.contains(class0));
      
      boolean boolean1 = beanSet0.checkEmptyLazyLoad();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.contains(class0));
      
      Stream<Class<Object>> stream0 = beanSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.contains(class0));
      
      beanSet0.getModifyListening();
      assertFalse(beanSet0.isReference());
      assertFalse(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.contains(class0));
      
      BeanSet<String> beanSet1 = new BeanSet<String>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      
      beanSet0.clear();
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.contains(class0));
      
      boolean boolean2 = beanSet1.add("check_props");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isSkipSave());
      assertTrue(beanSet1.contains("check_props"));
      
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      ModifyHolder<Delayed> modifyHolder0 = new ModifyHolder<Delayed>();
      assertNotNull(modifyHolder0);
      
      modifyHolder0.modifyAdditionAll(beanList0);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      beanList0.modifyHolder = modifyHolder0;
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      boolean boolean3 = beanList0.isReadOnly();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertTrue(beanList0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      HashMap<String, Callable<Integer>> hashMap0 = new HashMap<String, Callable<Integer>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BeanMap<String, Callable<Integer>> beanMap0 = new BeanMap<String, Callable<Integer>>(hashMap0);
      assertNotNull(beanMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      
      beanMap0.setModifyListening((BeanCollection.ModifyListenMode) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(beanMap0.isSkipSave());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isPopulated());
      
      BeanList<ChronoLocalDate> beanList1 = new BeanList<ChronoLocalDate>();
      assertNotNull(beanList1);
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertTrue(beanList1.isPopulated());
      
      BeanCollection<ChronoLocalDate> beanCollection0 = beanList1.getShallowCopy();
      assertNotNull(beanCollection0);
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertTrue(beanList1.isPopulated());
      assertTrue(beanCollection0.isSkipSave());
      assertFalse(beanCollection0.holdsModifications());
      assertFalse(beanCollection0.isReference());
      assertTrue(beanCollection0.isPopulated());
      assertFalse(beanCollection0.isReadOnly());
      assertFalse(beanCollection0.isRegisteredWithLoadContext());
      assertNull(beanCollection0.getPropertyName());
      assertFalse(beanCollection0.wasTouched());
      assertNull(beanCollection0.getModifyListening());
      
      BeanMap<DLoadManyContext.LoadBuffer, DefaultServer> beanMap1 = new BeanMap<DLoadManyContext.LoadBuffer, DefaultServer>();
      assertNotNull(beanMap1);
      assertTrue(beanMap1.isSkipSave());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isPopulated());
      
      String string0 = beanMap1.toString();
      assertNotNull(string0);
      assertEquals("BeanMap size[0] map{}", string0);
      assertTrue(beanMap1.isSkipSave());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap1.isPopulated());
      
      DLoadManyContext.LoadBuffer dLoadManyContext_LoadBuffer0 = null;
      try {
        dLoadManyContext_LoadBuffer0 = new DLoadManyContext.LoadBuffer((DLoadManyContext) null, 513);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.loadcontext.DLoadManyContext$LoadBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanList<DLoadManyContext.LoadBuffer> beanList0 = new BeanList<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      
      LinkedList<DLoadManyContext.LoadBuffer> linkedList0 = new LinkedList<DLoadManyContext.LoadBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = beanList0.addAll((Collection<? extends DLoadManyContext.LoadBuffer>) linkedList0);
      assertFalse(boolean0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertEquals(0, linkedList0.size());
      
      beanList0.modifyListening = true;
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      
      String string0 = beanList0.toString();
      assertNotNull(string0);
      assertEquals("BeanList size[0] list[]", string0);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      
      BeanList<Object> beanList1 = new BeanList<Object>();
      assertNotNull(beanList1);
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertFalse(beanList1.contains(true));
      
      Object[] objectArray0 = beanList1.toArray();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertFalse(beanList1.contains(true));
      
      BeanMap<DefaultServer, Integer> beanMap0 = new BeanMap<DefaultServer, Integer>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      BeanMap<DefaultServer, Integer> beanMap1 = new BeanMap<DefaultServer, Integer>();
      assertNotNull(beanMap1);
      assertTrue(beanMap1.equals((Object)beanMap0));
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      
      beanMap0.putAll(beanMap1);
      assertNotSame(beanMap0, beanMap1);
      assertNotSame(beanMap1, beanMap0);
      assertTrue(beanMap0.equals((Object)beanMap1));
      assertTrue(beanMap1.equals((Object)beanMap0));
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      
      BeanMap<Delayed, Integer> beanMap2 = new BeanMap<Delayed, Integer>();
      assertNotNull(beanMap2);
      assertFalse(beanMap2.isReference());
      assertTrue(beanMap2.isSkipSave());
      assertTrue(beanMap2.isPopulated());
      
      beanMap2.internalPutWithCheck(beanList0, beanList1);
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isSkipSave());
      assertFalse(beanMap2.isReference());
      assertTrue(beanMap2.isPopulated());
      assertFalse(beanMap2.isSkipSave());
      assertFalse(beanList1.contains(true));
      
      LinkedHashSet<ThaiBuddhistEra> linkedHashSet0 = new LinkedHashSet<ThaiBuddhistEra>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BeanSet<ThaiBuddhistEra> beanSet0 = new BeanSet<ThaiBuddhistEra>(linkedHashSet0);
      assertNotNull(beanSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      boolean boolean1 = beanSet0.add(thaiBuddhistEra0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(linkedHashSet0.contains(thaiBuddhistEra0));
      assertTrue(beanSet0.contains(thaiBuddhistEra0));
      
      BeanSet<ThaiBuddhistEra> beanSet1 = new BeanSet<ThaiBuddhistEra>(beanSet0);
      assertNotNull(beanSet1);
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertFalse(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet1.contains(thaiBuddhistEra0));
      assertTrue(linkedHashSet0.contains(thaiBuddhistEra0));
      assertTrue(beanSet0.contains(thaiBuddhistEra0));
      
      Collection<?> collection0 = beanSet1.getActualEntries();
      assertNotNull(collection0);
      assertNotSame(beanSet1, beanSet0);
      assertNotSame(beanSet0, beanSet1);
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertFalse(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isPopulated());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet1.contains(thaiBuddhistEra0));
      assertTrue(linkedHashSet0.contains(thaiBuddhistEra0));
      assertTrue(beanSet0.contains(thaiBuddhistEra0));
      
      BeanList<String> beanList2 = new BeanList<String>();
      assertNotNull(beanList2);
      assertFalse(beanList2.isReference());
      assertTrue(beanList2.isPopulated());
      assertTrue(beanList2.isSkipSave());
      assertFalse(beanList2.contains(string0));
      
      // Undeclared exception!
      try { 
        beanList2.listIterator((-2145));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanSet<ForkJoinTask<String>> beanSet0 = new BeanSet<ForkJoinTask<String>>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      beanSet0.addBean((ForkJoinTask<String>) null);
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      beanSet0.registeredWithLoadContext = false;
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      beanSet0.internalAdd("e_(8Uw}eZWq&3Vda<M");
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      String string0 = beanSet0.getPropertyName();
      assertNull(string0);
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      
      BeanSet<Integer> beanSet1 = new BeanSet<Integer>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isPopulated());
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = beanSet1.add(integer0);
      assertTrue(boolean0);
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.contains(1));
      
      Set<Integer> set0 = beanSet1.getModifyRemovals();
      assertNull(set0);
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.contains(1));
      
      // Undeclared exception!
      try { 
        beanSet1.setFromOriginal((AbstractBeanCollection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanList<DLoadManyContext.LoadBuffer> beanList0 = new BeanList<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanList0);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      boolean boolean0 = beanSet0.removeAll(beanList0);
      assertFalse(boolean0);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet0.isReference());
      
      BeanSet<DefaultServer> beanSet1 = new BeanSet<DefaultServer>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isPopulated());
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      
      beanSet1.modifyReset();
      assertTrue(beanSet1.isPopulated());
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      
      BeanSet<ChronoLocalDate> beanSet2 = new BeanSet<ChronoLocalDate>();
      assertNotNull(beanSet2);
      assertTrue(beanSet2.isPopulated());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      
      ExpressionList<?> expressionList0 = beanSet2.getFilterMany();
      assertNull(expressionList0);
      assertTrue(beanSet2.isPopulated());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      
      BeanSet<Callable<Integer>> beanSet3 = new BeanSet<Callable<Integer>>();
      assertNotNull(beanSet3);
      assertTrue(beanSet3.isPopulated());
      assertTrue(beanSet3.isSkipSave());
      assertFalse(beanSet3.isReference());
      
      BeanSet<Callable<Integer>> beanSet4 = new BeanSet<Callable<Integer>>(beanSet3);
      assertNotNull(beanSet4);
      assertTrue(beanSet4.equals((Object)beanSet3));
      assertTrue(beanSet3.isPopulated());
      assertTrue(beanSet3.isSkipSave());
      assertFalse(beanSet3.isReference());
      assertTrue(beanSet4.isPopulated());
      assertFalse(beanSet4.isReference());
      assertTrue(beanSet4.isSkipSave());
      
      BeanSet<DLoadManyContext.LoadBuffer> beanSet5 = new BeanSet<DLoadManyContext.LoadBuffer>((Set<DLoadManyContext.LoadBuffer>) null);
      assertNotNull(beanSet5);
      assertTrue(beanSet5.isSkipSave());
      assertFalse(beanSet5.isPopulated());
      assertTrue(beanSet5.isReference());
      
      beanSet5.clear();
      assertTrue(beanSet5.isSkipSave());
      assertFalse(beanSet5.isReference());
      assertTrue(beanSet5.isPopulated());
      
      beanSet5.loadFrom(beanSet1);
      assertTrue(beanSet1.isPopulated());
      assertTrue(beanSet1.isSkipSave());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet5.isSkipSave());
      assertFalse(beanSet5.isReference());
      assertTrue(beanSet5.isPopulated());
      
      beanSet2.getModifyListenMode();
      assertTrue(beanSet2.isPopulated());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      
      BeanSet<CallableQueryCount<String>> beanSet6 = new BeanSet<CallableQueryCount<String>>();
      assertNotNull(beanSet6);
      assertTrue(beanSet6.isPopulated());
      assertTrue(beanSet6.isSkipSave());
      assertFalse(beanSet6.isReference());
      
      beanSet6.clear();
      assertTrue(beanSet6.isPopulated());
      assertTrue(beanSet6.isSkipSave());
      assertFalse(beanSet6.isReference());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      
      BeanMap<ThaiBuddhistEra, Object> beanMap0 = new BeanMap<ThaiBuddhistEra, Object>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      Object object0 = beanMap0.get("JKS");
      assertNull(object0);
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      beanMap0.internalPutNull();
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.NONE;
      beanMap0.modifyListenMode = beanCollection_ModifyListenMode0;
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      Integer integer0 = new Integer(1641);
      assertNotNull(integer0);
      assertEquals(1641, (int)integer0);
      
      int int0 = Integer.divideUnsigned(1641, 1641);
      assertEquals(1, int0);
      
      Object object1 = beanMap0.put(thaiBuddhistEra0, integer0);
      assertNull(object1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      ModifyHolder<Object> modifyHolder0 = beanMap0.getModifyHolder();
      assertNotNull(modifyHolder0);
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      beanMap0.modifyRemoval("R");
      assertFalse(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      BeanSet<DefaultServer> beanSet0 = new BeanSet<DefaultServer>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      beanSet0.loadFrom(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanList0.contains("R"));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      assertNotNull(beanSet0);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      
      beanSet0.internalAdd((Object) null);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      
      Collection<Integer> collection0 = beanSet0.getActualDetails();
      assertNotNull(collection0);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      
      BeanCollectionLoader beanCollectionLoader0 = null;
      EntityBean entityBean0 = null;
      String string0 = "an^o);I]M";
      BeanMap<Object, Delayed> beanMap0 = null;
      try {
        beanMap0 = new BeanMap<Object, Delayed>((BeanCollectionLoader) null, (EntityBean) null, "an^o);I]M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanMap<String, Integer> beanMap0 = new BeanMap<String, Integer>();
      assertNotNull(beanMap0);
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      beanMap0.disableLazyLoad = true;
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      beanMap0.checkReadOnly();
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      assertFalse(beanMap0.isReference());
      
      BeanMap<Integer, Integer> beanMap1 = new BeanMap<Integer, Integer>();
      assertNotNull(beanMap1);
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      
      BeanMap<Integer, Integer> beanMap2 = new BeanMap<Integer, Integer>(beanMap1);
      assertNotNull(beanMap2);
      assertTrue(beanMap2.equals((Object)beanMap1));
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap2.isPopulated());
      assertTrue(beanMap2.isSkipSave());
      assertFalse(beanMap2.isReference());
      
      BeanMap<Integer, Integer> beanMap3 = new BeanMap<Integer, Integer>(beanMap2);
      assertNotNull(beanMap3);
      assertTrue(beanMap1.equals((Object)beanMap2));
      assertTrue(beanMap2.equals((Object)beanMap1));
      assertTrue(beanMap3.equals((Object)beanMap2));
      assertTrue(beanMap3.equals((Object)beanMap1));
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap2.isPopulated());
      assertTrue(beanMap2.isSkipSave());
      assertFalse(beanMap2.isReference());
      assertTrue(beanMap3.isSkipSave());
      assertTrue(beanMap3.isPopulated());
      assertFalse(beanMap3.isReference());
      
      beanMap3.putAll(beanMap1);
      assertNotSame(beanMap1, beanMap2);
      assertNotSame(beanMap1, beanMap3);
      assertNotSame(beanMap2, beanMap3);
      assertNotSame(beanMap2, beanMap1);
      assertNotSame(beanMap3, beanMap2);
      assertNotSame(beanMap3, beanMap1);
      assertTrue(beanMap1.equals((Object)beanMap3));
      assertTrue(beanMap1.equals((Object)beanMap2));
      assertTrue(beanMap2.equals((Object)beanMap3));
      assertTrue(beanMap2.equals((Object)beanMap1));
      assertTrue(beanMap3.equals((Object)beanMap2));
      assertTrue(beanMap3.equals((Object)beanMap1));
      assertTrue(beanMap1.isSkipSave());
      assertTrue(beanMap1.isPopulated());
      assertFalse(beanMap1.isReference());
      assertTrue(beanMap2.isPopulated());
      assertTrue(beanMap2.isSkipSave());
      assertFalse(beanMap2.isReference());
      assertTrue(beanMap3.isSkipSave());
      assertTrue(beanMap3.isPopulated());
      assertFalse(beanMap3.isReference());
      
      BeanMap<Integer, String> beanMap4 = new BeanMap<Integer, String>();
      assertNotNull(beanMap4);
      assertTrue(beanMap4.isPopulated());
      assertFalse(beanMap4.isReference());
      assertTrue(beanMap4.isSkipSave());
      
      BeanSet<ThaiBuddhistEra> beanSet0 = new BeanSet<ThaiBuddhistEra>((Set<ThaiBuddhistEra>) null);
      assertNotNull(beanSet0);
      assertFalse(beanSet0.isPopulated());
      assertTrue(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      
      boolean boolean0 = beanSet0.holdsModifications();
      assertFalse(boolean0);
      assertFalse(beanSet0.isPopulated());
      assertTrue(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      
      BeanList<Object> beanList0 = new BeanList<Object>();
      assertNotNull(beanList0);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.contains(true));
      
      boolean boolean1 = beanList0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.contains(true));
      
      BeanSet<DefaultServer> beanSet1 = new BeanSet<DefaultServer>();
      assertNotNull(beanSet1);
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      
      BeanSet<DefaultServer> beanSet2 = new BeanSet<DefaultServer>(beanSet1);
      assertNotNull(beanSet2);
      assertTrue(beanSet2.equals((Object)beanSet1));
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isPopulated());
      
      BeanSet<DefaultServer> beanSet3 = new BeanSet<DefaultServer>(beanSet2);
      assertNotNull(beanSet3);
      assertTrue(beanSet1.equals((Object)beanSet2));
      assertTrue(beanSet2.equals((Object)beanSet1));
      assertTrue(beanSet3.equals((Object)beanSet1));
      assertTrue(beanSet3.equals((Object)beanSet2));
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isPopulated());
      assertTrue(beanSet3.isPopulated());
      assertFalse(beanSet3.isReference());
      assertTrue(beanSet3.isSkipSave());
      
      Set<DefaultServer> set0 = beanSet3.getModifyRemovals();
      assertNull(set0);
      assertNotSame(beanSet1, beanSet2);
      assertNotSame(beanSet1, beanSet3);
      assertNotSame(beanSet2, beanSet1);
      assertNotSame(beanSet2, beanSet3);
      assertNotSame(beanSet3, beanSet1);
      assertNotSame(beanSet3, beanSet2);
      assertTrue(beanSet1.equals((Object)beanSet3));
      assertTrue(beanSet1.equals((Object)beanSet2));
      assertTrue(beanSet2.equals((Object)beanSet3));
      assertTrue(beanSet2.equals((Object)beanSet1));
      assertTrue(beanSet3.equals((Object)beanSet1));
      assertTrue(beanSet3.equals((Object)beanSet2));
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet2.isSkipSave());
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isPopulated());
      assertTrue(beanSet3.isPopulated());
      assertFalse(beanSet3.isReference());
      assertTrue(beanSet3.isSkipSave());
      
      BeanSet<Integer> beanSet4 = new BeanSet<Integer>();
      assertNotNull(beanSet4);
      assertTrue(beanSet4.isSkipSave());
      assertFalse(beanSet4.isReference());
      assertTrue(beanSet4.isPopulated());
      
      Collection<?> collection0 = beanSet4.getActualEntries();
      assertNotNull(collection0);
      assertTrue(beanSet4.isSkipSave());
      assertFalse(beanSet4.isReference());
      assertTrue(beanSet4.isPopulated());
      
      BeanMap<Object, DefaultServer> beanMap5 = new BeanMap<Object, DefaultServer>();
      assertNotNull(beanMap5);
      assertTrue(beanMap5.isSkipSave());
      assertFalse(beanMap5.isReference());
      assertTrue(beanMap5.isPopulated());
      
      BeanMap<Object, DefaultServer> beanMap6 = new BeanMap<Object, DefaultServer>(beanMap5);
      assertNotNull(beanMap6);
      assertTrue(beanMap6.equals((Object)beanMap5));
      assertTrue(beanMap5.isSkipSave());
      assertFalse(beanMap5.isReference());
      assertTrue(beanMap5.isPopulated());
      assertFalse(beanMap6.isReference());
      assertTrue(beanMap6.isPopulated());
      assertTrue(beanMap6.isSkipSave());
      
      Collection<?> collection1 = beanMap6.getActualEntries();
      assertNotNull(collection1);
      assertNotSame(beanMap5, beanMap6);
      assertNotSame(beanMap6, beanMap5);
      assertTrue(beanMap5.equals((Object)beanMap6));
      assertTrue(beanMap6.equals((Object)beanMap5));
      assertTrue(collection1.equals((Object)collection0));
      assertTrue(beanMap5.isSkipSave());
      assertFalse(beanMap5.isReference());
      assertTrue(beanMap5.isPopulated());
      assertFalse(beanMap6.isReference());
      assertTrue(beanMap6.isPopulated());
      assertTrue(beanMap6.isSkipSave());
      
      ModifyHolder<DefaultServer> modifyHolder0 = beanMap6.getModifyHolder();
      assertNotNull(modifyHolder0);
      assertNotSame(beanMap5, beanMap6);
      assertNotSame(beanMap6, beanMap5);
      assertTrue(beanMap5.equals((Object)beanMap6));
      assertTrue(beanMap6.equals((Object)beanMap5));
      assertTrue(beanMap5.isSkipSave());
      assertFalse(beanMap5.isReference());
      assertTrue(beanMap5.isPopulated());
      assertFalse(beanMap6.isReference());
      assertTrue(beanMap6.isPopulated());
      assertTrue(beanMap6.isSkipSave());
      
      HashMap<Integer, Delayed> hashMap0 = new HashMap<Integer, Delayed>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      BeanMap<Integer, Delayed> beanMap7 = new BeanMap<Integer, Delayed>(hashMap0);
      assertNotNull(beanMap7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(beanMap7.isPopulated());
      assertTrue(beanMap7.isSkipSave());
      assertFalse(beanMap7.isReference());
      
      // Undeclared exception!
      try { 
        beanMap7.lazyLoadCollection(true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanSet<DLoadManyContext.LoadBuffer> beanSet0 = new BeanSet<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanSet0);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      
      Set<DLoadManyContext.LoadBuffer> set0 = beanSet0.getActualSet();
      assertNotNull(set0);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      BeanList<DLoadManyContext.LoadBuffer> beanList0 = new BeanList<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      
      boolean boolean0 = beanList0.retainAll(beanSet0);
      assertFalse(boolean0);
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      
      ContainerConfig containerConfig0 = new ContainerConfig();
      assertNotNull(containerConfig0);
      assertNull(containerConfig0.getServiceName());
      assertNull(containerConfig0.getNamespace());
      assertNull(containerConfig0.getPodName());
      assertEquals(0, containerConfig0.getPort());
      assertFalse(containerConfig0.isActive());
      
      ClusterManager clusterManager0 = new ClusterManager(containerConfig0);
      assertNotNull(clusterManager0);
      assertNull(containerConfig0.getServiceName());
      assertNull(containerConfig0.getNamespace());
      assertNull(containerConfig0.getPodName());
      assertEquals(0, containerConfig0.getPort());
      assertFalse(containerConfig0.isActive());
      assertFalse(clusterManager0.isClustering());
      
      SpiCacheManager spiCacheManager0 = null;
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(3058, (-848), "H+CG)Ek3~cXz6uV{I");
      assertNotNull(defaultBackgroundExecutor0);
      
      ServerConfig serverConfig0 = new ServerConfig();
      assertNotNull(serverConfig0);
      assertFalse(serverConfig0.isDurationWithNanos());
      assertEquals(10000, serverConfig0.getCacheMaxSize());
      assertTrue(serverConfig0.isUpdateAllPropertiesInBatch());
      assertFalse(serverConfig0.isLocalTimeWithNanos());
      assertNull(serverConfig0.getDatabaseBooleanFalse());
      assertTrue(serverConfig0.isUpdatesDeleteMissingChildren());
      assertFalse(serverConfig0.isDbOffline());
      assertEquals(ServerConfig.UuidVersion.VERSION4, serverConfig0.getUuidVersion());
      assertTrue(serverConfig0.isDefaultServer());
      assertEquals(5, serverConfig0.getMaxCallStack());
      assertFalse(serverConfig0.isNotifyL2CacheInForeground());
      assertFalse(serverConfig0.isAutoReadOnlyDataSource());
      assertEquals(10, serverConfig0.getLazyLoadBatchSize());
      assertFalse(serverConfig0.isDdlCreateOnly());
      assertTrue(serverConfig0.isCollectQueryOrigins());
      assertFalse(serverConfig0.isExpressionEqualsWithNullAsNoop());
      assertEquals(PersistenceContextScope.TRANSACTION, serverConfig0.getPersistenceContextScope());
      assertEquals("sys_period", serverConfig0.getAsOfSysPeriod());
      assertNull(serverConfig0.getDdlSeedSql());
      assertTrue(serverConfig0.isUseJavaxValidationNotNull());
      assertNull(serverConfig0.getResourceDirectory());
      assertEquals(0L, serverConfig0.getSlowQueryMillis());
      assertEquals(600, serverConfig0.getQueryCacheMaxIdleTime());
      assertEquals(PersistBatch.INHERIT, serverConfig0.getPersistBatchOnCascade());
      assertFalse(serverConfig0.isAutoCommitMode());
      assertNull(serverConfig0.getDatabasePlatformName());
      assertEquals(30, serverConfig0.getBackgroundExecutorShutdownSecs());
      assertEquals(21600, serverConfig0.getQueryCacheMaxTimeToLive());
      assertEquals("db", serverConfig0.getName());
      assertFalse(serverConfig0.isUseJtaTransactionManager());
      assertNull(serverConfig0.getDataSourceJndiName());
      assertTrue(serverConfig0.isUpdateChangesOnly());
      assertEquals(TenantMode.NONE, serverConfig0.getTenantMode());
      assertEquals(1, serverConfig0.getBackgroundExecutorSchedulePoolSize());
      assertEquals(100, serverConfig0.getJdbcFetchSizeFindEach());
      assertEquals(JsonConfig.DateTime.MILLIS, serverConfig0.getJsonDateTime());
      assertFalse(serverConfig0.isAllQuotedIdentifiers());
      assertEquals("ebean-uuid.state", serverConfig0.getUuidStateFile());
      assertFalse(serverConfig0.isEagerFetchLobs());
      assertEquals(0, serverConfig0.getJdbcFetchSizeFindList());
      assertEquals(20, serverConfig0.getPersistBatchSize());
      assertTrue(serverConfig0.isRegister());
      assertEquals("_history", serverConfig0.getHistoryTableSuffix());
      assertEquals(21600, serverConfig0.getCacheMaxTimeToLive());
      assertEquals(JsonConfig.Include.ALL, serverConfig0.getJsonInclude());
      assertEquals("tenant_id", serverConfig0.getTenantPartitionColumn());
      assertFalse(serverConfig0.isExpressionNativeIlike());
      assertEquals(4326, serverConfig0.getGeometrySRID());
      assertNull(serverConfig0.getJodaLocalTimeMode());
      assertFalse(serverConfig0.isDefaultOrderById());
      assertEquals(20, serverConfig0.getDatabaseSequenceBatchSize());
      assertTrue(serverConfig0.isCollectQueryStatsByNode());
      assertTrue(serverConfig0.isChangeLogAsync());
      assertEquals("_with_history", serverConfig0.getAsOfViewSuffix());
      assertNull(serverConfig0.getDatabaseBooleanTrue());
      assertFalse(serverConfig0.isDocStoreOnly());
      assertTrue(serverConfig0.isChangeLogIncludeInserts());
      assertFalse(serverConfig0.isDisableL2Cache());
      assertTrue(serverConfig0.isSkipCacheAfterWrite());
      assertEquals(100, serverConfig0.getQueryBatchSize());
      assertEquals(PersistBatch.NONE, serverConfig0.getPersistBatch());
      assertEquals(1000, serverConfig0.getQueryCacheMaxSize());
      assertEquals(600, serverConfig0.getCacheMaxIdleTime());
      assertEquals(300, serverConfig0.getQueryPlanTTLSeconds());
      assertTrue(serverConfig0.isTransactionRollbackOnChecked());
      assertFalse(serverConfig0.isDdlRun());
      assertFalse(serverConfig0.isDdlGenerate());
      assertNull(serverConfig0.getIdType());
      assertFalse(serverConfig0.isDisableClasspathSearch());
      assertNull(serverConfig0.getDdlInitSql());
      assertNull(serverConfig0.getDataTimeZone());
      assertFalse(serverConfig0.isExplicitTransactionBeginMode());
      
      EbeanServer ebeanServer0 = clusterManager0.getServer("io.ebean.common.AbstractBeanCollection");
      assertNull(ebeanServer0);
      assertNull(containerConfig0.getServiceName());
      assertNull(containerConfig0.getNamespace());
      assertNull(containerConfig0.getPodName());
      assertEquals(0, containerConfig0.getPort());
      assertFalse(containerConfig0.isActive());
      assertFalse(clusterManager0.isClustering());
      
      HashMap<ForkJoinTask<ThaiBuddhistEra>, ForkJoinTask<Class<Object>>> hashMap0 = new HashMap<ForkJoinTask<ThaiBuddhistEra>, ForkJoinTask<Class<Object>>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BeanMap<ForkJoinTask<ThaiBuddhistEra>, ForkJoinTask<Class<Object>>> beanMap0 = new BeanMap<ForkJoinTask<ThaiBuddhistEra>, ForkJoinTask<Class<Object>>>(hashMap0);
      assertNotNull(beanMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      
      boolean boolean1 = beanMap0.wasTouched();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(beanMap0.isReference());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isPopulated());
      
      BootupClasses bootupClasses0 = new BootupClasses();
      assertNotNull(bootupClasses0);
      
      InternalConfiguration internalConfiguration0 = null;
      try {
        internalConfiguration0 = new InternalConfiguration(clusterManager0, (SpiCacheManager) null, defaultBackgroundExecutor0, serverConfig0, bootupClasses0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.type.DefaultTypeManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanSet<Callable<Integer>> beanSet0 = new BeanSet<Callable<Integer>>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      BeanSet<Callable<Integer>> beanSet1 = new BeanSet<Callable<Integer>>(beanSet0);
      assertNotNull(beanSet1);
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      
      boolean boolean0 = beanSet1.wasTouched();
      assertNotSame(beanSet0, beanSet1);
      assertNotSame(beanSet1, beanSet0);
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertFalse(boolean0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Callable<Integer>> arrayList0 = new ArrayList<Callable<Integer>>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      BeanList<Callable<Integer>> beanList0 = new BeanList<Callable<Integer>>(arrayList0);
      assertNotNull(beanList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      
      beanList0.internalAddWithCheck("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(beanList0.isReference());
      assertFalse(beanList0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      
      BeanList<Delayed> beanList1 = new BeanList<Delayed>();
      assertNotNull(beanList1);
      assertTrue(beanList1.isSkipSave());
      assertFalse(beanList1.isReference());
      assertTrue(beanList1.isPopulated());
      
      BeanList<DLoadManyContext.LoadBuffer> beanList2 = new BeanList<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanList2);
      assertTrue(beanList2.isSkipSave());
      assertFalse(beanList2.isReference());
      assertTrue(beanList2.isPopulated());
      
      beanList2.checkReadOnly();
      assertTrue(beanList2.isSkipSave());
      assertFalse(beanList2.isReference());
      assertTrue(beanList2.isPopulated());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanList<DefaultServer> beanList0 = new BeanList<DefaultServer>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
      
      beanList0.setDisableLazyLoad(false);
      assertTrue(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<DLoadManyContext.LoadBuffer> linkedHashSet0 = new LinkedHashSet<DLoadManyContext.LoadBuffer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      BeanSet<DLoadManyContext.LoadBuffer> beanSet0 = new BeanSet<DLoadManyContext.LoadBuffer>(linkedHashSet0);
      assertNotNull(beanSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      
      BeanList<CallableQueryCount<String>> beanList0 = new BeanList<CallableQueryCount<String>>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      
      beanList0.internalAdd(beanSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertTrue(beanSet0.isSkipSave());
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      boolean boolean0 = beanList0.isReadOnly();
      assertFalse(boolean0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isSkipSave());
      assertFalse(beanList0.isReference());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BeanList<Object> beanList1 = new BeanList<Object>(linkedList0);
      assertNotNull(beanList1);
      assertEquals(0, linkedList0.size());
      assertTrue(beanList1.isSkipSave());
      assertTrue(beanList1.isPopulated());
      assertFalse(beanList1.isReference());
      
      TransactionManager transactionManager0 = null;
      try {
        transactionManager0 = new TransactionManager((TransactionManagerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.transaction.TransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanList<String> beanList0 = new BeanList<String>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      
      BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>> beanMap0 = new BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>((Map<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>) null);
      assertNotNull(beanMap0);
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isReference());
      
      ExpressionList<?> expressionList0 = beanMap0.getFilterMany();
      assertNull(expressionList0);
      assertFalse(beanMap0.isPopulated());
      assertTrue(beanMap0.isSkipSave());
      assertTrue(beanMap0.isReference());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanSet<DefaultServer> beanSet0 = new BeanSet<DefaultServer>();
      assertNotNull(beanSet0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      BeanSet<DefaultServer> beanSet1 = new BeanSet<DefaultServer>(beanSet0);
      assertNotNull(beanSet1);
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      
      boolean boolean0 = beanSet1.holdsModifications();
      assertNotSame(beanSet0, beanSet1);
      assertNotSame(beanSet1, beanSet0);
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertFalse(boolean0);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      
      BeanSet<DLoadManyContext.LoadBuffer> beanSet2 = new BeanSet<DLoadManyContext.LoadBuffer>();
      assertNotNull(beanSet2);
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isSkipSave());
      assertTrue(beanSet2.isPopulated());
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean1 = beanSet0.removeAll(arrayDeque0);
      assertNotSame(beanSet0, beanSet1);
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<DLoadManyContext.LoadBuffer> iterator0 = beanSet2.iterator();
      assertNotNull(iterator0);
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isSkipSave());
      assertTrue(beanSet2.isPopulated());
      
      boolean boolean2 = beanSet2.equals(beanSet1);
      assertNotSame(beanSet0, beanSet1);
      assertNotSame(beanSet1, beanSet0);
      assertTrue(beanSet0.equals((Object)beanSet1));
      assertTrue(beanSet1.equals((Object)beanSet0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      assertFalse(beanSet1.isReference());
      assertTrue(beanSet1.isSkipSave());
      assertTrue(beanSet1.isPopulated());
      assertFalse(beanSet2.isReference());
      assertTrue(beanSet2.isSkipSave());
      assertTrue(beanSet2.isPopulated());
      
      // Undeclared exception!
      try { 
        beanSet1.lazyLoadCollection(false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanList<Object> beanList0 = new BeanList<Object>();
      assertNotNull(beanList0);
      assertTrue(beanList0.isPopulated());
      assertFalse(beanList0.isReference());
      assertTrue(beanList0.isSkipSave());
      
      CacheChangeSet cacheChangeSet0 = new CacheChangeSet(false);
      assertNotNull(cacheChangeSet0);
      
      Set<String> set0 = cacheChangeSet0.apply();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      BeanSet<String> beanSet0 = new BeanSet<String>(set0);
      assertNotNull(beanSet0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      boolean boolean0 = beanSet0.isSkipSave();
      assertTrue(boolean0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(beanSet0.isSkipSave());
      assertFalse(beanSet0.isReference());
      assertTrue(beanSet0.isPopulated());
      
      // Undeclared exception!
      try { 
        beanSet0.lazyLoadCollection(true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanList<DLoadManyContext.LoadBuffer> beanList0 = new BeanList<DLoadManyContext.LoadBuffer>();
      BeanList<DLoadManyContext.LoadBuffer> beanList1 = new BeanList<DLoadManyContext.LoadBuffer>();
      beanList1.containsAll(beanList0);
      beanList0.setFromOriginal(beanList1);
      assertTrue(beanList0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanSet<DefaultServer> beanSet0 = new BeanSet<DefaultServer>();
      beanSet0.checkEmptyLazyLoad();
      beanSet0.size();
      BeanSet<ForkJoinTask<DefaultServer>> beanSet1 = new BeanSet<ForkJoinTask<DefaultServer>>();
      beanSet1.disableLazyLoad = true;
      beanSet1.getOwnerBean();
      BeanMap<ThaiBuddhistEra, Comparable<String>> beanMap0 = new BeanMap<ThaiBuddhistEra, Comparable<String>>();
      beanSet1.readOnly = true;
      BeanSet<CallableQueryCount<String>> beanSet2 = new BeanSet<CallableQueryCount<String>>();
      FilterExprPath filterExprPath0 = new FilterExprPath("yg&=RR-/w");
      FilterExprPath filterExprPath1 = filterExprPath0.trimPath(0);
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory(true, false);
      FilterExpressionList<String> filterExpressionList0 = new FilterExpressionList<String>(filterExprPath1, defaultExpressionFactory0, (Query<String>) null);
      FilterExpressionList<String> filterExpressionList1 = new FilterExpressionList<String>(filterExprPath1, filterExpressionList0);
      beanSet2.setFilterMany(filterExpressionList1);
      beanSet2.addEntityBean((EntityBean) null);
      ExpressionList<?> expressionList0 = beanSet0.getFilterMany();
      assertNull(expressionList0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanSet<CallableQueryCount<String>> beanSet0 = new BeanSet<CallableQueryCount<String>>();
      beanSet0.iterator();
      BeanSet<String> beanSet1 = new BeanSet<String>();
      HashMap<ThaiBuddhistEra, Delayed> hashMap0 = new HashMap<ThaiBuddhistEra, Delayed>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      hashMap0.put(thaiBuddhistEra0, (Delayed) null);
      BeanMap<ThaiBuddhistEra, Delayed> beanMap0 = new BeanMap<ThaiBuddhistEra, Delayed>(hashMap0);
      ThaiBuddhistEra thaiBuddhistEra1 = ThaiBuddhistEra.BE;
      beanMap0.setDisableLazyLoad(true);
      beanMap0.put(thaiBuddhistEra1, (Delayed) null);
      beanMap0.getActualMap();
      BeanSet<Class<String>> beanSet2 = new BeanSet<Class<String>>((Set<Class<String>>) null);
      beanSet2.getModifyHolder();
      BeanList<Callable<Integer>> beanList0 = null;
      try {
        beanList0 = new BeanList<Callable<Integer>>((BeanCollectionLoader) null, (EntityBean) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BeanMap<String, CallableQueryCount<ThaiBuddhistEra>> beanMap0 = new BeanMap<String, CallableQueryCount<ThaiBuddhistEra>>();
      BeanMap<String, CallableQueryCount<ThaiBuddhistEra>> beanMap1 = new BeanMap<String, CallableQueryCount<ThaiBuddhistEra>>(beanMap0);
      beanMap1.values();
      BeanMap<String, Integer> beanMap2 = new BeanMap<String, Integer>();
      Integer integer0 = new Integer(90039);
      beanMap2.modifyAddition(integer0);
      assertTrue(beanMap2.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InternalConfiguration internalConfiguration0 = null;
      DefaultServer defaultServer0 = null;
      try {
        defaultServer0 = new DefaultServer((InternalConfiguration) null, (ServerCacheManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.core.DefaultServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>> beanMap0 = new BeanMap<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>((Map<DLoadManyContext.LoadBuffer, ForkJoinTask<ThaiBuddhistEra>>) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.REMOVALS;
      beanMap0.modifyListenMode = beanCollection_ModifyListenMode0;
      beanMap0.setReadOnly(true);
      beanMap0.modifyReset();
      BeanMap<DefaultServer, ChronoLocalDate> beanMap1 = new BeanMap<DefaultServer, ChronoLocalDate>();
      beanMap1.values();
      beanMap1.isSkipSave();
      BeanMap<Callable<Integer>, ForkJoinTask<Class<Object>>> beanMap2 = new BeanMap<Callable<Integer>, ForkJoinTask<Class<Object>>>();
      BeanList<Delayed> beanList0 = new BeanList<Delayed>();
      beanList0.checkEmptyLazyLoad();
      BeanList<CallableQueryCount<String>> beanList1 = new BeanList<CallableQueryCount<String>>();
      BeanMap<ForkJoinTask<Delayed>, CallableQueryCount<ThaiBuddhistEra>> beanMap3 = new BeanMap<ForkJoinTask<Delayed>, CallableQueryCount<ThaiBuddhistEra>>();
      beanMap3.modifyReset();
      BeanSet<DLoadManyContext.LoadBuffer> beanSet0 = new BeanSet<DLoadManyContext.LoadBuffer>();
      beanSet0.setModifyListening(beanMap0.modifyListenMode);
      // Undeclared exception!
      try { 
        beanList0.lazyLoadCollection(false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanMap<Delayed, Delayed> beanMap0 = new BeanMap<Delayed, Delayed>();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2296);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      RemoteTransactionEvent remoteTransactionEvent0 = new RemoteTransactionEvent("*}|REh");
      MockThread mockThread0 = new MockThread(threadGroup0, remoteTransactionEvent0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 2296, 2296, timeUnit0);
      beanMap0.put(scheduledFuture0, scheduledFuture0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*}|REh";
      stringArray0[1] = "*}|REh";
      stringArray0[2] = "*}|REh";
      stringArray0[3] = "*}|REh";
      stringArray0[4] = "*}|REh";
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>(hashSet0);
      beanSet0.setDisableLazyLoad(true);
      TextQueryString textQueryString0 = new TextQueryString(stringArray0);
      TextQueryString textQueryString1 = textQueryString0.rewrite(")}f:X$MY / GcS@K");
      textQueryString1.fuzziness("*}|REh");
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      thaiBuddhistEra0.getValue();
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      // Undeclared exception!
      try { 
        thaiBuddhistEra0.get(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: SecondOfMinute
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanMap<Delayed, DLoadManyContext.LoadBuffer> beanMap0 = new BeanMap<Delayed, DLoadManyContext.LoadBuffer>();
      beanMap0.readOnly = false;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      Integer.max(1017, 1017);
      String string0 = "";
      hashMap0.put(integer0, "");
      BeanMap<Integer, String> beanMap1 = new BeanMap<Integer, String>(hashMap0);
      beanMap0.setActualMap(beanMap1);
      beanMap0.isEmpty();
      beanMap0.containsKey("");
      HashMap<Delayed, Delayed> hashMap1 = new HashMap<Delayed, Delayed>();
      BeanMap<Delayed, Delayed> beanMap2 = new BeanMap<Delayed, Delayed>(hashMap1);
      beanMap2.isSkipSave();
      BeanMap<Object, Object> beanMap3 = new BeanMap<Object, Object>();
      beanMap3.containsValue((Object) null);
      ContainerConfig containerConfig0 = new ContainerConfig();
      ClusterManager clusterManager0 = new ClusterManager(containerConfig0);
      SpiCacheManager spiCacheManager0 = null;
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(1017, 3409, "");
      ServerConfig serverConfig0 = null;
      BootupClasses bootupClasses0 = new BootupClasses();
      InternalConfiguration internalConfiguration0 = null;
      try {
        internalConfiguration0 = new InternalConfiguration(clusterManager0, (SpiCacheManager) null, defaultBackgroundExecutor0, (ServerConfig) null, bootupClasses0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.core.InternalConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashSet<DLoadManyContext.LoadBuffer> hashSet0 = new HashSet<DLoadManyContext.LoadBuffer>();
      int int0 = (-154);
      DLoadManyContext.LoadBuffer dLoadManyContext_LoadBuffer0 = null;
      try {
        dLoadManyContext_LoadBuffer0 = new DLoadManyContext.LoadBuffer((DLoadManyContext) null, (-154));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.loadcontext.DLoadManyContext$LoadBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      beanSet0.setReadOnly(false);
      Integer integer0 = Integer.getInteger(";F2!#", 0);
      beanSet0.add(integer0);
      int int0 = (-1531);
      Integer.remainderUnsigned(0, (-1531));
      beanSet0.removeBean(integer0);
      beanSet0.size();
      beanSet0.isRegisteredWithLoadContext();
      BeanSet<DefaultServer> beanSet1 = new BeanSet<DefaultServer>();
      beanSet1.iterator();
      Class<String> class0 = String.class;
      int int1 = 0;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 0);
      Integer integer1 = objectIdGenerators_IntSequenceGenerator0.generateId(";F2!#");
      beanSet1.remove(integer1);
      BeanMap<Object, String> beanMap0 = new BeanMap<Object, String>();
      beanMap0.checkEmptyLazyLoad();
      BeanList<Object> beanList0 = new BeanList<Object>();
      beanList0.listIterator(0);
      BeanList<Delayed> beanList1 = new BeanList<Delayed>((List<Delayed>) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanMap<Class<Object>, Object> beanMap0 = new BeanMap<Class<Object>, Object>();
      BeanCollection.ModifyListenMode beanCollection_ModifyListenMode0 = BeanCollection.ModifyListenMode.REMOVALS;
      beanMap0.modifyListenMode = beanCollection_ModifyListenMode0;
      BeanMap<Class<Object>, Object> beanMap1 = new BeanMap<Class<Object>, Object>(beanMap0);
      beanMap1.getModifyRemovals();
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      BeanSet<Integer> beanSet1 = new BeanSet<Integer>(beanSet0);
      beanSet1.isReference();
      FilterExprPath filterExprPath0 = new FilterExprPath("ge)A.f@v<lu!T~");
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory(false, false);
      FilterExpressionList<String> filterExpressionList0 = new FilterExpressionList<String>(filterExprPath0, defaultExpressionFactory0, (Query<String>) null);
      // Undeclared exception!
      try { 
        filterExpressionList0.findMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebeaninternal.server.expression.FilterExpressionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanMap<Integer, Delayed> beanMap0 = new BeanMap<Integer, Delayed>();
      beanMap0.getModifyAdditions();
      BeanList<ThaiBuddhistEra> beanList0 = new BeanList<ThaiBuddhistEra>();
      beanList0.setDisableLazyLoad(true);
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      beanList0.addBean(thaiBuddhistEra0);
      BeanMap<ThaiBuddhistEra, Comparable<DLoadManyContext.LoadBuffer>> beanMap1 = new BeanMap<ThaiBuddhistEra, Comparable<DLoadManyContext.LoadBuffer>>();
      BeanMap<ThaiBuddhistEra, Comparable<DLoadManyContext.LoadBuffer>> beanMap2 = new BeanMap<ThaiBuddhistEra, Comparable<DLoadManyContext.LoadBuffer>>(beanMap1);
      BeanMap<Integer, DLoadManyContext.LoadBuffer> beanMap3 = new BeanMap<Integer, DLoadManyContext.LoadBuffer>();
      beanMap3.modifyRemoval(beanMap0);
      BeanMap<ThaiBuddhistEra, ChronoLocalDate> beanMap4 = new BeanMap<ThaiBuddhistEra, ChronoLocalDate>();
      BeanMap<DefaultServer, DefaultServer> beanMap5 = new BeanMap<DefaultServer, DefaultServer>();
      beanMap5.getShallowCopy();
      beanMap5.getModifyAdditions();
      BeanList<DefaultServer> beanList1 = new BeanList<DefaultServer>();
      BeanSet<Callable<Integer>> beanSet0 = new BeanSet<Callable<Integer>>();
      System.setCurrentTimeMillis((-359L));
      BeanList<Class<Object>> beanList2 = new BeanList<Class<Object>>();
      // Undeclared exception!
      try { 
        beanList2.listIterator(434);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 434
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
