/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:37:44 GMT 2019
 */

package io.ebean.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.bean.BeanCollection;
import io.ebean.bean.BeanCollectionLoader;
import io.ebean.bean.EntityBean;
import io.ebean.common.BeanList;
import io.ebean.common.BeanSet;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoEra;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanSet_ESTest extends BeanSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(linkedHashSet0);
      beanSet0.registeredWithLoadContext = true;
      boolean boolean0 = beanSet0.retainAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<IsoEra> beanSet1 = new BeanSet<IsoEra>();
      beanSet0.registeredWithLoadContext = true;
      boolean boolean0 = beanSet0.removeAll(beanSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      beanSet0.disableLazyLoad = true;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      beanSet0.forEach(consumer0);
      assertTrue(beanSet0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      beanSet0.disableLazyLoad = true;
      beanSet0.clear();
      assertFalse(beanSet0.isReference());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanSet<Callable<String>> beanSet0 = new BeanSet<Callable<String>>();
      IsoEra[] isoEraArray0 = new IsoEra[7];
      IsoEra[] isoEraArray1 = beanSet0.toArray(isoEraArray0);
      assertSame(isoEraArray0, isoEraArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      Callable<ForkJoinTask<Integer>>[] callableArray0 = (Callable<ForkJoinTask<Integer>>[]) Array.newInstance(Callable.class, 0);
      Callable<ForkJoinTask<Integer>>[] callableArray1 = beanSet0.toArray(callableArray0);
      assertSame(callableArray1, callableArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanSet<ForkJoinTask<Delayed>> beanSet0 = new BeanSet<ForkJoinTask<Delayed>>();
      Object object0 = new Object();
      beanSet0.internalAddWithCheck(object0);
      int int0 = beanSet0.size();
      assertFalse(beanSet0.isSkipSave());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      beanSet0.internalAdd(hashSet0);
      assertFalse(beanSet0.isSkipSave());
      
      boolean boolean0 = beanSet0.remove(hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      beanSet0.internalAdd(isoEra0);
      beanSet0.getShallowCopy();
      assertFalse(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      Set<Integer> set0 = beanSet0.getActualSet();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<IsoEra> beanSet1 = new BeanSet<IsoEra>();
      beanSet0.internalAdd(beanSet1);
      Set<Object> set0 = beanSet0.getActualSet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      Collection<?> collection0 = beanSet0.getActualEntries();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>((Set<IsoEra>) null);
      Collection<IsoEra> collection0 = beanSet0.getActualDetails();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      boolean boolean0 = beanSet0.equals(beanSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashSet<ForkJoinTask<Object>> hashSet0 = new HashSet<ForkJoinTask<Object>>();
      BeanSet<ForkJoinTask<Object>> beanSet0 = new BeanSet<ForkJoinTask<Object>>(hashSet0);
      // Undeclared exception!
      try { 
        beanSet0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      String[] stringArray0 = new String[6];
      Integer integer0 = new Integer(0);
      beanSet0.internalAdd(integer0);
      // Undeclared exception!
      try { 
        beanSet0.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      // Undeclared exception!
      try { 
        beanSet0.toArray();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>((Set<Object>) null);
      // Undeclared exception!
      try { 
        beanSet0.size();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(linkedHashSet0);
      beanSet0.internalAddWithCheck(linkedHashSet0);
      // Undeclared exception!
      try { 
        beanSet0.retainAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanSet<ForkJoinTask<Object>> beanSet0 = new BeanSet<ForkJoinTask<Object>>();
      // Undeclared exception!
      try { 
        beanSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      BeanSet<ForkJoinTask<Callable<ForkJoinTask<Integer>>>> beanSet1 = new BeanSet<ForkJoinTask<Callable<ForkJoinTask<Integer>>>>((Set<ForkJoinTask<Callable<ForkJoinTask<Integer>>>>) null);
      // Undeclared exception!
      try { 
        beanSet1.retainAll(beanSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      BeanSet<Integer> beanSet1 = new BeanSet<Integer>(beanSet0);
      // Undeclared exception!
      try { 
        beanSet1.removeBean((Integer) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      TreeSet<BeanSet<Object>> treeSet0 = new TreeSet<BeanSet<Object>>();
      BeanSet<BeanSet<Object>> beanSet1 = new BeanSet<BeanSet<Object>>(treeSet0);
      // Undeclared exception!
      try { 
        beanSet1.removeBean(beanSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // io.ebean.common.BeanSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSet<Comparable<Delayed>> hashSet0 = new HashSet<Comparable<Delayed>>();
      BeanSet<Comparable<Delayed>> beanSet0 = new BeanSet<Comparable<Delayed>>(hashSet0);
      beanSet0.internalAddWithCheck(hashSet0);
      // Undeclared exception!
      try { 
        beanSet0.removeAll(hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      // Undeclared exception!
      try { 
        beanSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      BeanSet<Annotation> beanSet0 = new BeanSet<Annotation>((Set<Annotation>) null);
      // Undeclared exception!
      try { 
        beanSet0.removeAll(linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>((Set<Callable<ForkJoinTask<Integer>>>) null);
      beanSet0.readOnly = true;
      // Undeclared exception!
      try { 
        beanSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This collection is in ReadOnly mode
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(hashSet0);
      beanSet0.addBean(hashSet0);
      // Undeclared exception!
      try { 
        beanSet0.remove(hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanSet0.remove(object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>(treeSet0);
      // Undeclared exception!
      try { 
        beanSet0.remove(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      // Undeclared exception!
      try { 
        beanSet0.isEmpty();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      beanSet0.setActualSet((Set<?>) null);
      BeanSet<Object> beanSet1 = new BeanSet<Object>();
      // Undeclared exception!
      try { 
        beanSet1.internalAddWithCheck(beanSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashSet<ForkJoinTask<Object>> hashSet0 = new HashSet<ForkJoinTask<Object>>();
      BeanSet<ForkJoinTask<Object>> beanSet0 = new BeanSet<ForkJoinTask<Object>>(hashSet0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      BeanSet<Integer> beanSet1 = new BeanSet<Integer>(treeSet0);
      // Undeclared exception!
      try { 
        beanSet1.internalAddWithCheck(beanSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      // Undeclared exception!
      try { 
        beanSet0.hashCode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>((Set<Object>) null);
      BeanSet<Object> beanSet1 = new BeanSet<Object>(beanSet0);
      // Undeclared exception!
      try { 
        beanSet1.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<Comparable<Integer>> beanSet1 = new BeanSet<Comparable<Integer>>((Set<Comparable<Integer>>) null);
      // Undeclared exception!
      try { 
        beanSet1.containsAll(beanSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanSet<Delayed> beanSet0 = new BeanSet<Delayed>((Set<Delayed>) null);
      // Undeclared exception!
      try { 
        beanSet0.contains((Object) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>();
      beanSet0.readOnly = true;
      // Undeclared exception!
      try { 
        beanSet0.clear();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This collection is in ReadOnly mode
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      // Undeclared exception!
      try { 
        beanSet0.addBean("suppressed");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeSet<ChronoLocalDate> treeSet0 = new TreeSet<ChronoLocalDate>();
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>(treeSet0);
      // Undeclared exception!
      try { 
        beanSet0.add((ChronoLocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanSet<Delayed> beanSet0 = new BeanSet<Delayed>((Set<Delayed>) null);
      // Undeclared exception!
      try { 
        beanSet0.add((Delayed) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      beanSet0.readOnly = true;
      Integer integer0 = new Integer(459);
      // Undeclared exception!
      try { 
        beanSet0.add(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This collection is in ReadOnly mode
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>();
      Iterator<ChronoLocalDate> iterator0 = beanSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(linkedHashSet0);
      boolean boolean0 = beanSet0.add(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      beanSet0.internalAdd((Object) null);
      assertTrue(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>((Set<Callable<ForkJoinTask<Integer>>>) null);
      Object object0 = new Object();
      beanSet0.internalAdd(object0);
      assertFalse(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      boolean boolean0 = beanSet0.remove(beanSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      boolean boolean0 = beanSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(linkedHashSet0);
      linkedHashSet0.add((Object) null);
      boolean boolean0 = beanSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      BeanSet<Callable<Delayed>> beanSet1 = new BeanSet<Callable<Delayed>>();
      boolean boolean0 = beanSet1.containsAll(beanSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      BeanSet<String> beanSet0 = new BeanSet<String>(linkedHashSet0);
      BeanSet<Object> beanSet1 = new BeanSet<Object>();
      boolean boolean0 = beanSet1.containsAll(beanSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<IsoEra> beanSet1 = new BeanSet<IsoEra>();
      IsoEra isoEra0 = IsoEra.CE;
      beanSet0.setActualSet(beanSet1);
      beanSet1.internalAdd(isoEra0);
      assertFalse(beanSet1.isSkipSave());
      
      boolean boolean0 = beanSet0.removeAll(beanSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      boolean boolean0 = beanSet0.contains("ZvSdW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashSet<Callable<ForkJoinTask<Integer>>> hashSet0 = new HashSet<Callable<ForkJoinTask<Integer>>>();
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>(hashSet0);
      BeanSet<Object> beanSet1 = new BeanSet<Object>();
      Callable<ForkJoinTask<Integer>> callable0 = (Callable<ForkJoinTask<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      hashSet0.add(callable0);
      beanSet1.modifyListening = true;
      boolean boolean0 = beanSet1.addAll(beanSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashSet<Callable<ForkJoinTask<Integer>>> hashSet0 = new HashSet<Callable<ForkJoinTask<Integer>>>();
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>(hashSet0);
      BeanSet<Object> beanSet1 = new BeanSet<Object>();
      beanSet1.modifyListening = true;
      boolean boolean0 = beanSet1.addAll(beanSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(hashSet0);
      beanSet0.modifyListening = true;
      // Undeclared exception!
      try { 
        beanSet0.addBean(hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      beanSet0.removeBean("");
      assertTrue(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashSet<Callable<ForkJoinTask<Integer>>> hashSet0 = new HashSet<Callable<ForkJoinTask<Integer>>>();
      BeanSet<Callable<ForkJoinTask<Integer>>> beanSet0 = new BeanSet<Callable<ForkJoinTask<Integer>>>(hashSet0);
      String string0 = beanSet0.toString();
      assertEquals("BeanSet size[0] set[]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      beanSet0.clear();
      assertTrue(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      boolean boolean0 = beanSet0.checkEmptyLazyLoad();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      BeanSet<Integer> beanSet1 = new BeanSet<Integer>(beanSet0);
      boolean boolean0 = beanSet1.checkEmptyLazyLoad();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      boolean boolean0 = beanSet0.isReference();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BeanSet<ChronoLocalDate> beanSet0 = new BeanSet<ChronoLocalDate>();
      boolean boolean0 = beanSet0.isReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      boolean boolean0 = beanSet0.isPopulated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>((Set<String>) null);
      boolean boolean0 = beanSet0.isPopulated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<IsoEra> beanSet1 = new BeanSet<IsoEra>();
      beanSet1.internalAddWithCheck(beanSet0);
      assertFalse(beanSet1.isSkipSave());
      
      BeanSet<Delayed> beanSet2 = new BeanSet<Delayed>();
      boolean boolean0 = beanSet1.retainAll(beanSet2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>((Set<Object>) null);
      beanSet0.internalAddWithCheck((Object) null);
      assertTrue(beanSet0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      BeanList<String> beanList0 = new BeanList<String>();
      beanSet0.loadFrom(beanList0);
      assertFalse(beanSet0.isReference());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      assertTrue(beanSet0.isSkipSave());
      
      IsoEra isoEra0 = IsoEra.BCE;
      EnumSet<IsoEra> enumSet0 = EnumSet.of(isoEra0, isoEra0, isoEra0, isoEra0);
      beanSet0.addAll(enumSet0);
      boolean boolean0 = beanSet0.isSkipSave();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      boolean boolean0 = beanSet0.isSkipSave();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      boolean boolean0 = beanSet0.isSkipSave();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>();
      beanSet0.readOnly = true;
      Iterator<Integer> iterator0 = beanSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      beanSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BeanSet<Delayed> beanSet0 = new BeanSet<Delayed>();
      boolean boolean0 = beanSet0.equals("ZvSdW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      BeanSet<IsoEra> beanSet1 = new BeanSet<IsoEra>();
      beanSet0.setActualSet(beanSet1);
      beanSet1.disableLazyLoad = true;
      boolean boolean0 = beanSet0.removeAll(beanSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BeanSet<String> beanSet0 = new BeanSet<String>();
      beanSet0.addBean("readOnly ");
      Object[] objectArray0 = beanSet0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = null;
      try {
        beanSet0 = new BeanSet<IsoEra>((BeanCollectionLoader) null, (EntityBean) null, "W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BeanSet<HashSet<String>> beanSet0 = new BeanSet<HashSet<String>>();
      beanSet0.reset((EntityBean) null, "");
      assertTrue(beanSet0.isSkipSave());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BeanSet<String> beanSet0 = new BeanSet<String>(linkedHashSet0);
      Collection<?> collection0 = beanSet0.getActualEntries();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      Set<Object> set0 = beanSet0.getActualSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BeanSet<IsoEra> beanSet0 = new BeanSet<IsoEra>();
      beanSet0.addEntityBean((EntityBean) null);
      assertFalse(beanSet0.isReference());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BeanSet<Object> beanSet0 = new BeanSet<Object>();
      Object[] objectArray0 = beanSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TreeSet<Delayed> treeSet0 = new TreeSet<Delayed>();
      BeanSet<Delayed> beanSet0 = new BeanSet<Delayed>(treeSet0);
      BeanCollection<Delayed> beanCollection0 = beanSet0.getShallowCopy();
      assertTrue(beanCollection0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      BeanSet<Object> beanSet0 = new BeanSet<Object>(linkedHashSet0);
      Collection<Object> collection0 = beanSet0.getActualDetails();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BeanSet<Integer> beanSet0 = new BeanSet<Integer>((Set<Integer>) null);
      // Undeclared exception!
      try { 
        beanSet0.toArray((IsoEra[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.ebean.Ebean
         //
         verifyException("io.ebean.common.AbstractBeanCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BeanSet<Callable<Delayed>> beanSet0 = new BeanSet<Callable<Delayed>>();
      int int0 = beanSet0.size();
      assertEquals(0, int0);
  }
}
