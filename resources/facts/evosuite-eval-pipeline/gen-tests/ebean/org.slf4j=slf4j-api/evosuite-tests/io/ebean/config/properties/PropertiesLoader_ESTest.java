/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:59:55 GMT 2019
 */

package io.ebean.config.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.properties.PropertiesLoader;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertiesLoader_ESTest extends PropertiesLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Properties properties0 = PropertiesLoader.load();
      PropertiesLoader propertiesLoader0 = new PropertiesLoader();
      properties0.put(propertiesLoader0, properties0);
      Properties properties1 = PropertiesLoader.load();
      assertSame(properties1, properties0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Properties properties0 = PropertiesLoader.load();
      properties0.put("", "");
      Properties properties1 = PropertiesLoader.eval(properties0);
      assertNotSame(properties1, properties0);
      assertEquals(1, properties1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("application.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        PropertiesLoader.load();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("io.ebean.config.properties.LoadContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Properties properties0 = PropertiesLoader.load();
      Object object0 = new Object();
      properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        PropertiesLoader.eval(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Properties properties0 = PropertiesLoader.load();
      Object object0 = new Object();
      properties0.put("{", object0);
      // Undeclared exception!
      try { 
        PropertiesLoader.eval(properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Properties properties0 = PropertiesLoader.load();
      assertNotNull(properties0);
      
      Properties properties1 = PropertiesLoader.eval(properties0);
      assertNotSame(properties1, properties0);
  }
}
