/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:06:05 GMT 2019
 */

package io.ebean.config.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.properties.LoadContext;
import io.ebean.config.properties.Loader;
import io.ebean.config.properties.YamlLoader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YamlLoader_ESTest extends YamlLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YamlLoader yamlLoader0 = new YamlLoader((LoadContext) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        yamlLoader0.loadMap(hashMap0, "9@}e^/f-sY'u/&yx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.properties.YamlLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        yamlLoader0.load(byteArrayInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // special characters are not allowed
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      // Undeclared exception!
      try { 
        yamlLoader0.load(pushbackInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        yamlLoader0.load(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-14), (byte)5);
      // Undeclared exception!
      try { 
        yamlLoader0.load(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Boolean boolean0 = Boolean.valueOf("");
      hashMap0.put("~?/w,u", boolean0);
      yamlLoader0.loadMap(hashMap0, "~?/w,u");
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double(1489.45020923);
      hashMap0.put("qeV", double0);
      yamlLoader0.loadMap(hashMap0, "io.ebean.config.properties.YamlLoader");
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      Properties properties0 = loadContext0.eval();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, properties0);
      yamlLoader0.loadMap(hashMap0, "io.ebean.config.properties.YamlLoader");
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(".", loadContext0);
      yamlLoader0.loadMap(hashMap0, (String) null);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YamlLoader yamlLoader0 = new YamlLoader((LoadContext) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      yamlLoader0.load(sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      Loader.Source loader_Source0 = Loader.Source.RESOURCE;
      InputStream inputStream0 = loadContext0.resource("", loader_Source0);
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      // Undeclared exception!
      try { 
        yamlLoader0.load(inputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("io.ebean.config.properties.YamlLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LoadContext loadContext0 = new LoadContext();
      YamlLoader yamlLoader0 = new YamlLoader(loadContext0);
      yamlLoader0.load((InputStream) null);
  }
}
