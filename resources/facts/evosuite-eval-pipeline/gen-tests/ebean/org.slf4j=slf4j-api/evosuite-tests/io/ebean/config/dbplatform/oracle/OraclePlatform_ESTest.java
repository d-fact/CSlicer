/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:42:52 GMT 2019
 */

package io.ebean.config.dbplatform.oracle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Query;
import io.ebean.config.dbplatform.oracle.OraclePlatform;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OraclePlatform_ESTest extends OraclePlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OraclePlatform oraclePlatform0 = new OraclePlatform();
      // Undeclared exception!
      try { 
        oraclePlatform0.withForUpdate((String) null, (Query.ForUpdate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.oracle.OraclePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OraclePlatform oraclePlatform0 = new OraclePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      String string0 = oraclePlatform0.withForUpdate("<~z}WBm", query_ForUpdate0);
      assertTrue(oraclePlatform0.isTreatEmptyStringsAsNull());
      assertEquals(30, oraclePlatform0.getMaxTableNameLength());
      assertEquals(30, oraclePlatform0.getMaxConstraintNameLength());
      assertEquals("<~z}WBm for update nowait", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OraclePlatform oraclePlatform0 = new OraclePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      String string0 = oraclePlatform0.withForUpdate("<~z}WBm", query_ForUpdate0);
      assertEquals(30, oraclePlatform0.getMaxConstraintNameLength());
      assertEquals("<~z}WBm for update", string0);
      assertTrue(oraclePlatform0.isTreatEmptyStringsAsNull());
      assertEquals(30, oraclePlatform0.getMaxTableNameLength());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OraclePlatform oraclePlatform0 = new OraclePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.SKIPLOCKED;
      String string0 = oraclePlatform0.withForUpdate("<~z}WBm", query_ForUpdate0);
      assertEquals("<~z}WBm for update skip locked", string0);
      assertTrue(oraclePlatform0.isTreatEmptyStringsAsNull());
      assertEquals(30, oraclePlatform0.getMaxConstraintNameLength());
      assertEquals(30, oraclePlatform0.getMaxTableNameLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OraclePlatform oraclePlatform0 = new OraclePlatform();
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(116, 116, "<~z}WBm for update");
      oraclePlatform0.createSequenceIdGenerator(defaultBackgroundExecutor0, (DataSource) null, 116, "<~z}WBm for update");
      assertTrue(oraclePlatform0.isTreatEmptyStringsAsNull());
      assertEquals(30, oraclePlatform0.getMaxTableNameLength());
      assertEquals(30, oraclePlatform0.getMaxConstraintNameLength());
  }
}
