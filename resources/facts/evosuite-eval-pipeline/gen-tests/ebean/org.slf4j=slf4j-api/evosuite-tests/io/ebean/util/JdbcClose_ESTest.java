/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:00:40 GMT 2019
 */

package io.ebean.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.jdbc.JDBC4LoadBalancedMySQLConnection;
import com.mysql.jdbc.LoadBalancedConnectionProxy;
import com.mysql.jdbc.MultiHostConnectionProxy;
import com.mysql.jdbc.ReplicationMySQLConnection;
import io.ebean.util.JdbcClose;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.SessionInterface;
import org.hsqldb.jdbc.JDBCConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JdbcClose_ESTest extends JdbcClose_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JDBCConnection jDBCConnection0 = new JDBCConnection((SessionInterface) null);
      // Undeclared exception!
      try { 
        JdbcClose.rollback(jDBCConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.JDBCConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        JdbcClose.close((Connection) replicationMySQLConnection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$1294834653 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        JdbcClose.rollback(replicationMySQLConnection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$1294834653 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JdbcClose.rollback((Connection) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LoadBalancedConnectionProxy loadBalancedConnectionProxy0 = mock(LoadBalancedConnectionProxy.class, new ViolatedAssumptionAnswer());
      JDBC4LoadBalancedMySQLConnection jDBC4LoadBalancedMySQLConnection0 = new JDBC4LoadBalancedMySQLConnection(loadBalancedConnectionProxy0);
      // Undeclared exception!
      try { 
        JdbcClose.close((Connection) jDBC4LoadBalancedMySQLConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.jdbc.LoadBalancedConnectionProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JdbcClose.close((Connection) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      JdbcClose.close((ResultSet) simpleResultSet0);
      assertTrue(simpleResultSet0.getAutoClose());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JdbcClose.close((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JdbcClose.close((Statement) null);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JdbcClose jdbcClose0 = new JdbcClose();
  }
}
