/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:41:37 GMT 2019
 */

package io.ebean.config.dbplatform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Transaction;
import io.ebean.TxScope;
import io.ebean.config.dbplatform.SimpleSequenceIdGenerator;
import io.ebeaninternal.api.ScopeTrans;
import io.ebeaninternal.api.ScopedTransaction;
import io.ebeaninternal.server.transaction.DefaultTransactionScopeManager;
import java.io.PrintWriter;
import javax.persistence.PersistenceException;
import javax.sql.ConnectionPoolDataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.JDBCPool;
import org.junit.runner.RunWith;
import org.sqlite.SQLiteConfig;
import org.sqlite.SQLiteDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleSequenceIdGenerator_ESTest extends SimpleSequenceIdGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(sQLiteDataSource0, "io.ebean.config.dbplatform.SimpleSequenceIdGenerator", "io.ebean.config.dbplatform.SimpleSequenceIdGenerator");
      sQLiteDataSource0.setUrl("U6{h;");
      // Undeclared exception!
      try { 
        simpleSequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.SimpleSequenceIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConnectionPoolDataSource connectionPoolDataSource0 = mock(ConnectionPoolDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(connectionPoolDataSource0).getLogWriter();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create(connectionPoolDataSource0);
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jdbcConnectionPool0, (String) null, (String) null);
      String string0 = simpleSequenceIdGenerator0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLiteConfig sQLiteConfig0 = new SQLiteConfig();
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource(sQLiteConfig0);
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(sQLiteDataSource0, "io.ebeaninternal.server.deploy.generatedproperty.GeneratedInsertJavaTime$InstantDT", "");
      String string0 = simpleSequenceIdGenerator0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(sQLiteDataSource0, "&5", "&5");
      // Undeclared exception!
      try { 
        simpleSequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: PersistenceException");
      
      } catch(PersistenceException e) {
         //
         // Error getting sequence nextval
         //
         verifyException("io.ebean.config.dbplatform.SimpleSequenceIdGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLiteDataSource sQLiteDataSource0 = new SQLiteDataSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(sQLiteDataSource0, "Error getting sequence nextval", "Error getting sequence nextval");
      // Undeclared exception!
      try { 
        simpleSequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // org.sqlite.core.NativeDB._open_utf8([BI)V
         //
         verifyException("org.sqlite.core.NativeDB", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((String) null, (String) null, "");
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jdbcConnectionPool0, (String) null, (String) null);
      DefaultTransactionScopeManager defaultTransactionScopeManager0 = new DefaultTransactionScopeManager("l");
      ScopedTransaction scopedTransaction0 = new ScopedTransaction(defaultTransactionScopeManager0);
      TxScope txScope0 = TxScope.mandatory();
      ScopeTrans scopeTrans0 = new ScopeTrans(true, false, scopedTransaction0, txScope0);
      scopedTransaction0.push(scopeTrans0);
      // Undeclared exception!
      try { 
        simpleSequenceIdGenerator0.nextId(scopedTransaction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConnectionPoolDataSource connectionPoolDataSource0 = mock(ConnectionPoolDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(connectionPoolDataSource0).getLogWriter();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create(connectionPoolDataSource0);
      jdbcConnectionPool0.dispose();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jdbcConnectionPool0, ".uTdeYi.UTyM8m\"DdD", ".uTdeYi.UTyM8m\"DdD");
      // Undeclared exception!
      try { 
        simpleSequenceIdGenerator0.nextId((Transaction) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Connection pool has been disposed.
         //
         verifyException("org.h2.jdbcx.JdbcConnectionPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JDBCPool jDBCPool0 = new JDBCPool();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jDBCPool0, "(fGT0aw~]YON4`.9s", "(fGT0aw~]YON4`.9s");
      String string0 = simpleSequenceIdGenerator0.getName();
      assertEquals("(fGT0aw~]YON4`.9s", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JDBCPool jDBCPool0 = new JDBCPool();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jDBCPool0, "(fGT0aw~]YON4`.9s", "(fGT0aw~]YON4`.9s");
      boolean boolean0 = simpleSequenceIdGenerator0.isDbSequence();
      assertEquals("(fGT0aw~]YON4`.9s", simpleSequenceIdGenerator0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JDBCPool jDBCPool0 = new JDBCPool();
      SimpleSequenceIdGenerator simpleSequenceIdGenerator0 = new SimpleSequenceIdGenerator(jDBCPool0, "(fGT0aw~]YON4`.9s", "(fGT0aw~]YON4`.9s");
      simpleSequenceIdGenerator0.preAllocateIds(0);
      assertEquals("(fGT0aw~]YON4`.9s", simpleSequenceIdGenerator0.getName());
  }
}
