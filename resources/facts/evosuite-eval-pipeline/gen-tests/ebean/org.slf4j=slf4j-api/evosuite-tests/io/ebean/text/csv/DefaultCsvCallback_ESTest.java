/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 17:26:02 GMT 2019
 */

package io.ebean.text.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.EbeanServer;
import io.ebean.config.TenantMode;
import io.ebean.text.csv.DefaultCsvCallback;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.time.chrono.ChronoLocalDate;
import java.util.concurrent.Delayed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultCsvCallback_ESTest extends DefaultCsvCallback_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultCsvCallback<TenantMode> defaultCsvCallback0 = new DefaultCsvCallback<TenantMode>();
      defaultCsvCallback0.startTime = 2147483647L;
      defaultCsvCallback0.end(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultCsvCallback<String> defaultCsvCallback0 = new DefaultCsvCallback<String>(0, 0);
      defaultCsvCallback0.end(0);
      defaultCsvCallback0.end(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultCsvCallback<Integer> defaultCsvCallback0 = new DefaultCsvCallback<Integer>();
      defaultCsvCallback0.rollbackTransactionIfCreated((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultCsvCallback<Delayed> defaultCsvCallback0 = new DefaultCsvCallback<Delayed>();
      defaultCsvCallback0.commitTransactionIfCreated();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultCsvCallback<Object> defaultCsvCallback0 = new DefaultCsvCallback<Object>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        defaultCsvCallback0.processBean(1, stringArray0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultCsvCallback<Integer> defaultCsvCallback0 = new DefaultCsvCallback<Integer>();
      // Undeclared exception!
      try { 
        defaultCsvCallback0.initTransactionIfRequired();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCsvCallback<Delayed> defaultCsvCallback0 = new DefaultCsvCallback<Delayed>(0, 567);
      defaultCsvCallback0.createdTransaction = true;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "] exeMillis[", sQLClientInfoException0);
      MockException mockException0 = new MockException("", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        defaultCsvCallback0.endWithError(0, mockException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultCsvCallback<String> defaultCsvCallback0 = new DefaultCsvCallback<String>();
      defaultCsvCallback0.createdTransaction = true;
      SQLDataException sQLDataException0 = new SQLDataException(".im,COw=zBMq23C4Wr");
      // Undeclared exception!
      try { 
        defaultCsvCallback0.rollbackTransactionIfCreated(sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultCsvCallback<Integer> defaultCsvCallback0 = new DefaultCsvCallback<Integer>();
      defaultCsvCallback0.createdTransaction = true;
      // Undeclared exception!
      try { 
        defaultCsvCallback0.end(139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultCsvCallback<String> defaultCsvCallback0 = new DefaultCsvCallback<String>();
      // Undeclared exception!
      try { 
        defaultCsvCallback0.begin((EbeanServer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCsvCallback<ChronoLocalDate> defaultCsvCallback0 = new DefaultCsvCallback<ChronoLocalDate>((-1180), (-1180));
      String[] stringArray0 = new String[3];
      defaultCsvCallback0.readHeader(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCsvCallback<String> defaultCsvCallback0 = new DefaultCsvCallback<String>();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLTimeoutException0);
      defaultCsvCallback0.endWithError((-1), sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultCsvCallback<Object> defaultCsvCallback0 = new DefaultCsvCallback<Object>();
      defaultCsvCallback0.createdTransaction = true;
      // Undeclared exception!
      try { 
        defaultCsvCallback0.commitTransactionIfCreated();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.text.csv.DefaultCsvCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultCsvCallback<Object> defaultCsvCallback0 = new DefaultCsvCallback<Object>((-1989), (-1989));
      String[] stringArray0 = new String[0];
      boolean boolean0 = defaultCsvCallback0.processLine((-1989), stringArray0);
      assertTrue(boolean0);
  }
}
