/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:50:47 GMT 2019
 */

package io.ebean.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.config.ClassLoadConfig;
import io.ebean.config.ProfilingConfig;
import io.ebean.config.PropertiesWrapper;
import java.io.Reader;
import java.io.StringReader;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProfilingConfig_ESTest extends ProfilingConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.setEnabled(true);
      boolean boolean0 = profilingConfig0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
      
      profilingConfig0.setProfilesPerFile(0L);
      profilingConfig0.getProfilesPerFile();
      assertEquals("profiling", profilingConfig0.getDirectory());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
      
      profilingConfig0.setProfilesPerFile((-1L));
      long long0 = profilingConfig0.getProfilesPerFile();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.setMinimumMicros(1L);
      long long0 = profilingConfig0.getMinimumMicros();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.setMinimumMicros((-1119L));
      long long0 = profilingConfig0.getMinimumMicros();
      assertEquals((-1119L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.setIncludeProfileIds((int[]) null);
      profilingConfig0.getIncludeProfileIds();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
      assertEquals("profiling", profilingConfig0.getDirectory());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      int[] intArray0 = new int[3];
      profilingConfig0.setIncludeProfileIds(intArray0);
      profilingConfig0.getIncludeProfileIds();
      assertEquals("profiling", profilingConfig0.getDirectory());
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      assertEquals("profiling", profilingConfig0.getDirectory());
      
      profilingConfig0.setDirectory((String) null);
      profilingConfig0.getDirectory();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      assertEquals("profiling", profilingConfig0.getDirectory());
      
      profilingConfig0.setDirectory("");
      profilingConfig0.getDirectory();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      StringReader stringReader0 = new StringReader("profiling.profilesPerFile");
      properties0.load((Reader) stringReader0);
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("i>!zBUJ", "i>!zBUJ", properties0, classLoadConfig0);
      // Undeclared exception!
      try { 
        profilingConfig0.loadSettings(propertiesWrapper0, "i>!zBUJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      // Undeclared exception!
      try { 
        profilingConfig0.loadSettings((PropertiesWrapper) null, "f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.ProfilingConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      Properties properties0 = new Properties();
      ClassLoadConfig classLoadConfig0 = new ClassLoadConfig();
      PropertiesWrapper propertiesWrapper0 = new PropertiesWrapper("i>!zBUJ", "i>!zBUJ", properties0, classLoadConfig0);
      profilingConfig0.loadSettings(propertiesWrapper0, "i>!zBUJ");
      assertEquals("profiling", profilingConfig0.getDirectory());
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.isVerbose();
      assertEquals("profiling", profilingConfig0.getDirectory());
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      String string0 = profilingConfig0.getDirectory();
      assertEquals("profiling", string0);
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.setVerbose(true);
      boolean boolean0 = profilingConfig0.isVerbose();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      int[] intArray0 = profilingConfig0.getIncludeProfileIds();
      profilingConfig0.setIncludeProfileIds(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("profiling", profilingConfig0.getDirectory());
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.getMinimumMicros();
      assertEquals("profiling", profilingConfig0.getDirectory());
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      long long0 = profilingConfig0.getProfilesPerFile();
      assertEquals(1000L, long0);
      assertEquals("profiling", profilingConfig0.getDirectory());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProfilingConfig profilingConfig0 = new ProfilingConfig();
      profilingConfig0.isEnabled();
      assertEquals(1000L, profilingConfig0.getProfilesPerFile());
      assertEquals("profiling", profilingConfig0.getDirectory());
  }
}
