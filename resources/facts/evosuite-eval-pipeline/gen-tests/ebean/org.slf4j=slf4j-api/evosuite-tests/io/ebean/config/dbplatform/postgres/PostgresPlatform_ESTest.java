/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:40:05 GMT 2019
 */

package io.ebean.config.dbplatform.postgres;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Query;
import io.ebean.config.dbplatform.postgres.PostgresPlatform;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.javax.SQLiteConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PostgresPlatform_ESTest extends PostgresPlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      // Undeclared exception!
      try { 
        postgresPlatform0.withForUpdate((String) null, (Query.ForUpdate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.postgres.PostgresPlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      String string0 = postgresPlatform0.withForUpdate((String) null, query_ForUpdate0);
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertTrue(postgresPlatform0.isNativeUuidType());
      assertEquals((-4), postgresPlatform0.getBlobDbType());
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
      assertEquals("null for update nowait", string0);
      assertEquals(12, postgresPlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      String string0 = postgresPlatform0.withForUpdate("p^v", query_ForUpdate0);
      assertEquals((-4), postgresPlatform0.getBlobDbType());
      assertEquals("p^v for update", string0);
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertTrue(postgresPlatform0.isNativeUuidType());
      assertEquals(12, postgresPlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.SKIPLOCKED;
      String string0 = postgresPlatform0.withForUpdate("p^v", query_ForUpdate0);
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertTrue(postgresPlatform0.isNativeUuidType());
      assertEquals(12, postgresPlatform0.getClobDbType());
      assertEquals("p^v for update skip locked", string0);
      assertEquals((-4), postgresPlatform0.getBlobDbType());
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      boolean boolean0 = postgresPlatform0.isNativeArrayType();
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertTrue(boolean0);
      assertTrue(postgresPlatform0.isNativeUuidType());
      assertEquals((-4), postgresPlatform0.getBlobDbType());
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
      assertEquals(12, postgresPlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(598, 598, "postgres");
      SQLiteConnectionPoolDataSource sQLiteConnectionPoolDataSource0 = new SQLiteConnectionPoolDataSource();
      postgresPlatform0.createSequenceIdGenerator(defaultBackgroundExecutor0, sQLiteConnectionPoolDataSource0, 598, "postgres");
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertEquals((-4), postgresPlatform0.getBlobDbType());
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
      assertEquals(12, postgresPlatform0.getClobDbType());
      assertTrue(postgresPlatform0.isNativeUuidType());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PostgresPlatform postgresPlatform0 = new PostgresPlatform();
      postgresPlatform0.addGeoTypes((-1153));
      assertTrue(postgresPlatform0.isNativeUuidType());
      assertEquals(12, postgresPlatform0.getClobDbType());
      assertTrue(postgresPlatform0.isSupportsNativeIlike());
      assertTrue(postgresPlatform0.isSelectCountWithAlias());
      assertEquals((-4), postgresPlatform0.getBlobDbType());
  }
}
