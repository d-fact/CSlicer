/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 16:34:27 GMT 2019
 */

package io.ebean.config.dbplatform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.ebean.Query;
import io.ebean.annotation.Platform;
import io.ebean.config.PlatformConfig;
import io.ebean.config.dbplatform.DatabasePlatform;
import io.ebean.config.dbplatform.DbEncrypt;
import io.ebean.config.dbplatform.DbHistorySupport;
import io.ebean.config.dbplatform.DbType;
import io.ebean.config.dbplatform.IdType;
import io.ebean.config.dbplatform.h2.H2DbEncrypt;
import io.ebean.config.dbplatform.mysql.MySqlHistorySupport;
import io.ebean.config.dbplatform.oracle.OracleDbEncrypt;
import io.ebean.config.dbplatform.oracle.OracleDbHistorySupport;
import io.ebeaninternal.server.core.DefaultBackgroundExecutor;
import java.sql.Connection;
import java.sql.SQLTransientConnectionException;
import javax.persistence.PersistenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sqlite.javax.SQLiteConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatabasePlatform_ESTest extends DatabasePlatform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.escapeLikeString("(_m_%85zDnseG$}D");
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("(|_m|_|%85zDnseG$}D", string0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.unQuote("\"like ? escape''");
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("like ? escape'", string0);
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals("\"", databasePlatform0.getOpenQuote());
      
      databasePlatform0.openQuote = "FATAL: ";
      String string0 = databasePlatform0.unQuote("DYa0~lZ{k]aM}*");
      assertEquals("DYa0~lZ{k]aM}*", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.convertQuotedIdentifiers("io.ebean.config.dbplatform.DatabasePlatform$OnQueryOnly");
      assertEquals("io.ebean.config.dbplatform.DatabasePlatform$OnQueryOnly", string0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.setForwardOnlyHintOnFindIterate(false);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertFalse(databasePlatform0.isForwardOnlyHintOnFindIterate());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.openQuote = "xnk{S7I:/y 6Sx9(e";
      databasePlatform0.getOpenQuote();
      assertEquals("xnk{S7I:/y 6Sx9(e", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals("\"", databasePlatform0.getOpenQuote());
      
      databasePlatform0.openQuote = "FATAL: ";
      String string0 = databasePlatform0.getCloseQuote();
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      DatabasePlatform.OnQueryOnly databasePlatform_OnQueryOnly0 = DatabasePlatform.OnQueryOnly.COMMIT;
      databasePlatform0.setOnQueryOnly(databasePlatform_OnQueryOnly0);
      assertEquals(DatabasePlatform.OnQueryOnly.COMMIT, databasePlatform0.getOnQueryOnly());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.setSequenceBatchMode(true);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.setForwardOnlyHintOnFindIterate(true);
      PlatformConfig platformConfig0 = new PlatformConfig();
      databasePlatform0.configure(platformConfig0);
      assertTrue(databasePlatform0.isForwardOnlyHintOnFindIterate());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.selectCountWithAlias = true;
      PlatformConfig platformConfig0 = new PlatformConfig();
      databasePlatform0.configure(platformConfig0, true);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      StringBuilder stringBuilder0 = new StringBuilder();
      databasePlatform0.escapeLikeCharacter('c', stringBuilder0);
      assertEquals("|c", stringBuilder0.toString());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      IdType idType0 = IdType.IDENTITY;
      databasePlatform0.configureIdType(idType0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.addGeoTypes(0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      String string0 = databasePlatform0.withForUpdate((String) null, query_ForUpdate0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertNull(string0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.NOWAIT;
      String string0 = databasePlatform0.withForUpdate("c", query_ForUpdate0);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("c", string0);
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.useExtraTransactionOnIterateSecondaryQueries());
      
      databasePlatform0.useExtraTransactionOnIterateSecondaryQueries = true;
      boolean boolean0 = databasePlatform0.useExtraTransactionOnIterateSecondaryQueries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isTreatEmptyStringsAsNull());
      
      databasePlatform0.treatEmptyStringsAsNull = true;
      boolean boolean0 = databasePlatform0.isTreatEmptyStringsAsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isSupportsNativeIlike());
      
      databasePlatform0.supportsNativeIlike = true;
      boolean boolean0 = databasePlatform0.isSupportsNativeIlike();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      
      databasePlatform0.sequenceBatchMode = false;
      databasePlatform0.isSequenceBatchMode();
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isSelectCountWithAlias());
      
      databasePlatform0.selectCountWithAlias = true;
      boolean boolean0 = databasePlatform0.isSelectCountWithAlias();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isNativeUuidType());
      
      databasePlatform0.nativeUuidType = true;
      boolean boolean0 = databasePlatform0.isNativeUuidType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isIdInExpandedForm());
      
      databasePlatform0.idInExpandedForm = true;
      boolean boolean0 = databasePlatform0.isIdInExpandedForm();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.sqlLimiter = null;
      databasePlatform0.getSqlLimiter();
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.maxTableNameLength = (-34);
      int int0 = databasePlatform0.getMaxTableNameLength();
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.maxConstraintNameLength = (-1955);
      int int0 = databasePlatform0.getMaxConstraintNameLength();
      assertEquals((-1955), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.likeClauseRaw = null;
      String string0 = databasePlatform0.getLikeClause(true);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertNull(string0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      OracleDbHistorySupport oracleDbHistorySupport0 = new OracleDbHistorySupport();
      databasePlatform0.setHistorySupport(oracleDbHistorySupport0);
      DbHistorySupport dbHistorySupport0 = databasePlatform0.getHistorySupport();
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertNotNull(dbHistorySupport0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      MySqlHistorySupport mySqlHistorySupport0 = new MySqlHistorySupport();
      databasePlatform0.setHistorySupport(mySqlHistorySupport0);
      DbHistorySupport dbHistorySupport0 = databasePlatform0.getHistorySupport();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertNotNull(dbHistorySupport0);
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      OracleDbEncrypt oracleDbEncrypt0 = new OracleDbEncrypt();
      databasePlatform0.setDbEncrypt(oracleDbEncrypt0);
      DbEncrypt dbEncrypt0 = databasePlatform0.getDbEncrypt();
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertNotNull(dbEncrypt0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      H2DbEncrypt h2DbEncrypt0 = new H2DbEncrypt();
      databasePlatform0.dbEncrypt = (DbEncrypt) h2DbEncrypt0;
      databasePlatform0.getDbEncrypt();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      
      databasePlatform0.columnAliasPrefix = null;
      databasePlatform0.getColumnAliasPrefix();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      
      databasePlatform0.setColumnAliasPrefix("");
      databasePlatform0.getColumnAliasPrefix();
      assertEquals("", databasePlatform0.getColumnAliasPrefix());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.booleanDbType = (-2169);
      int int0 = databasePlatform0.getBooleanDbType();
      assertEquals((-2169), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      
      databasePlatform0.blobDbType = 0;
      int int0 = databasePlatform0.getBlobDbType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.blobDbType = (-3989);
      int int0 = databasePlatform0.getBlobDbType();
      assertEquals((-3989), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.escapeLikeString("");
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("", string0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.exceptionTranslator = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N", "COMMIT", (-240), (Throwable) null);
      // Undeclared exception!
      try { 
        databasePlatform0.translate("N", sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.dbDefaultValue = null;
      // Undeclared exception!
      try { 
        databasePlatform0.setDbTrueLiteral("com.fasterxml.jackson.databind.util.ObjectBuffer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.escapeLikeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.escapeLikeCharacter('2', (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.configure((PlatformConfig) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.configure((PlatformConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.completeSql((String) null, (Query<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Platform platform0 = Platform.GENERIC;
      boolean boolean0 = databasePlatform0.isPlatform(platform0);
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(boolean0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Platform platform0 = Platform.HSQLDB;
      boolean boolean0 = databasePlatform0.isPlatform(platform0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertFalse(boolean0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.getLikeClause(true);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("like ? escape''", string0);
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.getLikeClause(false);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("like ? escape'|'", string0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.unQuote("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.unQuote("");
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("", string0);
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.unQuote((String) null);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertNull(string0);
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.allQuotedIdentifiers = true;
      String string0 = databasePlatform0.convertQuotedIdentifiers("${ta}");
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"${ta}\"", string0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.convertQuotedIdentifiers("");
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("", string0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.convertQuotedIdentifiers((String) null);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertNull(string0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      PlatformConfig platformConfig0 = new PlatformConfig();
      DbType dbType0 = DbType.JSONBLOB;
      platformConfig0.addCustomMapping(dbType0, "E3&vpV87Q");
      databasePlatform0.configure(platformConfig0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      PlatformConfig platformConfig0 = new PlatformConfig();
      DbType dbType0 = DbType.DOUBLE;
      Platform platform0 = Platform.MYSQL;
      platformConfig0.addCustomMapping(dbType0, "", platform0);
      databasePlatform0.configure(platformConfig0, true);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isSelectCountWithAlias();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertFalse(boolean0);
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isNativeUuidType();
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertFalse(boolean0);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      String string0 = databasePlatform0.withForUpdate("", query_ForUpdate0);
      assertEquals("", string0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isNativeArrayType();
      assertFalse(boolean0);
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.getConcatOperator();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("||", string0);
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      
      databasePlatform0.setSequenceBatchMode(false);
      assertFalse(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      int int0 = databasePlatform0.getMaxConstraintNameLength();
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(60, int0);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getDbTypeMap();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      Query.ForUpdate query_ForUpdate0 = Query.ForUpdate.BASE;
      databasePlatform0.fromForUpdate(query_ForUpdate0);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      
      databasePlatform0.setTableAliasPlaceHolder("");
      assertEquals("", databasePlatform0.getTableAliasPlaceHolder());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isSupportsNativeIlike();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertFalse(boolean0);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getHistorySupport();
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.getColumnAliasPrefix();
      assertEquals("c", string0);
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getSqlLimiter();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getDbDefaultValue();
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      DefaultBackgroundExecutor defaultBackgroundExecutor0 = new DefaultBackgroundExecutor(20, 20, (String) null);
      SQLiteConnectionPoolDataSource sQLiteConnectionPoolDataSource0 = new SQLiteConnectionPoolDataSource();
      databasePlatform0.createSequenceIdGenerator(defaultBackgroundExecutor0, sQLiteConnectionPoolDataSource0, 212, (String) null);
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getDbIdentity();
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      int int0 = databasePlatform0.getMaxTableNameLength();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(60, int0);
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      int int0 = databasePlatform0.getBooleanDbType();
      assertEquals(16, int0);
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      assertFalse(databasePlatform0.isForwardOnlyHintOnFindIterate());
      
      databasePlatform0.setForwardOnlyHintOnFindIterate(true);
      boolean boolean0 = databasePlatform0.isForwardOnlyHintOnFindIterate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      // Undeclared exception!
      try { 
        databasePlatform0.tableExists((Connection) null, "||", "^;p^~H&&fIDYFX8", "^;p^~H&&fIDYFX8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.ebean.config.dbplatform.DatabasePlatform", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.useExtraTransactionOnIterateSecondaryQueries();
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertFalse(boolean0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      PlatformConfig platformConfig0 = new PlatformConfig();
      DbType dbType0 = DbType.INTEGER;
      Platform platform0 = Platform.GENERIC;
      platformConfig0.addCustomMapping(dbType0, "c", platform0);
      databasePlatform0.configure(platformConfig0, true);
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.setDbTrueLiteral("com.fastexml.jackson.databind.util.ObjectBuffer");
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      int int0 = databasePlatform0.getClobDbType();
      assertEquals(2005, int0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      int int0 = databasePlatform0.getBlobDbType();
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, int0);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.setDbFalseLiteral((String) null);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      String string0 = databasePlatform0.getTableAliasPlaceHolder();
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", string0);
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isSequenceBatchMode();
      assertTrue(boolean0);
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getName();
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isIdInExpandedForm();
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertFalse(boolean0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("||", databasePlatform0.getConcatOperator());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getPersistBatchOnCascade();
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getDbEncrypt();
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getBasicSqlLimiter();
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isDdlCommitOnCreateIndex();
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertFalse(boolean0);
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("N", "COMMIT", (-240), (Throwable) null);
      PersistenceException persistenceException0 = databasePlatform0.translate("N", sQLTransientConnectionException0);
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("N", persistenceException0.getMessage());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getPlatform();
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(2004, databasePlatform0.getBlobDbType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isTreatEmptyStringsAsNull();
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertFalse(boolean0);
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getCloseQuote());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      boolean boolean0 = databasePlatform0.isForwardOnlyHintOnFindIterate();
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertTrue(databasePlatform0.isSequenceBatchMode());
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertFalse(boolean0);
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DatabasePlatform databasePlatform0 = new DatabasePlatform();
      databasePlatform0.getOnQueryOnly();
      assertEquals(2004, databasePlatform0.getBlobDbType());
      assertEquals("\"", databasePlatform0.getCloseQuote());
      assertEquals(16, databasePlatform0.getBooleanDbType());
      assertEquals("||", databasePlatform0.getConcatOperator());
      assertEquals(2005, databasePlatform0.getClobDbType());
      assertEquals("c", databasePlatform0.getColumnAliasPrefix());
      assertEquals("\"", databasePlatform0.getOpenQuote());
      assertEquals("${ta}", databasePlatform0.getTableAliasPlaceHolder());
      assertTrue(databasePlatform0.isSequenceBatchMode());
  }
}
