/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 11:27:44 GMT 2019
 */

package com.github.searls.jasmine.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.searls.jasmine.config.JasmineConfiguration;
import com.github.searls.jasmine.runner.CreatesRunner;
import com.github.searls.jasmine.server.JasmineResourceHandler;
import org.eclipse.jetty.http.HttpCompliance;
import org.eclipse.jetty.io.EndPoint;
import org.eclipse.jetty.server.HttpChannel;
import org.eclipse.jetty.server.HttpConfiguration;
import org.eclipse.jetty.server.HttpConnection;
import org.eclipse.jetty.server.LocalConnector;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Response;
import org.eclipse.jetty.server.Server;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JasmineResourceHandler_ESTest extends JasmineResourceHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JasmineResourceHandler jasmineResourceHandler0 = new JasmineResourceHandler((CreatesRunner) null, (JasmineConfiguration) null);
      Server server0 = new Server(100000000);
      LocalConnector localConnector0 = new LocalConnector(server0);
      HttpConfiguration httpConfiguration0 = new HttpConfiguration();
      HttpCompliance httpCompliance0 = HttpCompliance.RFC7230;
      HttpConnection httpConnection0 = new HttpConnection(httpConfiguration0, localConnector0, (EndPoint) null, httpCompliance0, true);
      HttpChannel httpChannel0 = httpConnection0.getHttpChannel();
      Request request0 = httpChannel0.getRequest();
      Response response0 = httpChannel0.getResponse();
      jasmineResourceHandler0.handle("C", request0, request0, response0);
      assertTrue(jasmineResourceHandler0.isDirectoriesListed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JasmineResourceHandler jasmineResourceHandler0 = new JasmineResourceHandler((CreatesRunner) null, (JasmineConfiguration) null);
      Server server0 = new Server(100000000);
      LocalConnector localConnector0 = new LocalConnector(server0);
      HttpConfiguration httpConfiguration0 = new HttpConfiguration();
      HttpCompliance httpCompliance0 = HttpCompliance.RFC7230;
      HttpConnection httpConnection0 = new HttpConnection(httpConfiguration0, localConnector0, (EndPoint) null, httpCompliance0, true);
      HttpChannel httpChannel0 = httpConnection0.getHttpChannel();
      Request request0 = httpChannel0.getRequest();
      Response response0 = httpChannel0.getResponse();
      // Undeclared exception!
      try { 
        jasmineResourceHandler0.handle("/", request0, request0, response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.searls.jasmine.server.JasmineResourceHandler", e);
      }
  }
}
