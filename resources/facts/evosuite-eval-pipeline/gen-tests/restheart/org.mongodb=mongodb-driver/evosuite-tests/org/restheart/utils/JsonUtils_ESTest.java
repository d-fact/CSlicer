/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:57:35 GMT 2019
 */

package org.restheart.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.bson.BsonArray;
import org.bson.BsonBinary;
import org.bson.BsonBoolean;
import org.bson.BsonDateTime;
import org.bson.BsonDbPointer;
import org.bson.BsonDecimal128;
import org.bson.BsonDocument;
import org.bson.BsonDocumentReader;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonInt32;
import org.bson.BsonNull;
import org.bson.BsonObjectId;
import org.bson.BsonRegularExpression;
import org.bson.BsonString;
import org.bson.BsonSymbol;
import org.bson.BsonTimestamp;
import org.bson.BsonType;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonMaxKeyCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.DecoderContext;
import org.bson.codecs.RawBsonDocumentCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.types.Decimal128;
import org.bson.types.ObjectId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.utils.JsonUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = JsonUtils.isAncestorPath("$", "$minKey");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BsonTimestamp bsonTimestamp0 = new BsonTimestamp(867L);
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonTimestamp0);
      assertFalse(bsonValue0.isDateTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BsonSymbol bsonSymbol0 = new BsonSymbol(":~oUN?{>@wF}aS");
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonSymbol0);
      assertSame(bsonSymbol0, bsonValue0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BsonRegularExpression bsonRegularExpression0 = new BsonRegularExpression("");
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonRegularExpression0);
      assertFalse(bsonValue0.isBinary());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32((-2345));
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonInt32_0);
      assertFalse(bsonValue0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BsonDateTime bsonDateTime0 = new BsonDateTime((-3442L));
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonDateTime0);
      assertFalse(bsonValue0.isJavaScriptWithScope());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(1868, 1868, 1868);
      BsonDbPointer bsonDbPointer0 = new BsonDbPointer("", objectId0);
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonDbPointer0);
      assertFalse(bsonValue0.isJavaScriptWithScope());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BsonValue bsonValue0 = JsonUtils.parse("   54 ");
      assertFalse(bsonValue0.isDecimal128());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JsonUtils.minify("5}g#_?'h");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JsonUtils.minify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BsonTimestamp bsonTimestamp0 = new BsonTimestamp();
      BsonTimestamp bsonTimestamp1 = (BsonTimestamp)JsonUtils.escapeKeys(bsonTimestamp0, false);
      assertEquals(0L, bsonTimestamp1.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BsonObjectId bsonObjectId0 = new BsonObjectId();
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonObjectId0, false);
      assertFalse(bsonValue0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BsonNull bsonNull0 = new BsonNull();
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonNull0, true);
      assertFalse(bsonValue0.isDocument());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32((-2345));
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonInt32_0, false);
      assertEquals(BsonType.INT32, bsonValue0.getBsonType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decimal128 decimal128_0 = Decimal128.NEGATIVE_ZERO;
      BsonDecimal128 bsonDecimal128_0 = new BsonDecimal128(decimal128_0);
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonDecimal128_0, false);
      assertFalse(bsonValue0.isJavaScriptWithScope());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(1868, 1868, 1868);
      BsonDbPointer bsonDbPointer0 = new BsonDbPointer("Q", objectId0);
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonDbPointer0, false);
      assertFalse(bsonValue0.isTimestamp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BsonBoolean bsonBoolean0 = new BsonBoolean(true);
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonBoolean0, true);
      assertFalse(bsonValue0.isTimestamp());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        JsonUtils.unescapeKeys(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("i(a4`M", codecRegistry0);
      // Undeclared exception!
      try { 
        JsonUtils.toJson(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BsonMaxKeyCodec bsonMaxKeyCodec0 = new BsonMaxKeyCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonMaxKeyCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("i4``M", codecRegistry0);
      // Undeclared exception!
      try { 
        JsonUtils.toJson(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.bson.BsonMaxKey
         //
         verifyException("org.bson.codecs.BsonMaxKeyCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.toBsonDocument((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.minify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.Minify", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.getPropsFromPath((BsonValue) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        JsonUtils.getIdAsString(rawBsonDocument0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document();
      Class<BsonArray> class0 = BsonArray.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        JsonUtils.escapeKeys(bsonDocument0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.countPropsFromPath((BsonValue) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.checkType((Optional<BsonValue>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectId objectId0 = ObjectId.createFromLegacyFormat(1868, 1868, 1868);
      BsonDbPointer bsonDbPointer0 = new BsonDbPointer("", objectId0);
      String string0 = JsonUtils.toJson(bsonDbPointer0);
      assertEquals("   { \"$ref\" : \"\", \"$id\" : { \"$oid\" : \"0000074c0000074c0000074c\" } } ", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      try { 
        JsonUtils.getPropsFromPath(bsonArray0, "com.google.common.hash.Funnels$StringCharsetFunnel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong path. it must use the . notation and start with $
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = JsonUtils.minify("Y1Q;eEkY*$_F$");
      assertEquals("Y1Q;eEkY*$_F$", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectId objectId0 = ObjectId.get();
      BsonObjectId bsonObjectId0 = new BsonObjectId(objectId0);
      String string0 = JsonUtils.getIdAsString(bsonObjectId0, false);
      assertEquals("52fe7ac10032166d11000000", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BsonString bsonString0 = new BsonString("91C%*}F!O{|");
      String string0 = JsonUtils.getIdAsString(bsonString0, true);
      assertEquals("'91C%*}F!O{|'", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BsonString bsonString0 = new BsonString("91C%*}F!O{|");
      String string0 = JsonUtils.getIdAsString(bsonString0, false);
      assertEquals("91C%*}F!O{|", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JsonUtils.getIdAsString((BsonValue) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32(54);
      String string0 = JsonUtils.getIdAsString(bsonInt32_0, true);
      assertNotNull(string0);
      assertEquals("54", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = JsonUtils.toJson((BsonValue) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      try { 
        JsonUtils.parse("[M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON reader was expecting a value but found 'M'.
         //
         verifyException("org.bson.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        JsonUtils.parse("{^54");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JSON input. Position: 2. Character: '^'.
         //
         verifyException("org.bson.json.JsonScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BsonValue bsonValue0 = JsonUtils.parse((String) null);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      Optional<BsonValue> optional0 = Optional.of((BsonValue) bsonArray0);
      boolean boolean0 = JsonUtils.checkType(optional0, "array");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Optional<BsonValue> optional0 = Optional.empty();
      boolean boolean0 = JsonUtils.checkType(optional0, "notnull");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Optional<BsonValue> optional0 = Optional.empty();
      boolean boolean0 = JsonUtils.checkType(optional0, "a9U{3N<s=x#/r|S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RawBsonDocumentCodec rawBsonDocumentCodec0 = new RawBsonDocumentCodec();
      BsonInt32 bsonInt32_0 = new BsonInt32(54);
      BsonDocument bsonDocument0 = new BsonDocument(":~oUN?{>@wF}aS", bsonInt32_0);
      BsonDocumentReader bsonDocumentReader0 = new BsonDocumentReader(bsonDocument0);
      DecoderContext decoderContext0 = mock(DecoderContext.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = rawBsonDocumentCodec0.decode(bsonDocumentReader0, decoderContext0);
      Optional<BsonValue> optional0 = Optional.ofNullable((BsonValue) rawBsonDocument0);
      boolean boolean0 = JsonUtils.checkType(optional0, "KN#((");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.isAncestorPath("$", "Cu0JPw(PdGY<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong right path: Cu0JPw(PdGY<
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.isAncestorPath("++NIpfp^)Hj*?", "d#x&/W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong left path: ++NIpfp^)Hj*?
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.isAncestorPath("$", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong right path: null
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.isAncestorPath((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong left path: null
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32(54);
      try { 
        JsonUtils.countPropsFromPath(bsonInt32_0, "$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong json. it must be an object
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32(54);
      BsonDocument bsonDocument0 = new BsonDocument(":~oUN?{>@wF}aS", bsonInt32_0);
      List<Optional<BsonValue>> list0 = JsonUtils.getPropsFromPath(bsonDocument0, "$");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BsonBinary bsonBinary0 = new BsonBinary(byteArray0);
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonBinary0, true);
      assertFalse(bsonValue0.isJavaScriptWithScope());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      BsonValue bsonValue0 = JsonUtils.escapeKeys(bsonArray0, true);
      assertFalse(bsonValue0.isSymbol());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RawBsonDocumentCodec rawBsonDocumentCodec0 = new RawBsonDocumentCodec();
      BsonInt32 bsonInt32_0 = new BsonInt32(54);
      BsonDocument bsonDocument0 = new BsonDocument(":~oUN?{>@wF}aS", bsonInt32_0);
      BsonDocumentReader bsonDocumentReader0 = new BsonDocumentReader(bsonDocument0);
      DecoderContext decoderContext0 = mock(DecoderContext.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = rawBsonDocumentCodec0.decode(bsonDocumentReader0, decoderContext0);
      BsonValue bsonValue0 = JsonUtils.escapeKeys(rawBsonDocument0, true);
      assertNotSame(bsonValue0, bsonDocument0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BsonValue bsonValue0 = JsonUtils.escapeKeys((BsonValue) null, true);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BsonString bsonString0 = new BsonString("{54");
      BsonString bsonString1 = (BsonString)JsonUtils.escapeKeys(bsonString0, false);
      assertEquals("{54", bsonString1.getValue());
      assertNotNull(bsonString1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BsonString bsonString0 = new BsonString("{54");
      BsonString bsonString1 = (BsonString)JsonUtils.unescapeKeys(bsonString0);
      assertEquals("{54", bsonString1.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonArray0);
      assertFalse(bsonValue0.isJavaScript());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonDocument0);
      assertTrue(bsonValue0.equals((Object)bsonDocument0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BsonValue bsonValue0 = JsonUtils.unescapeKeys((BsonValue) null);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BsonBinary bsonBinary0 = new BsonBinary(byteArray0);
      BsonValue bsonValue0 = JsonUtils.unescapeKeys(bsonBinary0);
      assertFalse(bsonValue0.isDateTime());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<BsonString> arrayList0 = new ArrayList<BsonString>();
      BsonArray bsonArray0 = new BsonArray(arrayList0);
      String string0 = JsonUtils.toJson(bsonArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BsonNull bsonNull0 = BsonNull.VALUE;
      BsonDocument bsonDocument0 = new BsonDocument("[null]", bsonNull0);
      Document document0 = new Document("BsonArray{values=[]}", bsonDocument0);
      // Undeclared exception!
      try { 
        JsonUtils.toBsonDocument(document0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/mongodb/session/ClientSession
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }
}
