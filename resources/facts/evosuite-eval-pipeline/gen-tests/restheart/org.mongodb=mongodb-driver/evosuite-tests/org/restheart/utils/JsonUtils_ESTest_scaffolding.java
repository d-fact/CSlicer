/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Aug 22 09:57:35 GMT 2019
 */

package org.restheart.utils;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class JsonUtils_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.restheart.utils.JsonUtils"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/gen-tests/restheart/org.mongodb=mongodb-driver"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JsonUtils_ESTest_scaffolding.class.getClassLoader() ,
      "org.bson.AbstractBsonWriter",
      "org.bson.BsonDocumentReader$1",
      "com.google.common.primitives.Longs$LongConverter",
      "org.bson.codecs.configuration.Optional$Some",
      "org.bson.types.CodeWithScope",
      "org.bson.BsonReaderMark",
      "com.google.common.math.LongMath$1",
      "com.google.common.hash.Striped64$1",
      "org.bson.codecs.DecoderContext$1",
      "org.bson.json.JsonScanner$1",
      "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher",
      "com.google.common.hash.BloomFilter$Strategy",
      "org.bson.codecs.BsonUndefinedCodec",
      "org.bson.BsonElement",
      "org.bson.BsonDocumentWriter$1",
      "org.bson.internal.Base64",
      "org.bson.codecs.BsonInt64Codec",
      "org.bson.codecs.BooleanCodec",
      "org.bson.codecs.RawBsonDocumentCodec",
      "org.bson.codecs.EncoderContext",
      "org.bson.json.StrictCharacterStreamJsonWriterSettings",
      "org.bson.BsonObjectId",
      "com.mongodb.Mongo",
      "com.google.common.base.Converter$IdentityConverter",
      "org.bson.StringUtils",
      "org.bson.UuidRepresentation",
      "org.bson.BsonDocumentWrapper",
      "org.bson.json.JsonParseException",
      "org.bson.io.BsonOutput",
      "org.bson.codecs.Decoder",
      "org.bson.json.ExtendedJsonBinaryConverter",
      "org.bson.codecs.IntegerCodec",
      "org.restheart.utils.Minify",
      "com.google.common.base.Predicate",
      "org.bson.BsonDocumentReader",
      "org.bson.io.ByteBufferBsonInput",
      "org.bson.codecs.Decimal128Codec",
      "com.google.common.hash.Striped64",
      "org.bson.BsonDecimal128",
      "org.bson.BsonWriterSettings",
      "org.bson.json.RelaxedExtendedJsonDateTimeConverter",
      "org.bson.BsonBoolean",
      "org.bson.json.ShellRegularExpressionConverter",
      "org.bson.codecs.ShortCodec",
      "org.bson.BsonDocument",
      "org.bson.codecs.configuration.CodecProvider",
      "org.bson.conversions.Bson",
      "org.bson.codecs.FloatCodec",
      "org.bson.BsonInvalidOperationException",
      "org.bson.codecs.BsonJavaScriptWithScopeCodec",
      "org.bson.BsonBinaryReader$1",
      "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator",
      "org.bson.codecs.AtomicLongCodec",
      "org.bson.BsonInt64",
      "org.bson.json.LegacyExtendedJsonRegularExpressionConverter",
      "org.bson.json.ShellMinKeyConverter",
      "org.bson.json.ShellMaxKeyConverter",
      "org.bson.AbstractBsonReader$State",
      "org.bson.ByteBuf",
      "org.bson.json.ExtendedJsonInt64Converter",
      "org.restheart.utils.Minify$1",
      "org.bson.json.JsonWriterSettings$Builder",
      "org.bson.codecs.BsonBinaryCodec",
      "org.bson.json.ShellObjectIdConverter",
      "org.bson.json.ExtendedJsonDecimal128Converter",
      "org.bson.codecs.configuration.LazyCodec",
      "org.bson.json.JsonStringConverter",
      "org.bson.codecs.BsonDocumentCodec",
      "org.bson.json.JsonWriter$Context",
      "org.bson.json.StrictJsonWriter",
      "org.bson.codecs.BsonStringCodec",
      "org.bson.BSONException",
      "com.google.common.base.Preconditions",
      "org.bson.json.JsonBuffer",
      "org.bson.BsonRegularExpression",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.base.Converter$ConverterComposition",
      "org.bson.diagnostics.Loggers",
      "org.bson.json.RelaxedExtendedJsonInt64Converter",
      "org.bson.codecs.DateCodec",
      "org.bson.Transformer",
      "org.bson.BsonReader",
      "org.bson.BsonValue",
      "com.google.common.hash.BloomFilterStrategies",
      "org.bson.codecs.BsonObjectIdCodec",
      "org.bson.AbstractBsonWriter$State",
      "org.bson.BsonSerializationException",
      "org.bson.json.ShellInt64Converter",
      "com.google.common.hash.AbstractStreamingHasher",
      "org.bson.json.ExtendedJsonInt32Converter",
      "org.bson.BsonNull",
      "org.bson.BsonBinaryWriter$Mark",
      "org.bson.types.MaxKey",
      "org.bson.json.ExtendedJsonMinKeyConverter",
      "org.bson.json.LegacyExtendedJsonDateTimeConverter",
      "com.google.common.math.LongMath",
      "org.bson.json.StrictCharacterStreamJsonWriter$State",
      "org.bson.codecs.BsonTimestampCodec",
      "org.bson.codecs.IterableCodecProvider",
      "com.google.common.base.Converter$ReverseConverter",
      "org.bson.codecs.Encoder",
      "com.google.common.hash.HashFunction",
      "org.bson.AbstractBsonReader$1",
      "org.bson.json.ExtendedJsonTimestampConverter",
      "org.bson.AbstractBsonReader",
      "org.bson.json.ExtendedJsonObjectIdConverter",
      "org.bson.codecs.AtomicBooleanCodec",
      "com.google.common.hash.LongAdder",
      "org.restheart.utils.Minify$UnterminatedCommentException",
      "org.bson.codecs.DocumentCodecProvider",
      "com.google.common.base.Supplier",
      "org.bson.json.JsonReader$Context",
      "com.google.common.hash.LongAddable",
      "com.google.common.hash.Hashing",
      "org.bson.json.ExtendedJsonMaxKeyConverter",
      "org.bson.BsonType",
      "org.bson.codecs.DoubleCodec",
      "com.google.common.hash.Striped64$Cell",
      "org.bson.json.JsonInt32Converter",
      "org.bson.codecs.BinaryCodec",
      "org.bson.BsonUndefined",
      "org.bson.codecs.IterableCodec",
      "com.google.common.hash.LongAddables",
      "org.bson.codecs.DecoderContext",
      "org.restheart.utils.Minify$UnterminatedStringLiteralException",
      "org.bson.BsonBinaryWriterSettings",
      "org.bson.codecs.DocumentCodec$1",
      "org.bson.diagnostics.Logger",
      "org.bson.codecs.StringCodec",
      "org.bson.codecs.MapCodec$1",
      "org.bson.codecs.BsonDBPointerCodec",
      "com.google.common.hash.BloomFilter",
      "org.bson.json.JsonReader$1",
      "com.google.common.hash.HashCode$BytesHashCode",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "org.bson.json.LegacyExtendedJsonBinaryConverter",
      "org.bson.codecs.IdGenerator",
      "org.bson.codecs.BsonInt32Codec",
      "org.bson.codecs.BsonRegularExpressionCodec",
      "org.bson.json.JsonDoubleConverter",
      "org.bson.json.ExtendedJsonDateTimeConverter",
      "org.bson.BsonInt32",
      "org.bson.BsonBinary",
      "org.bson.Document",
      "com.google.common.hash.HashCode$LongHashCode",
      "org.bson.json.JsonScanner$RegularExpressionState",
      "org.bson.codecs.LongCodec",
      "org.bson.json.JsonWriter",
      "org.bson.codecs.CodeCodec",
      "org.bson.AbstractBsonReader$Context",
      "org.bson.codecs.BsonDecimal128Codec",
      "org.bson.BsonBinaryWriter",
      "org.bson.codecs.UuidCodec",
      "org.bson.BsonNumber",
      "com.google.common.hash.BloomFilterStrategies$1",
      "com.google.common.hash.BloomFilterStrategies$2",
      "org.bson.json.ShellDecimal128Converter",
      "org.bson.json.JsonScanner$NumberState",
      "org.bson.BsonDbPointer",
      "org.bson.json.JsonJavaScriptConverter",
      "org.bson.AbstractBsonWriter$Context",
      "com.google.common.primitives.Longs",
      "org.restheart.utils.Minify$Action",
      "org.bson.RawBsonDocument",
      "org.bson.codecs.SymbolCodec",
      "com.google.common.hash.Funnel",
      "org.bson.BsonJavaScriptWithScope",
      "org.bson.types.Code",
      "org.bson.BsonWriter",
      "org.bson.ByteBufNIO",
      "org.bson.codecs.MapCodecProvider",
      "com.mongodb.OperationExecutor",
      "org.bson.codecs.configuration.CodecCache",
      "org.bson.codecs.BsonArrayCodec",
      "org.bson.json.ShellDateTimeConverter",
      "org.bson.json.JsonWriterSettings",
      "org.bson.codecs.MapCodec",
      "org.bson.codecs.configuration.CodecRegistry",
      "org.bson.BsonString",
      "org.bson.BsonMaxKey",
      "org.bson.codecs.DecoderContext$Builder",
      "org.bson.codecs.AtomicIntegerCodec",
      "org.bson.BsonMinKey",
      "org.bson.BsonDateTime",
      "org.bson.json.ShellTimestampConverter",
      "org.bson.json.JsonTokenType",
      "org.bson.json.JsonMode",
      "org.bson.json.JsonToken",
      "org.bson.json.Converter",
      "org.bson.NoOpFieldNameValidator",
      "org.bson.codecs.CharacterCodec",
      "com.google.common.hash.PrimitiveSink",
      "com.google.common.hash.Hasher",
      "org.bson.FieldNameValidator",
      "org.bson.types.Decimal128",
      "org.bson.codecs.CodeWithScopeCodec",
      "org.bson.types.Binary",
      "org.bson.codecs.BsonJavaScriptCodec",
      "org.bson.json.StrictCharacterStreamJsonWriter$StrictJsonContext",
      "com.google.common.hash.HashCode",
      "org.bson.json.ExtendedJsonDoubleConverter",
      "org.bson.io.BasicOutputBuffer",
      "org.bson.codecs.BsonValueCodec",
      "org.bson.BsonDouble",
      "org.bson.BsonJavaScript",
      "org.bson.codecs.BsonTypeCodecMap",
      "org.bson.json.JsonScanner",
      "org.bson.BsonDocumentReader$Context",
      "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder",
      "org.bson.codecs.MinKeyCodec",
      "org.bson.types.ObjectId",
      "org.bson.BsonBinaryReader",
      "org.bson.codecs.BsonMaxKeyCodec",
      "org.bson.json.JsonNullConverter",
      "org.bson.BsonBinaryReader$Context",
      "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType",
      "org.bson.BsonSymbol",
      "org.bson.codecs.PatternCodec",
      "org.bson.BsonDocumentWriter",
      "org.bson.codecs.MaxKeyCodec",
      "org.bson.json.ExtendedJsonUndefinedConverter",
      "org.bson.codecs.BsonDocumentWrapperCodec",
      "org.bson.io.OutputBuffer",
      "org.bson.BsonArray",
      "org.bson.json.JsonReader",
      "org.bson.codecs.ObjectIdGenerator",
      "org.bson.codecs.configuration.Optional",
      "org.bson.codecs.BsonDoubleCodec",
      "org.bson.codecs.configuration.CodecConfigurationException",
      "org.bson.codecs.configuration.Optional$1",
      "org.bson.diagnostics.SLF4JLogger",
      "com.google.common.base.Converter",
      "org.bson.assertions.Assertions",
      "com.google.common.base.Function",
      "org.bson.AbstractBsonWriter$Mark",
      "org.bson.codecs.BigDecimalCodec",
      "org.bson.json.ShellUndefinedConverter",
      "org.bson.codecs.configuration.CodecRegistries",
      "org.bson.codecs.BsonValueCodecProvider",
      "org.bson.codecs.ByteArrayCodec",
      "com.google.common.primitives.Ints$IntConverter",
      "org.bson.codecs.configuration.ChildCodecRegistry",
      "com.google.common.hash.AbstractHasher",
      "org.bson.codecs.BsonBooleanCodec",
      "org.bson.codecs.Codec",
      "org.bson.BsonContextType",
      "org.bson.json.RelaxedExtendedJsonDoubleConverter",
      "org.bson.json.JsonWriter$2",
      "org.bson.codecs.BsonSymbolCodec",
      "org.restheart.utils.Minify$UnterminatedRegExpLiteralException",
      "org.bson.codecs.EncoderContext$Builder",
      "org.bson.codecs.ValueCodecProvider",
      "org.bson.BsonBinaryWriter$Context",
      "org.bson.codecs.IterableCodec$1",
      "org.bson.json.ExtendedJsonRegularExpressionConverter",
      "org.bson.AbstractBsonWriter$1",
      "org.restheart.utils.JsonUtils",
      "org.bson.codecs.BsonDateTimeCodec",
      "org.bson.json.JsonSymbolConverter",
      "org.bson.codecs.BsonTypeClassMap",
      "com.google.common.hash.AbstractHashFunction",
      "com.google.common.hash.Murmur3_128HashFunction",
      "org.bson.BsonTimestamp",
      "org.bson.types.MinKey",
      "org.bson.codecs.DocumentCodec",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "org.bson.codecs.ObjectIdCodec",
      "org.bson.codecs.BsonMinKeyCodec",
      "org.bson.json.StrictCharacterStreamJsonWriter",
      "org.bson.codecs.ByteCodec",
      "org.bson.types.Symbol",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.HashCode$IntHashCode",
      "org.bson.codecs.configuration.ProvidersCodecRegistry",
      "org.bson.io.BsonInput",
      "org.bson.json.JsonBooleanConverter",
      "org.bson.internal.UnsignedLongs",
      "org.bson.BsonBinarySubType",
      "org.bson.BsonDocumentWriter$Context",
      "org.bson.codecs.BsonNullCodec",
      "com.mongodb.MongoClient",
      "org.bson.codecs.CollectibleCodec",
      "org.bson.json.ShellBinaryConverter"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.bson.codecs.DecoderContext", false, JsonUtils_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.bson.codecs.configuration.CodecRegistry", false, JsonUtils_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JsonUtils_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.bson.BsonType",
      "org.bson.codecs.BsonTypeClassMap",
      "org.bson.codecs.BsonValueCodecProvider",
      "org.bson.codecs.BsonNullCodec",
      "org.bson.codecs.BsonBinaryCodec",
      "org.bson.codecs.BsonBooleanCodec",
      "org.bson.codecs.BsonDateTimeCodec",
      "org.bson.codecs.BsonDBPointerCodec",
      "org.bson.codecs.BsonDoubleCodec",
      "org.bson.codecs.BsonInt32Codec",
      "org.bson.codecs.BsonInt64Codec",
      "org.bson.codecs.BsonDecimal128Codec",
      "org.bson.codecs.BsonMinKeyCodec",
      "org.bson.codecs.BsonMaxKeyCodec",
      "org.bson.codecs.BsonJavaScriptCodec",
      "org.bson.codecs.BsonObjectIdCodec",
      "org.bson.codecs.BsonRegularExpressionCodec",
      "org.bson.codecs.BsonStringCodec",
      "org.bson.codecs.BsonSymbolCodec",
      "org.bson.codecs.BsonTimestampCodec",
      "org.bson.codecs.BsonUndefinedCodec",
      "org.bson.codecs.configuration.CodecRegistries",
      "org.bson.codecs.configuration.ProvidersCodecRegistry",
      "org.bson.codecs.configuration.CodecCache",
      "org.bson.assertions.Assertions",
      "org.bson.codecs.BsonArrayCodec",
      "org.restheart.utils.JsonUtils",
      "org.bson.diagnostics.Loggers",
      "org.bson.diagnostics.SLF4JLogger",
      "org.bson.types.ObjectId",
      "org.bson.BsonValue",
      "org.bson.BsonDocument",
      "org.bson.BSONException",
      "org.bson.BsonInvalidOperationException",
      "org.bson.codecs.RawBsonDocumentCodec",
      "org.bson.AbstractBsonReader",
      "org.bson.BsonBinaryReader",
      "org.bson.AbstractBsonReader$State",
      "org.bson.codecs.BsonDocumentCodec",
      "org.bson.RawBsonDocument",
      "org.bson.json.JsonReader",
      "org.bson.json.JsonScanner",
      "org.bson.json.JsonBuffer",
      "org.bson.AbstractBsonReader$Context",
      "org.bson.json.JsonReader$Context",
      "org.bson.BsonContextType",
      "org.bson.codecs.DecoderContext$Builder",
      "org.bson.codecs.DecoderContext",
      "org.bson.io.OutputBuffer",
      "org.bson.io.BasicOutputBuffer",
      "org.bson.AbstractBsonWriter",
      "org.bson.BsonBinaryWriter",
      "org.bson.BsonWriterSettings",
      "org.bson.BsonBinaryWriterSettings",
      "org.bson.NoOpFieldNameValidator",
      "org.bson.AbstractBsonWriter$State",
      "org.bson.json.JsonToken",
      "org.bson.json.JsonTokenType",
      "org.bson.json.JsonReader$1",
      "org.bson.json.JsonParseException",
      "org.bson.codecs.ValueCodecProvider",
      "org.bson.codecs.BinaryCodec",
      "org.bson.codecs.BooleanCodec",
      "org.bson.codecs.DateCodec",
      "org.bson.codecs.DoubleCodec",
      "org.bson.codecs.IntegerCodec",
      "org.bson.codecs.LongCodec",
      "org.bson.codecs.MinKeyCodec",
      "org.bson.codecs.MaxKeyCodec",
      "org.bson.codecs.CodeCodec",
      "org.bson.codecs.Decimal128Codec",
      "org.bson.codecs.BigDecimalCodec",
      "org.bson.codecs.ObjectIdCodec",
      "org.bson.codecs.CharacterCodec",
      "org.bson.codecs.StringCodec",
      "org.bson.codecs.SymbolCodec",
      "org.bson.codecs.UuidCodec",
      "org.bson.UuidRepresentation",
      "org.bson.codecs.ByteCodec",
      "org.bson.codecs.PatternCodec",
      "org.bson.codecs.ShortCodec",
      "org.bson.codecs.ByteArrayCodec",
      "org.bson.codecs.FloatCodec",
      "org.bson.codecs.AtomicBooleanCodec",
      "org.bson.codecs.AtomicIntegerCodec",
      "org.bson.codecs.AtomicLongCodec",
      "org.bson.codecs.DocumentCodecProvider",
      "org.bson.codecs.DocumentCodec",
      "org.bson.codecs.BsonTypeCodecMap",
      "org.bson.codecs.configuration.ChildCodecRegistry",
      "org.bson.codecs.configuration.Optional$1",
      "org.bson.codecs.configuration.Optional",
      "org.bson.codecs.configuration.Optional$Some",
      "org.bson.codecs.configuration.LazyCodec",
      "org.bson.codecs.configuration.CodecConfigurationException",
      "org.bson.codecs.CodeWithScopeCodec",
      "org.bson.codecs.ObjectIdGenerator",
      "org.bson.codecs.DocumentCodec$1",
      "org.bson.Document",
      "org.bson.io.ByteBufferBsonInput",
      "org.bson.ByteBufNIO",
      "org.bson.BsonBinaryReader$Context",
      "org.bson.BsonJavaScript",
      "com.google.common.hash.BloomFilter",
      "com.google.common.base.Preconditions",
      "org.bson.codecs.BsonJavaScriptWithScopeCodec",
      "org.restheart.utils.Minify",
      "org.restheart.utils.Minify$Action",
      "org.restheart.utils.Minify$1",
      "org.bson.BsonSerializationException",
      "org.bson.BsonBoolean",
      "org.bson.codecs.IterableCodecProvider",
      "org.bson.codecs.MapCodecProvider",
      "org.bson.codecs.MapCodec",
      "org.bson.codecs.MapCodec$1",
      "org.bson.BsonTimestamp",
      "org.bson.codecs.EncoderContext$Builder",
      "org.bson.codecs.EncoderContext",
      "org.bson.BsonMinKey",
      "org.bson.BsonDbPointer",
      "com.google.common.hash.BloomFilterStrategies",
      "org.bson.BsonBinary",
      "org.bson.BsonNumber",
      "org.bson.BsonDouble",
      "org.bson.BsonMaxKey",
      "org.bson.BsonDocumentWrapper",
      "org.bson.BsonDocumentWriter",
      "org.bson.AbstractBsonWriter$Context",
      "org.bson.BsonDocumentWriter$Context",
      "org.bson.BsonInt32",
      "org.bson.json.JsonNullConverter",
      "org.bson.json.JsonStringConverter",
      "org.bson.json.JsonBooleanConverter",
      "org.bson.json.JsonDoubleConverter",
      "org.bson.json.ExtendedJsonDoubleConverter",
      "org.bson.json.RelaxedExtendedJsonDoubleConverter",
      "org.bson.json.JsonInt32Converter",
      "org.bson.json.ExtendedJsonInt32Converter",
      "org.bson.json.JsonSymbolConverter",
      "org.bson.json.ExtendedJsonMinKeyConverter",
      "org.bson.json.ShellMinKeyConverter",
      "org.bson.json.ExtendedJsonMaxKeyConverter",
      "org.bson.json.ShellMaxKeyConverter",
      "org.bson.json.ExtendedJsonUndefinedConverter",
      "org.bson.json.ShellUndefinedConverter",
      "org.bson.json.LegacyExtendedJsonDateTimeConverter",
      "org.bson.json.ExtendedJsonDateTimeConverter",
      "org.bson.json.RelaxedExtendedJsonDateTimeConverter",
      "org.bson.json.ShellDateTimeConverter",
      "org.bson.json.ExtendedJsonBinaryConverter",
      "org.bson.json.LegacyExtendedJsonBinaryConverter",
      "org.bson.json.ShellBinaryConverter",
      "org.bson.json.ExtendedJsonInt64Converter",
      "org.bson.json.RelaxedExtendedJsonInt64Converter",
      "org.bson.json.ShellInt64Converter",
      "org.bson.json.ExtendedJsonDecimal128Converter",
      "org.bson.json.ShellDecimal128Converter",
      "org.bson.json.ExtendedJsonObjectIdConverter",
      "org.bson.json.ShellObjectIdConverter",
      "org.bson.json.ExtendedJsonTimestampConverter",
      "org.bson.json.ShellTimestampConverter",
      "org.bson.json.ExtendedJsonRegularExpressionConverter",
      "org.bson.json.LegacyExtendedJsonRegularExpressionConverter",
      "org.bson.json.ShellRegularExpressionConverter",
      "org.bson.json.JsonWriterSettings",
      "org.bson.json.JsonWriterSettings$Builder",
      "org.bson.json.JsonMode",
      "org.bson.json.JsonJavaScriptConverter",
      "org.bson.json.JsonWriter",
      "org.bson.json.JsonWriter$Context",
      "org.bson.json.StrictCharacterStreamJsonWriter",
      "org.bson.json.StrictCharacterStreamJsonWriterSettings",
      "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder",
      "org.bson.json.StrictCharacterStreamJsonWriter$StrictJsonContext",
      "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType",
      "org.bson.json.StrictCharacterStreamJsonWriter$State",
      "org.bson.BsonDecimal128",
      "org.bson.BsonDocumentWriter$1",
      "org.bson.BsonBinaryReader$1",
      "org.bson.BsonDocumentReader",
      "org.bson.BsonDocumentReader$Context",
      "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator",
      "org.bson.BsonBinaryWriter$Context",
      "org.bson.BsonUndefined",
      "org.bson.BsonArray",
      "org.bson.BsonNull",
      "org.bson.BsonInt64",
      "org.bson.types.Decimal128",
      "org.bson.BsonElement",
      "org.bson.BsonObjectId",
      "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray",
      "com.google.common.math.LongMath",
      "com.google.common.math.LongMath$1",
      "com.google.common.primitives.Ints",
      "com.google.common.hash.Striped64$1",
      "com.google.common.hash.Striped64",
      "com.google.common.hash.LongAdder",
      "com.google.common.hash.LongAddables$1",
      "com.google.common.hash.LongAddables",
      "org.bson.BsonString",
      "org.bson.StringUtils",
      "org.bson.BsonDocumentReader$1",
      "org.bson.AbstractBsonReader$1",
      "org.bson.codecs.BsonDocumentWrapperCodec",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "org.restheart.utils.Minify$UnterminatedStringLiteralException",
      "org.bson.BsonDateTime",
      "org.bson.AbstractBsonWriter$1",
      "org.bson.codecs.BsonValueCodec",
      "com.google.common.base.Converter$IdentityConverter",
      "org.bson.internal.UnsignedLongs",
      "org.bson.BsonSymbol",
      "org.bson.internal.Base64",
      "org.bson.json.JsonScanner$RegularExpressionState",
      "org.bson.json.JsonScanner$NumberState",
      "org.bson.json.JsonScanner$1",
      "org.bson.BsonRegularExpression",
      "org.bson.json.JsonWriter$2",
      "com.google.common.base.Converter$ReverseConverter",
      "org.bson.codecs.IterableCodec",
      "org.bson.codecs.IterableCodec$1",
      "org.bson.BsonJavaScriptWithScope",
      "com.google.common.hash.Hashing",
      "com.google.common.hash.AbstractHashFunction",
      "com.google.common.hash.Murmur3_128HashFunction",
      "com.google.common.hash.AbstractHasher",
      "com.google.common.hash.AbstractStreamingHasher",
      "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher",
      "com.google.common.hash.HashCode",
      "com.google.common.hash.HashCode$BytesHashCode",
      "com.google.common.primitives.Longs",
      "org.bson.BsonBinarySubType"
    );
  }
}
