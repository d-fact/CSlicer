/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:23:23 GMT 2019
 */

package org.restheart.metadata.hooks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.bson.BsonDateTime;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonNull;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonDateTimeCodec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.metadata.hooks.HookMetadata;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HookMetadata_ESTest extends HookMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BsonDateTime bsonDateTime0 = new BsonDateTime(0L);
      BsonDateTimeCodec bsonDateTimeCodec0 = new BsonDateTimeCodec();
      BsonDocumentWrapper<BsonDateTime> bsonDocumentWrapper0 = new BsonDocumentWrapper<BsonDateTime>(bsonDateTime0, bsonDateTimeCodec0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(bsonDocumentWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocumentWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = new Document();
      Class<BsonNull> class0 = BsonNull.class;
      StringCodec stringCodec0 = new StringCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        HookMetadata.getProps(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(rawBsonDocument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      try { 
        HookMetadata.getFromJson(bsonDocument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // missing 'hooks' element. it must be a json array
         //
         verifyException("org.restheart.metadata.hooks.HookMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      BsonValue bsonValue0 = HookMetadata.getProps(bsonDocument0);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BsonValue bsonValue0 = HookMetadata.getProps((BsonDocument) null);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BsonDateTime bsonDateTime0 = new BsonDateTime(1857L);
      BsonDateTimeCodec bsonDateTimeCodec0 = new BsonDateTimeCodec();
      BsonDocumentWrapper<BsonDateTime> bsonDocumentWrapper0 = new BsonDocumentWrapper<BsonDateTime>(bsonDateTime0, bsonDateTimeCodec0);
      // Undeclared exception!
      try { 
        HookMetadata.getFromJson(bsonDocumentWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocumentWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HookMetadata hookMetadata0 = null;
      try {
        hookMetadata0 = new HookMetadata("", (BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.hooks.HookMetadata", e);
      }
  }
}
