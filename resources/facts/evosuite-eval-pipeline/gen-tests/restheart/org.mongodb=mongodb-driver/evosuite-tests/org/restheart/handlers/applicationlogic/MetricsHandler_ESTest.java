/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:25:31 GMT 2019
 */

package org.restheart.handlers.applicationlogic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.MetricRegistry;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.restheart.db.DbsDAO;
import org.restheart.handlers.PipedHttpHandler;
import org.restheart.handlers.applicationlogic.MetricsHandler;
import org.restheart.utils.SharedMetricRegistryProxy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricsHandler_ESTest extends MetricsHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MetricsHandler.ResponseType.AcceptHeaderEntry metricsHandler_ResponseType_AcceptHeaderEntry0 = MetricsHandler.ResponseType.AcceptHeaderEntry.of("org.bson.BsonBinaryWriter");
      assertNotNull(metricsHandler_ResponseType_AcceptHeaderEntry0);
      
      String string0 = metricsHandler_ResponseType_AcceptHeaderEntry0.toString();
      assertEquals("AcceptHeaderEntry{contentType='org.bson.BsonBinaryWriter', specialization='null', qValue=1.0}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.PROMETHEUS;
      MetricsHandler.ResponseType.AcceptHeaderEntry metricsHandler_ResponseType_AcceptHeaderEntry0 = new MetricsHandler.ResponseType.AcceptHeaderEntry("", "", 505L);
      boolean boolean0 = metricsHandler_ResponseType0.isAcceptableFor(metricsHandler_ResponseType_AcceptHeaderEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.PROMETHEUS;
      MetricRegistry metricRegistry0 = new MetricRegistry();
      String string0 = metricsHandler_ResponseType0.generateResponse(metricRegistry0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.JSON;
      String string0 = metricsHandler_ResponseType0.getOutputContentType();
      assertNotNull(string0);
      assertEquals("application/json", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetricsHandler.ResponseType.forQueryParameter("pj");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricsHandler.ResponseType.forQueryParameter("fF?BztLX1RT0F[0&2-");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.forAcceptHeader((String) null);
      SharedMetricRegistryProxy sharedMetricRegistryProxy0 = new SharedMetricRegistryProxy();
      MetricRegistry metricRegistry0 = sharedMetricRegistryProxy0.registry();
      String string0 = metricsHandler_ResponseType0.generateResponse(metricRegistry0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MetricsHandler.ResponseType.forAcceptHeader("L7r{Z:\"eFUY; ");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricsHandler.ResponseType.AcceptHeaderEntry metricsHandler_ResponseType_AcceptHeaderEntry0 = MetricsHandler.ResponseType.AcceptHeaderEntry.of("!!'hlo\"2(:p,pq&.; ~k,u^iO)*Gn");
      assertNotNull(metricsHandler_ResponseType_AcceptHeaderEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricsHandler.ResponseType.forAcceptHeader("\"");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricsHandler.ResponseType.forAcceptHeader("; ~k,u^iO)*Gn");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.PROMETHEUS;
      MetricsHandler.ResponseType.AcceptHeaderEntry metricsHandler_ResponseType_AcceptHeaderEntry0 = new MetricsHandler.ResponseType.AcceptHeaderEntry("*/*", "*/*", 963.337727543952);
      boolean boolean0 = metricsHandler_ResponseType0.isAcceptableFor(metricsHandler_ResponseType_AcceptHeaderEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.forAcceptHeader("*/*");
      String string0 = metricsHandler_ResponseType0.getOutputContentType();
      assertEquals("text/plain; version=0.0.4", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = MetricsHandler.ResponseType.calculateMediaRange("application/json");
      assertEquals("application/*", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.JSON;
      String string0 = metricsHandler_ResponseType0.getMediaRange();
      assertEquals("application/*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, (-3189L));
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.JSON;
      MetricRegistry metricRegistry0 = new MetricRegistry();
      // Undeclared exception!
      try { 
        metricsHandler_ResponseType0.writeTo(httpServerExchange0, metricRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.io.AsyncSenderImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MetricsHandler.ResponseType metricsHandler_ResponseType0 = MetricsHandler.ResponseType.PROMETHEUS;
      String string0 = metricsHandler_ResponseType0.getContentType();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MetricsHandler.ResponseType.AcceptHeaderEntry metricsHandler_ResponseType_AcceptHeaderEntry0 = new MetricsHandler.ResponseType.AcceptHeaderEntry("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedHttpHandler pipedHttpHandler0 = null;
      DbsDAO dbsDAO0 = null;
      MetricsHandler metricsHandler0 = new MetricsHandler(pipedHttpHandler0, dbsDAO0);
      MetricsHandler metricsHandler1 = null;
      try {
        metricsHandler1 = new MetricsHandler(metricsHandler0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.restheart.db.DbsDAO
         //
         verifyException("org.restheart.handlers.PipedHttpHandler", e);
      }
  }
}
