/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:52:25 GMT 2019
 */

package org.restheart.handlers.document;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import java.util.LinkedList;
import org.bson.BsonDocument;
import org.bson.BsonElement;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonDocumentCodec;
import org.bson.codecs.BsonValueCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.hal.Representation;
import org.restheart.handlers.RequestContext;
import org.restheart.handlers.document.DocumentRepresentationFactory;
import org.restheart.metadata.Relationship;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentRepresentationFactory_ESTest extends DocumentRepresentationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentRepresentationFactory documentRepresentationFactory0 = new DocumentRepresentationFactory();
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      Codec<DocumentRepresentationFactory> codec0 = (Codec<DocumentRepresentationFactory>) mock(Codec.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(documentRepresentationFactory0, codec0);
      // Undeclared exception!
      try { 
        documentRepresentationFactory0.getRepresentation("%s/%s?%s", httpServerExchange0, (RequestContext) null, rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // While decoding a BSON document 4 bytes were required, but only 0 remain
         //
         verifyException("org.bson.io.ByteBufferBsonInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Representation representation0 = new Representation("$oid");
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.DB;
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("option2", relationship_TYPE0, relationship_ROLE0, "application/x-www-form-urlencoded", " has invalid relationships definition", (String) null);
      Codec<Relationship> codec0 = (Codec<Relationship>) mock(Codec.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(relationship0, codec0);
      // Undeclared exception!
      try { 
        DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // While decoding a BSON document 4 bytes were required, but only 0 remain
         //
         verifyException("org.bson.io.ByteBufferBsonInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.BULK_DOCUMENTS;
      // Undeclared exception!
      try { 
        DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, (BsonDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.document.DocumentRepresentationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.SCHEMA_STORE;
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)19;
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, rawBsonDocument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Representation representation0 = new Representation("gIIr#XB;@");
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.FILE_BINARY;
      Document document0 = new Document((String) null, (Object) null);
      Class<Relationship> class0 = Relationship.class;
      BsonValueCodec bsonValueCodec0 = new BsonValueCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonValueCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to org.bson.BsonValue
         //
         verifyException("org.bson.codecs.BsonValueCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.SCHEMA_STORE;
      BsonDocumentCodec bsonDocumentCodec0 = new BsonDocumentCodec();
      BsonDocument bsonDocument0 = new BsonDocument();
      bsonDocumentCodec0.generateIdIfAbsentFromDocument(bsonDocument0);
      DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
      assertFalse(bsonDocument0.isInt32());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.SCHEMA_STORE;
      BsonDocument bsonDocument0 = new BsonDocument();
      DocumentRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
      assertFalse(bsonDocument0.isRegularExpression());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DocumentRepresentationFactory documentRepresentationFactory0 = new DocumentRepresentationFactory();
      LinkedList<BsonElement> linkedList0 = new LinkedList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(linkedList0);
      // Undeclared exception!
      try { 
        documentRepresentationFactory0.getRepresentation("", (HttpServerExchange) null, (RequestContext) null, bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.document.DocumentRepresentationFactory", e);
      }
  }
}
