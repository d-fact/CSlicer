/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:21:53 GMT 2019
 */

package org.restheart.handlers.schema;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.HttpServerExchange;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonDateTimeCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.handlers.schema.JsonSchemaTransformer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonSchemaTransformer_ESTest extends JsonSchemaTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "";
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("", codecRegistry0);
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.unescapeSchema(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BsonDateTimeCodec bsonDateTimeCodec0 = new BsonDateTimeCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonDateTimeCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("", codecRegistry0);
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.unescapeSchema(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.bson.BsonDateTime
         //
         verifyException("org.bson.codecs.BsonDateTimeCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = new Document();
      Class<Object> class0 = Object.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.escapeSchema(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonSchemaTransformer jsonSchemaTransformer0 = new JsonSchemaTransformer();
      Codec<JsonSchemaTransformer> codec0 = (Codec<JsonSchemaTransformer>) mock(Codec.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(jsonSchemaTransformer0, codec0);
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.escapeSchema(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // While decoding a BSON document 4 bytes were required, but only 0 remain
         //
         verifyException("org.bson.io.ByteBufferBsonInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.escapeSchema((BsonDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.schema.JsonSchemaTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = new Document();
      Class<Object> class0 = Object.class;
      StringCodec stringCodec0 = new StringCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        JsonSchemaTransformer.escapeSchema(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      JsonSchemaTransformer.escapeSchema(bsonDocument0);
      JsonSchemaTransformer jsonSchemaTransformer0 = new JsonSchemaTransformer();
      // Undeclared exception!
      try { 
        jsonSchemaTransformer0.transform((HttpServerExchange) null, (RequestContext) null, (BsonValue) null, (BsonValue) bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.schema.JsonSchemaTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      JsonSchemaTransformer.unescapeSchema(bsonDocument0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BsonDocument bsonDocument0 = null;
      JsonSchemaTransformer.unescapeSchema((BsonDocument) null);
      int int0 = (-900);
  }
}
