/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:16:22 GMT 2019
 */

package org.restheart.handlers.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import io.undertow.util.HeaderMap;
import java.util.HashMap;
import java.util.List;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.Document;
import org.bson.codecs.Codec;
import org.bson.codecs.IntegerCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.hal.Representation;
import org.restheart.handlers.RequestContext;
import org.restheart.handlers.database.DBRepresentationFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBRepresentationFactory_ESTest extends DBRepresentationFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Representation representation0 = new Representation("uS8[y#v");
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.DOCUMENT;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Document document0 = new Document(hashMap0);
      Class<String> class0 = String.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        DBRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.INDEX;
      // Undeclared exception!
      try { 
        DBRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, (BsonDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.database.DBRepresentationFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Representation representation0 = new Representation();
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.METRICS;
      IntegerCodec integerCodec0 = new IntegerCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(integerCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(representation0, codecRegistry0);
      // Undeclared exception!
      try { 
        DBRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.restheart.hal.Representation cannot be cast to java.lang.Integer
         //
         verifyException("org.bson.codecs.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Representation representation0 = new Representation("");
      RequestContext.TYPE requestContext_TYPE0 = RequestContext.TYPE.INVALID;
      Codec<DBRepresentationFactory> codec0 = (Codec<DBRepresentationFactory>) mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(codec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("", codecRegistry0);
      DBRepresentationFactory.addSpecialProperties(representation0, requestContext_TYPE0, bsonDocument0);
      assertFalse(bsonDocument0.isArray());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DBRepresentationFactory dBRepresentationFactory0 = new DBRepresentationFactory();
      HeaderMap headerMap0 = new HeaderMap();
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, headerMap0, headerMap0, (-4630L));
      // Undeclared exception!
      try { 
        dBRepresentationFactory0.getRepresentation(httpServerExchange0, (RequestContext) null, (List<BsonDocument>) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.database.DBRepresentationFactory", e);
      }
  }
}
