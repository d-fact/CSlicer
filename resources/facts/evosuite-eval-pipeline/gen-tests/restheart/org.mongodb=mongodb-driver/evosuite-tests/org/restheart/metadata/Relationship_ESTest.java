/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:53:49 GMT 2019
 */

package org.restheart.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.bson.BsonDateTime;
import org.bson.BsonDbPointer;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonElement;
import org.bson.BsonObjectId;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonDBPointerCodec;
import org.bson.codecs.BsonInt32Codec;
import org.bson.codecs.Codec;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.types.ObjectId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.metadata.Relationship;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Relationship_ESTest extends Relationship_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", relationship_TYPE0, relationship_ROLE0, "ON", "-_oOc,#6!F\"P", "$.OWNING");
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "ON", "", (BsonDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.Relationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Relationship relationship0 = null;
      try {
        relationship0 = new Relationship("MANY_TO_ONE", "MANY_TO_ONE", "MANY_TO_ONE", "MANY_TO_ONE", "MANY_TO_ONE", "MANY_TO_ONE");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // invalid role value MANY_TO_ONE. valid values are [OWNING, INVERSE]
         //
         verifyException("org.restheart.metadata.Relationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Relationship relationship0 = new Relationship("%&)SLa*^0!C<P}2w", (Relationship.TYPE) null, (Relationship.ROLE) null, "%&)SLa*^0!C<P}2w", (String) null, "%&)SLa*^0!C<P}2w");
      relationship0.getType();
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getRel());
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getTargetDb());
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getReferenceField());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("org.bson.UuidRepresentation", relationship_TYPE0, relationship_ROLE0, (String) null, (String) null, "gQ,p[Xz~wayYz@W");
      String string0 = relationship0.getTargetDb();
      assertEquals("org.bson.UuidRepresentation", relationship0.getRel());
      assertEquals("gQ,p[Xz~wayYz@W", relationship0.getReferenceField());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_ONE;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("7>T8n--!p=Lt7PJkt", relationship_TYPE0, relationship_ROLE0, "7>T8n--!p=Lt7PJkt", "L55E9.rwfU!(l6", "ZE!Zx");
      String string0 = relationship0.getTargetDb();
      assertEquals("7>T8n--!p=Lt7PJkt", string0);
      assertEquals("7>T8n--!p=Lt7PJkt", relationship0.getRel());
      assertEquals("L55E9.rwfU!(l6", relationship0.getTargetCollection());
      assertEquals("ZE!Zx", relationship0.getReferenceField());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, (String) null, (String) null, (String) null);
      String string0 = relationship0.getTargetCollection();
      assertNull(string0);
      assertEquals("", relationship0.getRel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "", "", "");
      String string0 = relationship0.getTargetCollection();
      assertEquals("", relationship0.getReferenceField());
      assertEquals("", relationship0.getTargetDb());
      assertEquals("", string0);
      assertEquals("", relationship0.getRel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("s_/DoYUm0B{M X", relationship_TYPE0, relationship_ROLE0, "s_/DoYUm0B{M X", "s_/DoYUm0B{M X", "s_/DoYUm0B{M X");
      String string0 = relationship0.getRel();
      assertEquals("s_/DoYUm0B{M X", relationship0.getReferenceField());
      assertEquals("s_/DoYUm0B{M X", relationship0.getTargetCollection());
      assertEquals("s_/DoYUm0B{M X", relationship0.getTargetDb());
      assertEquals("s_/DoYUm0B{M X", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "]", "0#Jo^_TG9uP]X6", "0#Jo^_TG9uP]X6");
      String string0 = relationship0.getRel();
      assertEquals("]", relationship0.getTargetDb());
      assertEquals("", string0);
      assertEquals("0#Jo^_TG9uP]X6", relationship0.getReferenceField());
      assertEquals("0#Jo^_TG9uP]X6", relationship0.getTargetCollection());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("ON", relationship_TYPE0, relationship_ROLE0, "ON", "ON", (String) null);
      String string0 = relationship0.getReferenceField();
      assertEquals("ON", relationship0.getTargetDb());
      assertEquals("ON", relationship0.getTargetCollection());
      assertNull(string0);
      assertEquals("ON", relationship0.getRel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_ONE;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("VZp@:gbyH]selfi0i=", relationship_TYPE0, relationship_ROLE0, "io.undertow.util.AttachmentList", (String) null, "org.xnio.XnioWorker$MessageConnectionWrapListener");
      String string0 = relationship0.getReferenceField();
      assertEquals("VZp@:gbyH]selfi0i=", relationship0.getRel());
      assertNotNull(string0);
      assertEquals("io.undertow.util.AttachmentList", relationship0.getTargetDb());
      assertEquals("org.xnio.XnioWorker$MessageConnectionWrapListener", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", relationship_TYPE0, relationship_ROLE0, "ON", "-_oOc,#6!F\"P", "<e");
      Document document0 = new Document();
      Class<BsonDateTime> class0 = BsonDateTime.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "$numberDecimal", "-cP_copdNKwG", bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      // Undeclared exception!
      try { 
        Relationship.getFromJson(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectId objectId0 = new ObjectId();
      BsonDbPointer bsonDbPointer0 = new BsonDbPointer("missing ", objectId0);
      BsonDBPointerCodec bsonDBPointerCodec0 = new BsonDBPointerCodec();
      BsonDocumentWrapper<BsonDbPointer> bsonDocumentWrapper0 = new BsonDocumentWrapper<BsonDbPointer>(bsonDbPointer0, bsonDBPointerCodec0);
      // Undeclared exception!
      try { 
        Relationship.getFromJson(bsonDocumentWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocumentWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BsonInt32Codec bsonInt32Codec0 = new BsonInt32Codec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonInt32Codec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument("Unable to register counter", codecRegistry0);
      // Undeclared exception!
      try { 
        Relationship.getFromJson(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.bson.BsonInt32
         //
         verifyException("org.bson.codecs.BsonInt32Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", relationship_TYPE0, relationship_ROLE0, "ON", "M", "M");
      LinkedList<BsonElement> linkedList0 = new LinkedList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(linkedList0);
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "ON", "type", bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_ONE;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", relationship_TYPE0, relationship_ROLE0, "ON", "-_oOc,#6!F\"P", "<e");
      LinkedList<BsonElement> linkedList0 = new LinkedList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(linkedList0);
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "ON", "", bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_ONE;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", relationship_TYPE0, relationship_ROLE0, "M", "M", "z");
      LinkedList<BsonElement> linkedList0 = new LinkedList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(linkedList0);
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "M", "", bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "", "", "");
      BsonDocument bsonDocument0 = new BsonDocument();
      relationship0.getRelationshipLink((RequestContext) null, "", "`U *", bsonDocument0);
      assertEquals("", relationship0.getRel());
      assertEquals("", relationship0.getTargetDb());
      assertEquals("", relationship0.getReferenceField());
      assertEquals("", relationship0.getTargetCollection());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", (Relationship.TYPE) null, relationship_ROLE0, (String) null, "-_oOc,#6!F\"P", "$.OWNING");
      LinkedList<BsonElement> linkedList0 = new LinkedList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(linkedList0);
      relationship0.getRelationshipLink((RequestContext) null, "ON", "", bsonDocument0);
      assertEquals("-_oOc,#6!F\"P", relationship0.getTargetCollection());
      assertEquals("$.OWNING", relationship0.getReferenceField());
      assertEquals("M", relationship0.getRel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "%&)SLa*^0!C<P}2w", "%&)SLa*^0!C<P}2w", "%&)SLa*^0!C<P}2w");
      BsonDocument bsonDocument0 = new BsonDocument();
      // Undeclared exception!
      try { 
        relationship0.getRelationshipLink((RequestContext) null, "role", "role", bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BsonObjectId bsonObjectId0 = new BsonObjectId();
      BsonDocument bsonDocument0 = new BsonDocument("rels", bsonObjectId0);
      try { 
        Relationship.getFromJson(bsonDocument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // element 'rels' is not an array list.BsonObjectId{value=52fe7ac10032166ad700000f}
         //
         verifyException("org.restheart.metadata.Relationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Relationship> list0 = Relationship.getFromJson((BsonDocument) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      List<Relationship> list0 = Relationship.getFromJson(bsonDocument0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "%&)SLa*^0!C<P}2w", "%&)SLa*^0!C<P}2w", "%&)SLa*^0!C<P}2w");
      relationship0.getType();
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getTargetCollection());
      assertEquals("", relationship0.getRel());
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getReferenceField());
      assertEquals("%&)SLa*^0!C<P}2w", relationship0.getTargetDb());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "", "", "");
      String string0 = relationship0.getReferenceField();
      assertEquals("", relationship0.getRel());
      assertEquals("", relationship0.getTargetDb());
      assertEquals("", relationship0.getTargetCollection());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "", "", "");
      String string0 = relationship0.getTargetDb();
      assertEquals("", relationship0.getRel());
      assertEquals("", relationship0.getTargetCollection());
      assertEquals("", relationship0.getReferenceField());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.ONE_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship("", relationship_TYPE0, relationship_ROLE0, "Unable to register counter", "$.", "Unable to register counter");
      String string0 = relationship0.getTargetCollection();
      assertEquals("Unable to register counter", relationship0.getReferenceField());
      assertEquals("$.", string0);
      assertEquals("", relationship0.getRel());
      assertEquals("Unable to register counter", relationship0.getTargetDb());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Relationship relationship0 = null;
      try {
        relationship0 = new Relationship("", "", "", "", "", "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // invalid type value: . valid values are [ONE_TO_ONE, ONE_TO_MANY, MANY_TO_ONE, MANY_TO_MANY]
         //
         verifyException("org.restheart.metadata.Relationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Relationship.TYPE relationship_TYPE0 = Relationship.TYPE.MANY_TO_MANY;
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.OWNING;
      Relationship relationship0 = new Relationship((String) null, relationship_TYPE0, relationship_ROLE0, (String) null, (String) null, (String) null);
      String string0 = relationship0.getRel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Relationship.ROLE relationship_ROLE0 = Relationship.ROLE.INVERSE;
      Relationship relationship0 = new Relationship("M", (Relationship.TYPE) null, relationship_ROLE0, (String) null, "-_oOc,#6!F\"P", "$.OWNING");
      relationship0.getRole();
      assertEquals("$.OWNING", relationship0.getReferenceField());
      assertEquals("-_oOc,#6!F\"P", relationship0.getTargetCollection());
      assertEquals("M", relationship0.getRel());
  }
}
