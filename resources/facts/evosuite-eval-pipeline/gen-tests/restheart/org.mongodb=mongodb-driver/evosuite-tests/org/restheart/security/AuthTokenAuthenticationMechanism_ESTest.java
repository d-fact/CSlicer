/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:11:40 GMT 2019
 */

package org.restheart.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.security.api.AuthenticationMechanism;
import io.undertow.security.api.SecurityContext;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.restheart.security.AuthTokenAuthenticationMechanism;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthTokenAuthenticationMechanism_ESTest extends AuthTokenAuthenticationMechanism_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthTokenAuthenticationMechanism authTokenAuthenticationMechanism0 = new AuthTokenAuthenticationMechanism("io.undertow.server.DefaultByteBufferPool$ThreadLocalData");
      // Undeclared exception!
      try { 
        authTokenAuthenticationMechanism0.sendChallenge((HttpServerExchange) null, (SecurityContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.security.AuthTokenAuthenticationMechanism", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AuthTokenAuthenticationMechanism authTokenAuthenticationMechanism0 = new AuthTokenAuthenticationMechanism("g!a@a");
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      AuthenticationMechanism.ChallengeResult authenticationMechanism_ChallengeResult0 = authTokenAuthenticationMechanism0.sendChallenge(httpServerExchange0, (SecurityContext) null);
      assertFalse(authenticationMechanism_ChallengeResult0.isChallengeSent());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthTokenAuthenticationMechanism authTokenAuthenticationMechanism0 = new AuthTokenAuthenticationMechanism("g!a@a");
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      AuthenticationMechanism.AuthenticationMechanismOutcome authenticationMechanism_AuthenticationMechanismOutcome0 = authTokenAuthenticationMechanism0.authenticate(httpServerExchange0, (SecurityContext) null);
      assertEquals(AuthenticationMechanism.AuthenticationMechanismOutcome.NOT_ATTEMPTED, authenticationMechanism_AuthenticationMechanismOutcome0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AuthTokenAuthenticationMechanism authTokenAuthenticationMechanism0 = new AuthTokenAuthenticationMechanism("");
      // Undeclared exception!
      try { 
        authTokenAuthenticationMechanism0.authenticate((HttpServerExchange) null, (SecurityContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.security.AuthTokenAuthenticationMechanism", e);
      }
  }
}
