/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:31:50 GMT 2019
 */

package org.restheart.metadata.checkers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import java.util.ArrayList;
import org.bson.BsonDocument;
import org.bson.BsonElement;
import org.bson.BsonRegularExpression;
import org.bson.BsonValue;
import org.bson.RawBsonDocument;
import org.bson.codecs.Codec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.metadata.checkers.Checker;
import org.restheart.metadata.checkers.ContentSizeChecker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentSizeChecker_ESTest extends ContentSizeChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContentSizeChecker contentSizeChecker0 = new ContentSizeChecker();
      ArrayList<BsonElement> arrayList0 = new ArrayList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(arrayList0);
      // Undeclared exception!
      try { 
        contentSizeChecker0.check((HttpServerExchange) null, (RequestContext) null, (BsonDocument) null, (BsonValue) bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.ContentSizeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContentSizeChecker contentSizeChecker0 = new ContentSizeChecker();
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      Codec<ContentSizeChecker> codec0 = (Codec<ContentSizeChecker>) mock(Codec.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(contentSizeChecker0, codec0);
      // Undeclared exception!
      try { 
        contentSizeChecker0.check(httpServerExchange0, (RequestContext) null, (BsonDocument) rawBsonDocument0, (BsonValue) rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // While decoding a BSON document 4 bytes were required, but only 0 remain
         //
         verifyException("org.bson.io.ByteBufferBsonInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContentSizeChecker contentSizeChecker0 = new ContentSizeChecker();
      ArrayList<BsonElement> arrayList0 = new ArrayList<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(arrayList0);
      BsonRegularExpression bsonRegularExpression0 = new BsonRegularExpression("", "");
      // Undeclared exception!
      try { 
        contentSizeChecker0.check((HttpServerExchange) null, (RequestContext) null, bsonDocument0, (BsonValue) bsonRegularExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.ContentSizeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContentSizeChecker contentSizeChecker0 = new ContentSizeChecker();
      Checker.PHASE checker_PHASE0 = contentSizeChecker0.getPhase((RequestContext) null);
      assertEquals(Checker.PHASE.BEFORE_WRITE, checker_PHASE0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContentSizeChecker contentSizeChecker0 = new ContentSizeChecker();
      boolean boolean0 = contentSizeChecker0.doesSupportRequests((RequestContext) null);
      assertTrue(boolean0);
  }
}
