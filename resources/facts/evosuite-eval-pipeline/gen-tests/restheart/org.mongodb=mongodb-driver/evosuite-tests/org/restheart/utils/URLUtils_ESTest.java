/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:32:09 GMT 2019
 */

package org.restheart.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Level;
import com.codahale.metrics.InstrumentedThreadFactory;
import com.codahale.metrics.MetricRegistry;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import io.undertow.util.HeaderMap;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.bson.BsonArray;
import org.bson.BsonBoolean;
import org.bson.BsonDocument;
import org.bson.BsonInt32;
import org.bson.BsonMaxKey;
import org.bson.BsonMinKey;
import org.bson.BsonNull;
import org.bson.BsonObjectId;
import org.bson.BsonString;
import org.bson.BsonTimestamp;
import org.bson.BsonType;
import org.bson.BsonValue;
import org.bson.types.MaxKey;
import org.bson.types.MinKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.utils.URLUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class URLUtils_ESTest extends URLUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BsonString bsonString0 = new BsonString("Tsg3<a&rXkJ^I?|=.F");
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterOne((RequestContext) null, "q)D<N", "}}}", "qg&(!e\\NgkL;DPO", bsonString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = URLUtils.decodeQueryString("io.undertow.security.api.AuthenticationMechanism$ChallengeResult");
      assertNotNull(string0);
      assertEquals("io.undertow.security.api.AuthenticationMechanism$ChallengeResult", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.getReferenceLink("GSSException: ", (Object) "GSSException: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        URLUtils.getQueryStringRemovingParams((HttpServerExchange) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.decodeQueryString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.decodeQueryString("%~?GO37-ahT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"~?\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.checkId((BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = URLUtils.removeTrailingSlashes("?/Akx>^s/Kze$mc");
      assertEquals("?/Akx>^s/Kze$mc", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = URLUtils.removeTrailingSlashes("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      try { 
        URLUtils.checkId(bsonArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown _id type: BsonArray
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterMany((RequestContext) null, (String) null, "'#75zK*& ?g_5Cq^/d_", (BsonValue[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NULL;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("MINKEY", requestContext_DOC_ID_TYPE0);
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterManyInverse((RequestContext) null, "", (String) null, "MINKEY", bsonValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HeaderMap headerMap0 = new HeaderMap();
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, headerMap0, headerMap0, (-1711L));
      String[] stringArray0 = new String[9];
      String string0 = URLUtils.getQueryStringRemovingParams(httpServerExchange0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NUMBER;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("_maxkey", requestContext_DOC_ID_TYPE0);
      // Undeclared exception!
      try { 
        URLUtils.getUriWithDocId((RequestContext) null, "pNHu(] <^U3", "_maxkey", bsonValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = URLUtils.getParentPath("/_MaxKey");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = URLUtils.getParentPath("[I4P!JTy--SUh61BL^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = URLUtils.getParentPath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = URLUtils.getParentPath("FG/java.lang.String@0000000001");
      assertEquals("FG", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = URLUtils.getParentPath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.removeTrailingSlashes("&s( /");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = URLUtils.removeTrailingSlashes((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.BOOLEAN;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("]*TIQ1K", requestContext_DOC_ID_TYPE0);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.DATE;
      // Undeclared exception!
      try { 
        URLUtils.getDocumentIdFromURI("JdD\"", requestContext_DOC_ID_TYPE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON reader was expecting a value but found 'JdD'.
         //
         verifyException("org.bson.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MAXKEY;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("9Q>0C0(Y", requestContext_DOC_ID_TYPE0);
      assertFalse(bsonValue0.isInt32());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MINKEY;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("", requestContext_DOC_ID_TYPE0);
      assertFalse(bsonValue0.isDocument());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NUMBER;
      // Undeclared exception!
      try { 
        URLUtils.getDocumentIdFromURI("", requestContext_DOC_ID_TYPE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON reader was expecting a value but found '}'.
         //
         verifyException("org.bson.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.STRING;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("", requestContext_DOC_ID_TYPE0);
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE1 = URLUtils.checkId(bsonValue0);
      assertEquals(RequestContext.DOC_ID_TYPE.STRING, requestContext_DOC_ID_TYPE1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MINKEY;
      BsonBoolean bsonBoolean0 = (BsonBoolean)URLUtils.getDocumentIdFromURI("_true", requestContext_DOC_ID_TYPE0);
      assertTrue(bsonBoolean0.getValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("JdD\"", (RequestContext.DOC_ID_TYPE) null);
      assertEquals(BsonType.STRING, bsonValue0.getBsonType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.OID;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI((String) null, requestContext_DOC_ID_TYPE0);
      assertNull(bsonValue0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BsonDocument bsonDocument0 = new BsonDocument();
      try { 
        URLUtils.getUriWithDocId((RequestContext) null, "=;b2st?u\t@#|HEM* <", "=;b2st?u\t@#|HEM* <", bsonDocument0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown _id type: BsonDocument
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NUMBER;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("_minkey", requestContext_DOC_ID_TYPE0);
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE1 = URLUtils.checkId(bsonValue0);
      assertEquals(RequestContext.DOC_ID_TYPE.MINKEY, requestContext_DOC_ID_TYPE1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MINKEY;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("_maxkey", requestContext_DOC_ID_TYPE0);
      assertNotNull(bsonValue0);
      
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE1 = URLUtils.checkId(bsonValue0);
      assertEquals(RequestContext.DOC_ID_TYPE.MAXKEY, requestContext_DOC_ID_TYPE1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BsonInt32 bsonInt32_0 = new BsonInt32(95);
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = URLUtils.checkId(bsonInt32_0);
      assertEquals(RequestContext.DOC_ID_TYPE.NUMBER, requestContext_DOC_ID_TYPE0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BsonNull bsonNull0 = BsonNull.VALUE;
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = URLUtils.checkId(bsonNull0);
      assertEquals(RequestContext.DOC_ID_TYPE.NULL, requestContext_DOC_ID_TYPE0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BsonBoolean bsonBoolean0 = BsonBoolean.TRUE;
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = URLUtils.checkId(bsonBoolean0);
      assertEquals(RequestContext.DOC_ID_TYPE.BOOLEAN, requestContext_DOC_ID_TYPE0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BsonObjectId bsonObjectId0 = new BsonObjectId();
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = URLUtils.checkId(bsonObjectId0);
      try { 
        URLUtils.getDocumentIdFromURI("pNHu(] <^U3", requestContext_DOC_ID_TYPE0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The id is not a valid ObjectId pNHu(] <^U3
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BsonTimestamp bsonTimestamp0 = new BsonTimestamp();
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = URLUtils.checkId(bsonTimestamp0);
      assertEquals(RequestContext.DOC_ID_TYPE.DATE, requestContext_DOC_ID_TYPE0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.NULL;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI(";O:_", requestContext_DOC_ID_TYPE0);
      // Undeclared exception!
      try { 
        URLUtils.getUriWithDocId((RequestContext) null, "", ";O:_", bsonValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      MetricRegistry metricRegistry0 = new MetricRegistry();
      InstrumentedThreadFactory instrumentedThreadFactory0 = new InstrumentedThreadFactory(threadFactory0, metricRegistry0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1114112, instrumentedThreadFactory0, threadPoolExecutor_AbortPolicy0);
      Callable<BsonString> callable0 = (Callable<BsonString>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<BsonString> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 34, timeUnit0);
      String string0 = URLUtils.getReferenceLink("", (Object) scheduledFuture0);
      assertEquals("/_? (unsuppored _id type)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MinKey minKey0 = new MinKey();
      String string0 = URLUtils.getReferenceLink("\"'p~Z:H<+spK", (Object) minKey0);
      assertEquals("\"'p~Z:H<+spK/_MinKey", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Double double0 = new Double((-1837.8502622313656));
      String string0 = URLUtils.getReferenceLink("?/Akx>^s/Kze$mc", (Object) double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Float float0 = new Float((-1792.64184029));
      String string0 = URLUtils.getReferenceLink(").t).-", (Object) float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Long long0 = new Long(1L);
      String string0 = URLUtils.getReferenceLink(">fd4*Yat3bJ%Nu)#", (Object) long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = Level.TRACE_INTEGER;
      String string0 = URLUtils.getReferenceLink("97avkeJo_A#InJt%E", (Object) integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BsonMinKey bsonMinKey0 = new BsonMinKey();
      String string0 = URLUtils.getReferenceLink("", (Object) bsonMinKey0);
      assertEquals("/_MinKey", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BsonMaxKey bsonMaxKey0 = new BsonMaxKey();
      String string0 = URLUtils.getReferenceLink("XS>o':)Vo<hH", (Object) bsonMaxKey0);
      assertEquals("XS>o':)Vo<hH/_MaxKey", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BsonString bsonString0 = new BsonString("E6ZoFx[lA");
      String string0 = URLUtils.getReferenceLink("E6ZoFx[lA", (Object) bsonString0);
      assertEquals("E6ZoFx[lA/E6ZoFx[lA", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MaxKey maxKey0 = new MaxKey();
      String string0 = URLUtils.getReferenceLink("FG", (Object) maxKey0);
      assertEquals("FG/_MaxKey", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = URLUtils.getReferenceLink("readJavaScript", (Object) "readJavaScript");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = URLUtils.getReferenceLink((String) null, (Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = URLUtils.getReferenceLink("W*8oP?", (Object) null);
      assertEquals("W*8oP?/_null", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<BsonObjectId> arrayList0 = new ArrayList<BsonObjectId>();
      BsonArray bsonArray0 = new BsonArray(arrayList0);
      String string0 = URLUtils.getReferenceLink((RequestContext) null, "T4$>tKucP6*@", (BsonValue) bsonArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MINKEY;
      BsonValue bsonValue0 = URLUtils.getDocumentIdFromURI("_maxkey", requestContext_DOC_ID_TYPE0);
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterOne((RequestContext) null, "COMMA", (String) null, (String) null, bsonValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterManyInverse((RequestContext) null, "", "_null", "_c+Nx!$492W#))@", (BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.getPrefixUrl((HttpServerExchange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BsonValue[] bsonValueArray0 = new BsonValue[4];
      // Undeclared exception!
      try { 
        URLUtils.getUriWithFilterMany((RequestContext) null, "=;b2st?u\t@#|HEM* <", "", bsonValueArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = URLUtils.decodeQueryString("");
      assertNotNull(string0);
      assertEquals("", string0);
  }
}
