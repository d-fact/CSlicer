/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:24:52 GMT 2019
 */

package org.restheart.metadata.checkers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Level;
import com.codahale.metrics.MetricRegistry;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import io.undertow.util.HeaderMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.bson.BsonArray;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonElement;
import org.bson.BsonJavaScript;
import org.bson.BsonJavaScriptWithScope;
import org.bson.BsonNull;
import org.bson.BsonTimestamp;
import org.bson.BsonValue;
import org.bson.codecs.BsonBinaryCodec;
import org.bson.codecs.IntegerCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.metadata.checkers.JsonPathConditionsChecker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPathConditionsChecker_ESTest extends JsonPathConditionsChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      MetricRegistry metricRegistry0 = new MetricRegistry();
      SortedSet<String> sortedSet0 = metricRegistry0.getNames();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.checkType((BsonDocument) null, "condition in the args list does not have the 'path' property: ", "Xi7RkT", sortedSet0, set0, false, false, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonArray bsonArray1 = jsonPathConditionsChecker0.filterMissingOptionalAndNullNullableConditions(bsonArray0, bsonArray0);
      assertNotSame(bsonArray1, bsonArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonNull bsonNull0 = BsonNull.VALUE;
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      boolean boolean0 = jsonPathConditionsChecker0.checkCount(bsonNull0, "?m,M$t~", hashSet0, (RequestContext) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JsonPathConditionsChecker.avoidEscapedChars("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.getPhase((RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      Vector<BsonElement> vector0 = new Vector<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(vector0);
      BsonJavaScriptWithScope bsonJavaScriptWithScope0 = new BsonJavaScriptWithScope("", bsonDocument0);
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.filterMissingOptionalAndNullNullableConditions((BsonArray) null, bsonJavaScriptWithScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.doesSupportRequests((RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.CheckersUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      Integer integer0 = Level.ALL_INTEGER;
      IntegerCodec integerCodec0 = new IntegerCodec();
      BsonDocumentWrapper<Integer> bsonDocumentWrapper0 = new BsonDocumentWrapper<Integer>(integer0, integerCodec0);
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.checkRegex(bsonDocumentWrapper0, "", "checkType condition failed: path: ", true, false, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonJavaScript bsonJavaScript0 = new BsonJavaScript("");
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.checkCount(bsonJavaScript0, (String) null, treeSet0, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.utils.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonJavaScript bsonJavaScript0 = new BsonJavaScript("");
      BsonBinaryCodec bsonBinaryCodec0 = new BsonBinaryCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonBinaryCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonJavaScript0, codecRegistry0);
      HeaderMap headerMap0 = new HeaderMap();
      bsonArray0.add((BsonValue) bsonDocument0);
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, headerMap0, headerMap0, 0L);
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.check(httpServerExchange0, (RequestContext) null, bsonDocument0, (BsonValue) bsonArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.BsonJavaScript cannot be cast to org.bson.BsonBinary
         //
         verifyException("org.bson.codecs.BsonBinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPathConditionsChecker.avoidEscapedChars((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonTimestamp bsonTimestamp0 = new BsonTimestamp(5, 1054);
      bsonArray0.add((BsonValue) bsonTimestamp0);
      BsonDocument bsonDocument0 = new BsonDocument();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.applyConditions(bsonArray0, bsonDocument0, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonJavaScript bsonJavaScript0 = new BsonJavaScript("");
      BsonBinaryCodec bsonBinaryCodec0 = new BsonBinaryCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonBinaryCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonJavaScript0, codecRegistry0);
      bsonArray0.add((BsonValue) bsonDocument0);
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.applyConditions(bsonArray0, bsonDocument0, (RequestContext) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.BsonJavaScript cannot be cast to org.bson.BsonBinary
         //
         verifyException("org.bson.codecs.BsonBinaryCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, 0L);
      BsonDocument bsonDocument0 = new BsonDocument();
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      // Undeclared exception!
      try { 
        jsonPathConditionsChecker0.check(httpServerExchange0, (RequestContext) null, bsonDocument0, (BsonValue) bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.JsonPathConditionsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JsonPathConditionsChecker.avoidEscapedChars("4%dpB\"@<dKcxK");
      assertEquals("4%dpB'@<dKcxK", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonJavaScript bsonJavaScript0 = new BsonJavaScript("");
      BsonBinaryCodec bsonBinaryCodec0 = new BsonBinaryCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonBinaryCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonJavaScript0, codecRegistry0);
      HeaderMap headerMap0 = new HeaderMap();
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null, headerMap0, headerMap0, 0L);
      boolean boolean0 = jsonPathConditionsChecker0.check(httpServerExchange0, (RequestContext) null, bsonDocument0, (BsonValue) bsonArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPathConditionsChecker jsonPathConditionsChecker0 = new JsonPathConditionsChecker();
      BsonArray bsonArray0 = new BsonArray();
      BsonJavaScript bsonJavaScript0 = new BsonJavaScript("");
      BsonBinaryCodec bsonBinaryCodec0 = new BsonBinaryCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonBinaryCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonJavaScript0, codecRegistry0);
      boolean boolean0 = jsonPathConditionsChecker0.applyConditions(bsonArray0, bsonDocument0, (RequestContext) null);
      assertTrue(boolean0);
  }
}
