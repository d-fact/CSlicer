/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:45:08 GMT 2019
 */

package org.restheart.handlers.injectors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.handlers.form.FormData;
import java.io.File;
import java.io.FileNotFoundException;
import org.bson.BsonArray;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.BsonObjectId;
import org.bson.BsonValue;
import org.bson.codecs.BsonDocumentCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.restheart.handlers.PipedHttpHandler;
import org.restheart.handlers.injectors.BodyInjectorHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BodyInjectorHandler_ESTest extends BodyInjectorHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("Timestamp(%d, %d)", "");
      BodyInjectorHandler.detectMediaType(file0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BodyInjectorHandler.extractMetadata((FormData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.injectors.BodyInjectorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        BodyInjectorHandler.detectMediaType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonArray0, codecRegistry0);
      // Undeclared exception!
      try { 
        BodyInjectorHandler.checkReservedId(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      bsonArray0.add((BsonValue) null);
      // Undeclared exception!
      try { 
        BodyInjectorHandler.checkReservedId(bsonArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.injectors.BodyInjectorHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      StringCodec stringCodec0 = new StringCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = BsonDocumentWrapper.asBsonDocument(bsonArray0, codecRegistry0);
      // Undeclared exception!
      try { 
        BodyInjectorHandler.checkReservedId(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.BsonArray cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormData formData0 = new FormData(1458);
      BsonDocument bsonDocument0 = BodyInjectorHandler.extractMetadata(formData0);
      String string0 = BodyInjectorHandler.checkReservedId(bsonDocument0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      bsonArray0.add((BsonValue) bsonArray0);
      String string0 = BodyInjectorHandler.checkReservedId(bsonArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FormData formData0 = new FormData(0);
      BsonDocument bsonDocument0 = BodyInjectorHandler.extractMetadata(formData0);
      BsonDocumentCodec bsonDocumentCodec0 = new BsonDocumentCodec();
      bsonDocumentCodec0.generateIdIfAbsentFromDocument(bsonDocument0);
      String string0 = BodyInjectorHandler.checkReservedId(bsonDocument0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      BsonDocument bsonDocument0 = new BsonDocument();
      bsonArray0.add((BsonValue) bsonDocument0);
      String string0 = BodyInjectorHandler.checkReservedId(bsonArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = BodyInjectorHandler.checkReservedId((BsonValue) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BsonObjectId bsonObjectId0 = new BsonObjectId();
      String string0 = BodyInjectorHandler.checkReservedId(bsonObjectId0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BodyInjectorHandler bodyInjectorHandler0 = null;
      try {
        bodyInjectorHandler0 = new BodyInjectorHandler((PipedHttpHandler) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.restheart.db.DbsDAO
         //
         verifyException("org.restheart.handlers.PipedHttpHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z7J$.^#9:Y#KVXW");
      try { 
        BodyInjectorHandler.detectMediaType(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
