/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:19:46 GMT 2019
 */

package org.restheart.metadata.transformers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import io.undertow.server.HttpServerExchange;
import org.bson.BsonBoolean;
import org.bson.BsonDocument;
import org.bson.BsonElement;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.codecs.Codec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.metadata.transformers.ValidOidsStringsAsOidsTransformer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValidOidsStringsAsOidsTransformer_ESTest extends ValidOidsStringsAsOidsTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValidOidsStringsAsOidsTransformer validOidsStringsAsOidsTransformer0 = new ValidOidsStringsAsOidsTransformer();
      BsonBoolean bsonBoolean0 = new BsonBoolean(true);
      Document document0 = new Document();
      Class<BoundType> class0 = BoundType.class;
      Codec<BsonElement> codec0 = (Codec<BsonElement>) mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(codec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        validOidsStringsAsOidsTransformer0.transform((HttpServerExchange) null, (RequestContext) null, (BsonValue) bsonDocument0, (BsonValue) bsonBoolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.transformers.ValidOidsStringsAsOidsTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ValidOidsStringsAsOidsTransformer validOidsStringsAsOidsTransformer0 = new ValidOidsStringsAsOidsTransformer();
      BsonBoolean bsonBoolean0 = new BsonBoolean(false);
      validOidsStringsAsOidsTransformer0.transform((HttpServerExchange) null, (RequestContext) null, (BsonValue) null, (BsonValue) bsonBoolean0);
      assertFalse(bsonBoolean0.isDecimal128());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ValidOidsStringsAsOidsTransformer validOidsStringsAsOidsTransformer0 = new ValidOidsStringsAsOidsTransformer();
      BsonBoolean bsonBoolean0 = new BsonBoolean(false);
      // Undeclared exception!
      try { 
        validOidsStringsAsOidsTransformer0.transform((HttpServerExchange) null, (RequestContext) null, (BsonValue) bsonBoolean0, (BsonValue) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // content to transform is not a document
         //
         verifyException("org.restheart.metadata.transformers.ValidOidsStringsAsOidsTransformer", e);
      }
  }
}
