/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:47:27 GMT 2019
 */

package org.restheart.handlers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.undertow.server.HttpServerExchange;
import io.undertow.server.ServerConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.restheart.db.DbsDAO;
import org.restheart.handlers.MetricsInstrumentationHandler;
import org.restheart.handlers.PipedHttpHandler;
import org.restheart.handlers.RequestContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricsInstrumentationHandler_ESTest extends MetricsInstrumentationHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      MetricsInstrumentationHandler metricsInstrumentationHandler0 = new MetricsInstrumentationHandler((PipedHttpHandler) null, (DbsDAO) null);
      try { 
        metricsInstrumentationHandler0.handleRequest(httpServerExchange0, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.MetricsInstrumentationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = MetricsInstrumentationHandler.isFilledAndNotMetrics("ObjectId");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = MetricsInstrumentationHandler.isFilledAndNotMetrics("_metrics");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = MetricsInstrumentationHandler.isFilledAndNotMetrics("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = MetricsInstrumentationHandler.isFilledAndNotMetrics((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MetricsInstrumentationHandler metricsInstrumentationHandler0 = null;
      try {
        metricsInstrumentationHandler0 = new MetricsInstrumentationHandler((PipedHttpHandler) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.restheart.db.DbsDAO
         //
         verifyException("org.restheart.handlers.PipedHttpHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MetricsInstrumentationHandler metricsInstrumentationHandler0 = new MetricsInstrumentationHandler((PipedHttpHandler) null, (DbsDAO) null);
      HttpServerExchange httpServerExchange0 = new HttpServerExchange((ServerConnection) null);
      // Undeclared exception!
      try { 
        metricsInstrumentationHandler0.addMetrics(6L, httpServerExchange0, (RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.MetricsInstrumentationHandler", e);
      }
  }
}
