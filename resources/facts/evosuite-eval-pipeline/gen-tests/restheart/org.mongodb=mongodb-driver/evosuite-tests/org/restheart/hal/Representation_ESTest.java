/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 09:29:14 GMT 2019
 */

package org.restheart.hal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.bson.BsonArray;
import org.bson.BsonDocument;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.codecs.Codec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.hal.Link;
import org.restheart.hal.Representation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Representation_ESTest extends Representation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Representation representation0 = new Representation();
      Representation representation1 = new Representation("application/hal+json");
      boolean boolean0 = representation0.equals(representation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Representation representation0 = new Representation();
      BsonDocument bsonDocument0 = representation0.asBsonDocument();
      representation0.addProperty(".u8?!.g<`336", bsonDocument0);
      // Undeclared exception!
      representation0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Representation representation0 = new Representation("qK; A");
      BsonArray bsonArray0 = representation0.addLinkArray("qK; A");
      bsonArray0.add((BsonValue) bsonArray0);
      // Undeclared exception!
      try { 
        representation0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Maximum serialization depth exceeded (does the object being serialized have a circular reference?).
         //
         verifyException("org.bson.AbstractBsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Representation representation0 = new Representation("xA=t");
      BsonArray bsonArray0 = representation0.addLinkArray("xA=t");
      bsonArray0.add((BsonValue) null);
      // Undeclared exception!
      try { 
        representation0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Representation representation0 = new Representation("");
      representation0.addRepresentation("", representation0);
      // Undeclared exception!
      try { 
        representation0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Representation representation0 = new Representation();
      // Undeclared exception!
      try { 
        representation0.addWarning((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value can not be null
         //
         verifyException("org.bson.BsonString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Representation representation0 = new Representation();
      // Undeclared exception!
      try { 
        representation0.addRepresentation((String) null, representation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Representation representation0 = new Representation(",3\"*Jc");
      BsonDocument bsonDocument0 = representation0.asBsonDocument();
      // Undeclared exception!
      try { 
        representation0.addProperty((String) null, bsonDocument0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Representation representation0 = new Representation("0S/^U4>X310r");
      // Undeclared exception!
      try { 
        representation0.addProperty("Fd'_Ns=?5cJS'jXZ-h{", (BsonValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value for key Fd'_Ns=?5cJS'jXZ-h{ can not be null
         //
         verifyException("org.bson.BsonDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Representation representation0 = new Representation("rh:warnings");
      Document document0 = new Document();
      Class<BsonValue> class0 = BsonValue.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        representation0.addProperties(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Representation representation0 = new Representation();
      Document document0 = new Document();
      Class<BsonValue> class0 = BsonValue.class;
      StringCodec stringCodec0 = new StringCodec();
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        representation0.addProperties(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Representation representation0 = new Representation();
      // Undeclared exception!
      try { 
        representation0.addLinkArray("\u0000\u05BE\u05D0\u05F3\u0600\u0750\u0E00\u1E00\u2100\uFB50\uFE70\uFF61");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BSON cstring '\u0000\u05BE\u05D0\u05F3\u0600\u0750\u0E00\u1E00\u2100\uFB50\uFE70\uFF61' is not valid because it contains a null character at index 0
         //
         verifyException("org.bson.BsonDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Representation representation0 = new Representation();
      Link link0 = new Link("application/hal+json", "application/x-www-form-urlencoded", true);
      representation0.addLink(link0);
      // Undeclared exception!
      try { 
        representation0.addLink(link0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value expected to be of type ARRAY is of unexpected type DOCUMENT
         //
         verifyException("org.bson.BsonValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Representation representation0 = new Representation();
      // Undeclared exception!
      try { 
        representation0.addLink((Link) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.hal.Representation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Representation representation0 = new Representation();
      // Undeclared exception!
      try { 
        representation0.addLink((Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.hal.Representation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Representation representation0 = new Representation();
      representation0.addRepresentation("uN1R\"[Sa:[", representation0);
      representation0.addRepresentation("uN1R\"[Sa:[", representation0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Representation representation0 = new Representation();
      representation0.addWarning("self");
      BsonDocument bsonDocument0 = representation0.asBsonDocument();
      assertFalse(bsonDocument0.isTimestamp());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Representation representation0 = new Representation((String) null);
      // Undeclared exception!
      try { 
        representation0.addLinkArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bson.BsonDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Representation representation0 = new Representation();
      Representation representation1 = new Representation("application/hal+json");
      representation1.addRepresentation("application/json", representation0);
      boolean boolean0 = representation0.equals(representation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Representation representation0 = new Representation();
      Link link0 = new Link("multipart/form-data", "application/json", false);
      representation0.addLink(link0);
      Representation representation1 = new Representation("application/hal+json");
      representation0.asBsonDocument();
      boolean boolean0 = representation0.equals(representation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Representation representation0 = new Representation();
      boolean boolean0 = representation0.equals(representation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Representation representation0 = new Representation("++E");
      boolean boolean0 = representation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Representation representation0 = new Representation();
      boolean boolean0 = representation0.equals("multipart/form-data");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Representation representation0 = new Representation();
      representation0.addProperties((BsonDocument) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Representation representation0 = new Representation("self");
      BsonDocument bsonDocument0 = representation0.asBsonDocument();
      representation0.addProperties(bsonDocument0);
      assertFalse(bsonDocument0.isDouble());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Representation representation0 = new Representation();
      Link link0 = new Link("application/x-www-form-urlencoded", "application/hal+json", false);
      representation0.addLink(link0, false);
      BsonArray bsonArray0 = representation0.addLinkArray("application/x-www-form-urlencoded");
      assertEquals(1, bsonArray0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Representation representation0 = new Representation();
      representation0.getType();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Representation representation0 = new Representation();
      representation0.addWarning("application/x-www-form-urlencoded");
      String string0 = representation0.toString();
      assertEquals("{ \"_embedded\" : { \"rh:warnings\" : [{ \"message\" : \"application/x-www-form-urlencoded\", \"_links\" : { \"self\" : { \"href\" : \"#warnings\" } } }] } }", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Representation representation0 = new Representation("self");
      representation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Representation representation0 = new Representation("self");
      Link link0 = new Link("org.restheart.hal.Representation", "application/x-www-form-urlencoded");
      representation0.addLink(link0);
      // Undeclared exception!
      try { 
        representation0.addLinkArray("org.restheart.hal.Representation");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value expected to be of type ARRAY is of unexpected type DOCUMENT
         //
         verifyException("org.bson.BsonValue", e);
      }
  }
}
