/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:01:06 GMT 2019
 */

package org.restheart.handlers.aggregation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.bson.BsonDocument;
import org.bson.BsonDocumentWrapper;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.BsonDocumentCodec;
import org.bson.codecs.Codec;
import org.bson.codecs.Encoder;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.aggregation.AggregationPipeline;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AggregationPipeline_ESTest extends AggregationPipeline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Encoder<Object> encoder0 = (Encoder<Object>) mock(Encoder.class, new ViolatedAssumptionAnswer());
      BsonDocumentWrapper<Object> bsonDocumentWrapper0 = new BsonDocumentWrapper<Object>("", encoder0);
      AggregationPipeline aggregationPipeline0 = null;
      try {
        aggregationPipeline0 = new AggregationPipeline(bsonDocumentWrapper0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // query does not have 'type' property
         //
         verifyException("org.restheart.handlers.aggregation.AbstractAggregationOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      AggregationPipeline aggregationPipeline0 = null;
      try {
        aggregationPipeline0 = new AggregationPipeline(rawBsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected size to be 0, not 5.
         //
         verifyException("org.bson.BsonBinaryReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AggregationPipeline aggregationPipeline0 = null;
      try {
        aggregationPipeline0 = new AggregationPipeline((BsonDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.handlers.aggregation.AbstractAggregationOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(byteArray0);
      AggregationPipeline aggregationPipeline0 = null;
      try {
        aggregationPipeline0 = new AggregationPipeline(rawBsonDocument0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Document document0 = new Document("", integer0);
      Class<String> class0 = String.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null, (Codec) null, (Codec) null, (Codec) null, (Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocumentCodec bsonDocumentCodec0 = new BsonDocumentCodec(codecRegistry0);
      CodecRegistry codecRegistry1 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(bsonDocumentCodec0).when(codecRegistry1).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry1);
      AggregationPipeline aggregationPipeline0 = null;
      try {
        aggregationPipeline0 = new AggregationPipeline(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to org.bson.BsonDocument
         //
         verifyException("org.bson.codecs.BsonDocumentCodec", e);
      }
  }
}
