/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Aug 22 10:13:59 GMT 2019
 */

package org.restheart.handlers.schema;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class SchemaStoreClient_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.restheart.handlers.schema.SchemaStoreClient"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "SG"); 
    java.lang.System.setProperty("user.dir", "/home/cgzhu/projects/gitslice/resources/facts/evosuite-eval-pipeline/gen-tests/restheart/org.mongodb=mongodb-driver"); 
    java.lang.System.setProperty("user.home", "/home/cgzhu"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "cgzhu"); 
    java.lang.System.setProperty("user.timezone", "Asia/Singapore"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SchemaStoreClient_ESTest_scaffolding.class.getClassLoader() ,
      "org.bson.BsonReaderMark",
      "com.mongodb.client.MongoDatabase",
      "org.bson.BsonNumber",
      "org.json.JSONException",
      "org.bson.json.ShellDecimal128Converter",
      "org.bson.BsonDbPointer",
      "org.bson.codecs.EncoderContext",
      "org.bson.BsonObjectId",
      "com.google.common.base.Converter$IdentityConverter",
      "org.bson.codecs.Decoder",
      "org.bson.json.ExtendedJsonBinaryConverter",
      "org.bson.BsonJavaScriptWithScope",
      "org.bson.BsonWriter",
      "org.restheart.handlers.schema.SchemaStoreURL",
      "org.bson.BsonDecimal128",
      "org.bson.BsonWriterSettings",
      "org.json.JSONObject$Null",
      "com.mongodb.client.MongoCollection",
      "org.bson.json.RelaxedExtendedJsonDateTimeConverter",
      "org.bson.json.ShellDateTimeConverter",
      "org.bson.BsonBoolean",
      "org.bson.json.JsonWriterSettings",
      "org.bson.json.ShellRegularExpressionConverter",
      "org.bson.codecs.configuration.CodecRegistry",
      "org.bson.BsonString",
      "org.bson.BsonMaxKey",
      "org.bson.BsonMinKey",
      "org.bson.BsonDocument",
      "org.bson.conversions.Bson",
      "org.bson.BsonDateTime",
      "org.bson.BsonInvalidOperationException",
      "org.bson.json.ShellTimestampConverter",
      "org.bson.json.JsonMode",
      "org.bson.json.Converter",
      "org.bson.BsonInt64",
      "org.bson.json.LegacyExtendedJsonRegularExpressionConverter",
      "org.bson.json.ShellMinKeyConverter",
      "org.bson.json.ShellMaxKeyConverter",
      "org.bson.types.Decimal128",
      "org.json.JSONPointer",
      "org.bson.json.ExtendedJsonInt64Converter",
      "org.bson.json.JsonWriterSettings$Builder",
      "org.bson.json.ShellObjectIdConverter",
      "org.bson.json.ExtendedJsonDoubleConverter",
      "org.bson.json.ExtendedJsonDecimal128Converter",
      "org.bson.json.JsonStringConverter",
      "org.bson.BsonDouble",
      "org.bson.BsonJavaScript",
      "org.bson.json.StrictJsonWriter",
      "org.bson.BSONException",
      "org.everit.json.schema.Schema",
      "org.bson.types.ObjectId",
      "com.google.common.base.Preconditions",
      "org.bson.json.JsonNullConverter",
      "org.bson.BsonRegularExpression",
      "com.google.common.base.Converter$1",
      "org.bson.BsonSymbol",
      "com.google.common.base.Converter$ConverterComposition",
      "org.bson.diagnostics.Loggers",
      "org.everit.json.schema.loader.SchemaClient",
      "org.everit.json.schema.loader.internal.DefaultSchemaClient",
      "org.restheart.db.DbsDAO",
      "org.bson.json.RelaxedExtendedJsonInt64Converter",
      "org.bson.json.ExtendedJsonUndefinedConverter",
      "org.bson.BsonReader",
      "org.bson.BsonValue",
      "org.json.JSONObject",
      "org.bson.BsonArray",
      "org.bson.json.ShellInt64Converter",
      "com.google.common.base.Converter",
      "org.bson.diagnostics.SLF4JLogger",
      "org.bson.assertions.Assertions",
      "com.google.common.base.Function",
      "org.bson.json.ExtendedJsonInt32Converter",
      "org.bson.BsonNull",
      "org.bson.json.ExtendedJsonMinKeyConverter",
      "org.bson.json.ShellUndefinedConverter",
      "org.bson.json.LegacyExtendedJsonDateTimeConverter",
      "org.restheart.handlers.IllegalQueryParamenterException",
      "com.google.common.base.Converter$ReverseConverter",
      "org.everit.json.schema.internal.JSONPrinter",
      "org.bson.codecs.Encoder",
      "org.restheart.db.Database",
      "org.bson.codecs.Codec",
      "com.mongodb.DB",
      "org.bson.json.RelaxedExtendedJsonDoubleConverter",
      "org.bson.json.ExtendedJsonTimestampConverter",
      "org.bson.json.ExtendedJsonObjectIdConverter",
      "org.restheart.handlers.schema.JsonSchemaCacheSingleton",
      "org.bson.json.ExtendedJsonMaxKeyConverter",
      "org.bson.json.ExtendedJsonRegularExpressionConverter",
      "org.bson.BsonType",
      "org.bson.json.JsonSymbolConverter",
      "org.bson.json.JsonInt32Converter",
      "org.restheart.handlers.schema.JsonSchemaNotFoundException",
      "org.json.JSONPointerException",
      "org.bson.BsonTimestamp",
      "org.bson.BsonUndefined",
      "org.restheart.handlers.schema.JsonSchemaCacheSingleton$CachesSingletonHolder",
      "org.bson.codecs.DecoderContext",
      "org.bson.diagnostics.Logger",
      "org.everit.json.schema.ValidationException",
      "org.restheart.handlers.schema.SchemaStoreClient",
      "org.restheart.db.OperationResult",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "org.bson.json.LegacyExtendedJsonBinaryConverter",
      "org.bson.json.JsonBooleanConverter",
      "org.bson.json.JsonDoubleConverter",
      "org.bson.json.ExtendedJsonDateTimeConverter",
      "org.bson.BsonInt32",
      "org.bson.json.ShellBinaryConverter",
      "org.json.JSONArray",
      "org.bson.BsonBinary"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SchemaStoreClient_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.everit.json.schema.loader.internal.DefaultSchemaClient",
      "org.restheart.handlers.schema.SchemaStoreClient",
      "org.restheart.handlers.schema.JsonSchemaCacheSingleton",
      "org.restheart.db.DbsDAO",
      "org.restheart.handlers.schema.JsonSchemaCacheSingleton$CachesSingletonHolder",
      "com.google.common.base.Converter",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.base.Preconditions",
      "org.restheart.handlers.schema.SchemaStoreURL",
      "com.google.common.base.Converter$IdentityConverter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.base.Converter$1",
      "com.google.common.base.Converter$ReverseConverter"
    );
  }
}
