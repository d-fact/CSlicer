/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 10:04:44 GMT 2019
 */

package org.restheart.metadata.checkers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Stack;
import org.bson.BsonArray;
import org.bson.BsonBinary;
import org.bson.BsonDocument;
import org.bson.BsonDouble;
import org.bson.BsonElement;
import org.bson.BsonValue;
import org.bson.Document;
import org.bson.RawBsonDocument;
import org.bson.codecs.Codec;
import org.bson.codecs.StringCodec;
import org.bson.codecs.configuration.CodecRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.restheart.handlers.RequestContext;
import org.restheart.metadata.checkers.CheckersUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckersUtils_ESTest extends CheckersUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckersUtils.isBulkRequest((RequestContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.CheckersUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("|;2ufi%2K\"Oe", "|;2ufi%2K\"Oe");
      Class<Object> class0 = Object.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((Codec) null).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        CheckersUtils.doesRequestUsesUpdateOperators(bsonDocument0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not unwrap a BsonDocumentWrapper with no Encoder
         //
         verifyException("org.bson.BsonDocumentWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckersUtils.doesRequestUsesUpdateOperators((BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.CheckersUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      Document document0 = new Document("|;2ufi%2K\"Oe", "|;2ufi%2K\"Oe");
      Class<Object> class0 = Object.class;
      CodecRegistry codecRegistry0 = mock(CodecRegistry.class, new ViolatedAssumptionAnswer());
      doReturn(stringCodec0).when(codecRegistry0).get(nullable(java.lang.Class.class));
      BsonDocument bsonDocument0 = document0.toBsonDocument(class0, codecRegistry0);
      // Undeclared exception!
      try { 
        CheckersUtils.doesRequestUsesUpdateOperators(bsonDocument0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bson.Document cannot be cast to java.lang.String
         //
         verifyException("org.bson.codecs.StringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      RequestContext.DOC_ID_TYPE requestContext_DOC_ID_TYPE0 = RequestContext.DOC_ID_TYPE.MAXKEY;
      Codec<RequestContext.DOC_ID_TYPE> codec0 = (Codec<RequestContext.DOC_ID_TYPE>) mock(Codec.class, new ViolatedAssumptionAnswer());
      RawBsonDocument rawBsonDocument0 = new RawBsonDocument(requestContext_DOC_ID_TYPE0, codec0);
      bsonArray0.add((BsonValue) rawBsonDocument0);
      // Undeclared exception!
      try { 
        CheckersUtils.doesRequestUsesDotNotation(bsonArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // While decoding a BSON document 4 bytes were required, but only 0 remain
         //
         verifyException("org.bson.io.ByteBufferBsonInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CheckersUtils.doesRequestUsesDotNotation((BsonValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.restheart.metadata.checkers.CheckersUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      boolean boolean0 = CheckersUtils.doesRequestUsesDotNotation(bsonArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<BsonElement> stack0 = new Stack<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(stack0);
      boolean boolean0 = CheckersUtils.doesRequestUsesDotNotation(bsonDocument0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BsonDouble bsonDouble0 = new BsonDouble(0.0);
      boolean boolean0 = CheckersUtils.doesRequestUsesDotNotation(bsonDouble0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BsonBinary bsonBinary0 = new BsonBinary(byteArray0);
      boolean boolean0 = CheckersUtils.doesRequestUsesUpdateOperators(bsonBinary0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<BsonElement> stack0 = new Stack<BsonElement>();
      BsonDocument bsonDocument0 = new BsonDocument(stack0);
      boolean boolean0 = CheckersUtils.doesRequestUsesUpdateOperators(bsonDocument0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BsonArray bsonArray0 = new BsonArray();
      boolean boolean0 = CheckersUtils.doesRequestUsesUpdateOperators(bsonArray0);
      assertTrue(boolean0);
  }
}
