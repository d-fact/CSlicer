[VERSION]: 28.0-jre
[INFO] Scanning for projects...
[INFO] 
[INFO] -------------------------< io.airlift:airline >-------------------------
[INFO] Building airline 0.8
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ airline ---
[INFO] Deleting /home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/target
[INFO] 
[INFO] --- maven-dependency-plugin:2.10:list (default-cli) @ airline ---
[INFO] 
[INFO] The following files have been resolved:
[INFO]    com.google.code.findbugs:jsr305:jar:3.0.2:compile
[INFO]    com.google.guava:guava:jar:21.0:compile
[INFO]    javax.inject:javax.inject:jar:1:compile
[INFO]    org.yaml:snakeyaml:jar:1.15:test
[INFO]    org.apache.ant:ant-launcher:jar:1.7.0:test
[INFO]    org.testng:testng:jar:6.9.6:test
[INFO]    org.apache.ant:ant:jar:1.7.0:test
[INFO]    org.beanshell:bsh:jar:2.0b4:test
[INFO]    com.beust:jcommander:jar:1.48:test
[INFO] 
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M1:enforce (default) @ airline ---
[INFO] 
[INFO] --- maven-dependency-versions-check-plugin:2.0.4:check (default) @ airline ---
[INFO] Checking dependency versions
[INFO] 
[INFO] --- dependency-scope-maven-plugin:0.8:check (default) @ airline ---
[INFO] No test dependency scope issues found
[INFO] 
[INFO] --- license-maven-plugin:2.3:check (default) @ airline ---
[INFO] Checking licenses...
[INFO] 
[INFO] --- jacoco-maven-plugin:0.7.9:prepare-agent (default) @ airline ---
[INFO] argLine set to -javaagent:/home/cgzhu/.m2/repository/org/jacoco/org.jacoco.agent/0.7.9/org.jacoco.agent-0.7.9-runtime.jar=destfile=/home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/target/jacoco.exec
[INFO] 
[INFO] --- git-commit-id-plugin:2.1.13:revision (default) @ airline ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ airline ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.6.2:compile (default-compile) @ airline ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 42 source files to /home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ airline ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.6.2:testCompile (default-testCompile) @ airline ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 34 source files to /home/cgzhu/projects/gitslice/resources/facts/upgrade_jars_exp/_downloads/airline/target/test-classes
[INFO] 
[INFO] --- maven-dependency-plugin:2.10:analyze-only (default) @ airline ---
[INFO] No dependency problems found
[INFO] 
[INFO] --- maven-dependency-plugin:2.10:analyze-duplicate (default) @ airline ---
[INFO] No duplicate dependencies found in <dependencies/> or in <dependencyManagement/>
[INFO] 
[INFO] --- maven-dependency-plugin:2.10:analyze-dep-mgt (default) @ airline ---
[INFO] Found Resolved Dependency / DependencyManagement mismatches:
[INFO] 	Ignoring Direct Dependencies.
[INFO]    None
[INFO] 
[INFO] --- maven-duplicate-finder-plugin:1.0.6:check (default) @ airline ---
[INFO] Checking compile classpath
[INFO] Checking runtime classpath
[INFO] Checking test classpath
[INFO] 
[INFO] --- modernizer-maven-plugin:1.5.0:modernizer (modernizer) @ airline ---
[INFO] 
[INFO] --- maven-surefire-plugin:2.20:test (default-test) @ airline ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running TestSuite
$ git add -p file
Add

$ git remote add origin git@github.com:airlift/airline.git
RemoteAdd

$ git -v remote show origin
RemoteShow

$ git 
usage: git [-v] <command> [<args>]

The most commonly used git commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.


$ git help
usage: git [-v] <command> [<args>]

The most commonly used git commands are:
    add      Add file contents to the index
    help     Display help information
    remote   Manage set of tracked repositories

See 'git help <command>' for more information on a specific command.


$ git help git
NAME
        git - the stupid content tracker

SYNOPSIS
        git [-v] <command> [<args>]

OPTIONS
        -v
            Verbose mode

COMMANDS
        help
            Display help information

        add
            Add file contents to the index

        remote show
            Gives some information about the remote <name>

        remote add
            Adds a remote



$ git help add
NAME
        git add - Add file contents to the index

SYNOPSIS
        git [-v] add [-i] [--] [<patterns>...]

OPTIONS
        -i
            Add modified contents interactively.

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        <patterns>
            Patterns of files to be added



$ git help remote
NAME
        git remote - Manage set of tracked repositories

SYNOPSIS
        git [-v] remote
        git [-v] remote add [-t <branch>]
        git [-v] remote show [-n]

OPTIONS
        -v
            Verbose mode

COMMANDS
        With no arguments, Gives some information about the remote <name>

        show
            Gives some information about the remote <name>

            With -n option, Do not query remote heads

        add
            Adds a remote

            With -t option, Track only a specific branch



$ git help remote show
NAME
        git remote show - Gives some information about the remote <name>

SYNOPSIS
        git [-v] remote show [-n] [--] [<remote>]

OPTIONS
        -n
            Do not query remote heads

        -v
            Verbose mode

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        <remote>
            Remote to show



NAME
        test - TestCommand

SYNOPSIS
        test [(-h | --help)] [-i] [--] [<patterns>...]

OPTIONS
        -h, --help
            Display help information

        -i
            Interactive add mode

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        <patterns>
            Patterns of files to be added


$ galaxy 
usage: galaxy [--debug] [--coordinator <coordinator>] <command> [<args>]

The most commonly used galaxy commands are:
    agent             Manage agents
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot

See 'galaxy help <command>' for more information on a specific command.


$ galaxy help
usage: galaxy [--debug] [--coordinator <coordinator>] <command> [<args>]

The most commonly used galaxy commands are:
    agent             Manage agents
    help              Display help information about galaxy
    install           Install software in a new slot
    reset-to-actual   Reset slot expected state to actual
    restart           Restart server
    show              Show state of all slots
    ssh               ssh to slot installation
    start             Start a server
    stop              Stop a server
    terminate         Terminate (remove) a slot
    upgrade           Upgrade software in a slot

See 'galaxy help <command>' for more information on a specific command.


$ galaxy help galaxy
NAME
        galaxy - cloud management system

SYNOPSIS
        galaxy [--debug] [--coordinator <coordinator>] <command> [<args>]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

COMMANDS
        help
            Display help information about galaxy

        show
            Show state of all slots

        install
            Install software in a new slot

        upgrade
            Upgrade software in a slot

        terminate
            Terminate (remove) a slot

        start
            Start a server

        stop
            Stop a server

        restart
            Restart server

        ssh
            ssh to slot installation

        reset-to-actual
            Reset slot expected state to actual

        agent show
            Show agent details

        agent add
            Provision a new agent

        agent terminate
            Provision a new agent



$ galaxy help show
NAME
        galaxy show - Show state of all slots

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] show
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help install
NAME
        galaxy install - Install software in a new slot

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] install [--count <count>]
                [(-i <host> | --host <host>)...] [(-I <ip> | --ip <ip>)...]
                [(-s <state> | --state <state>)...] [(-u <uuid> | --uuid <uuid>)...]
                [--] <groupId:artifactId[:packaging[:classifier]]:version>
                @<component:pools:version>

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of instances to install

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        <groupId:artifactId[:packaging[:classifier]]:version>
        @<component:pools:version>
            The binary and @configuration to install. The default packaging is
            tar.gz



$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] upgrade
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...] [--] [<binary-version>]
                [@<config-version>]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        [<binary-version>] [@<config-version>]
            Version of the binary and/or @configuration



$ galaxy help upgrade
NAME
        galaxy upgrade - Upgrade software in a slot

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] upgrade
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...] [--] [<binary-version>]
                [@<config-version>]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        [<binary-version>] [@<config-version>]
            Version of the binary and/or @configuration



$ galaxy help terminate
NAME
        galaxy terminate - Terminate (remove) a slot

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] terminate
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help start
NAME
        galaxy start - Start a server

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] start
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help stop
NAME
        galaxy stop - Stop a server

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] stop
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help restart
NAME
        galaxy restart - Restart server

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] restart
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help reset-to-actual
NAME
        galaxy reset-to-actual - Reset slot expected state to actual

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] reset-to-actual
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help ssh
NAME
        galaxy ssh - ssh to slot installation

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] ssh
                [(-b <binary> | --binary <binary>)...]
                [(-c <config> | --config <config>)...] [(-i <host> | --host <host>)...]
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...] [--] [<command>]

OPTIONS
        -b <binary>, --binary <binary>
            Select slots with a given binary

        -c <config>, --config <config>
            Select slots with a given configuration

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        <command>
            Command to execute on the remote host



$ galaxy help agent
NAME
        galaxy agent - Manage agents

SYNOPSIS
        galaxy [--debug] [--coordinator <coordinator>] agent
        galaxy [--debug] [--coordinator <coordinator>] agent add
                [--availability-zone <availabilityZone>] [--count <count>]
        galaxy [--debug] [--coordinator <coordinator>] agent show
                [(-I <ip> | --ip <ip>)...] [(-s <state> | --state <state>)...]
                [(-u <uuid> | --uuid <uuid>)...] [(-i <host> | --host <host>)...]
        galaxy [--debug] [--coordinator <coordinator>] agent terminate

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

COMMANDS
        With no arguments, Show agent details

        show
            Show agent details

            With --ip option, Select slots at the given IP address

            With --state option, Select 'r{unning}', 's{topped}' or 'unknown'
            slots

            With --uuid option, Select slot with the given UUID

            With --host option, Select slots on the given host

        add
            Provision a new agent

            With --availability-zone option, Availability zone to provision

            With --count option, Number of agents to provision

        terminate
            Provision a new agent



$ galaxy help agent show
NAME
        galaxy agent show - Show agent details

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] agent show
                [(-i <host> | --host <host>)...] [(-I <ip> | --ip <ip>)...]
                [(-s <state> | --state <state>)...] [(-u <uuid> | --uuid <uuid>)...]

OPTIONS
        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --debug
            Enable debug messages

        -i <host>, --host <host>
            Select slots on the given host

        -I <ip>, --ip <ip>
            Select slots at the given IP address

        -s <state>, --state <state>
            Select 'r{unning}', 's{topped}' or 'unknown' slots

        -u <uuid>, --uuid <uuid>
            Select slot with the given UUID



$ galaxy help agent add
NAME
        galaxy agent add - Provision a new agent

SYNOPSIS
        galaxy [--coordinator <coordinator>] [--debug] agent add
                [--availability-zone <availabilityZone>] [--count <count>] [--]
                [<instance-type>]

OPTIONS
        --availability-zone <availabilityZone>
            Availability zone to provision

        --coordinator <coordinator>
            Galaxy coordinator host (overrides GALAXY_COORDINATOR)

        --count <count>
            Number of agents to provision

        --debug
            Enable debug messages

        --
            This option can be used to separate command-line options from the
            list of argument, (useful when arguments might be mistaken for
            command-line options

        [<instance-type>]
            Instance type to provision



$ galaxy --debug show -u b2 --state r
ShowCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=[r]}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug install com.proofpoint.discovery:discovery-server:1.1 @discovery:general:1.0
InstallCommand{count=1, agentFilter=AgentFilter{host=[], ip=[], uuid=[], state=[]}, assignment=[com.proofpoint.discovery:discovery-server:1.1, @discovery:general:1.0], globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug upgrade -u b2 1.1 @1.0
UpgradeCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, versions=[1.1, @1.0], globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug upgrade -u b2 1.1 @1.0 -s r
UpgradeCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=[r]}, versions=[1.1, @1.0], globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug terminate -u b2
TerminateCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug start -u b2
StartCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug stop -u b2
StopCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug restart -u b2
RestartCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug reset-to-actual -u b2
ResetToActualCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=null}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug ssh
SshCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=null, state=null}, command=null}

$ galaxy --debug ssh -u b2 --state r tail -F var/log/launcher.log
SshCommand{slotFilter=SlotFilter{binary=null, config=null, host=null, ip=null, uuid=[b2], state=[r]}, command=tail -F var/log/launcher.log}

$ galaxy --debug agent
AgentShowCommand{agentFilter=AgentFilter{host=[], ip=[], uuid=[], state=[]}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug agent show
AgentShowCommand{agentFilter=AgentFilter{host=[], ip=[], uuid=[], state=[]}, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ galaxy --debug agent add --count 4 t1.micro
AgentAddCommand{count=4, availabilityZone=null, instanceType=t1.micro, globalOptions=GlobalOptions{debug=true, coordinator=http://localhost:64000}}

$ ping 
Ping count: 1

$ ping -c 5
Ping count: 5

$ ping --count 9
Ping count: 9

$ ping -h
NAME
        ping - network test utility

SYNOPSIS
        ping [(-c <count> | --count <count>)] [(-h | --help)]

OPTIONS
        -c <count>, --count <count>
            Send count packets

        -h, --help
            Display help information



$ ping --help
NAME
        ping - network test utility

SYNOPSIS
        ping [(-c <count> | --count <count>)] [(-h | --help)]

OPTIONS
        -c <count>, --count <count>
            Send count packets

        -h, --help
            Display help information



[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.147 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.387 s
[INFO] Finished at: 2019-08-20T18:42:06+08:00
[INFO] ------------------------------------------------------------------------
